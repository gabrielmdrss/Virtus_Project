
Projeto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001520  0800bdf8  0800bdf8  0000cdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d318  0800d318  0000f258  2**0
                  CONTENTS
  4 .ARM          00000008  0800d318  0800d318  0000e318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d320  0800d320  0000f258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d320  0800d320  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d324  0800d324  0000e324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800d328  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000258  0800d580  0000f258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800d580  0000f9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001310e  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ac  00000000  00000000  00022396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00024b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1b  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e7d  00000000  00000000  00026b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a3b  00000000  00000000  0004b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e31b4  00000000  00000000  00062403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001455b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006350  00000000  00000000  001455fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000258 	.word	0x20000258
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bde0 	.word	0x0800bde0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000025c 	.word	0x2000025c
 800020c:	0800bde0 	.word	0x0800bde0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <low_pass_filter>:
 *
 * This function applies a smoothing algorithm using an exponential
 * moving average. The smoothing factor `alpha` determines the influence
 * of the new value relative to the previous filtered value.
 */
uint16_t low_pass_filter(uint16_t new_value) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
    filtered_value = (alpha * new_value) + ((1 - alpha) * filtered_value);
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <low_pass_filter+0x60>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <low_pass_filter+0x60>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800104c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <low_pass_filter+0x64>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <low_pass_filter+0x64>)
 8001070:	801a      	strh	r2, [r3, #0]
    return filtered_value;
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <low_pass_filter+0x64>)
 8001074:	881b      	ldrh	r3, [r3, #0]
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000006c 	.word	0x2000006c
 8001088:	200002ec 	.word	0x200002ec

0800108c <MPU6050_Init>:
 * - Setting output sampling rate to 100 Hz.
 *
 * @note Assumes that the I2C interface has been initialized and the
 *       `hi2c1` handle is available.
 */
void MPU6050_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af04      	add	r7, sp, #16
    uint8_t check;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000); // Check device ID WHO_AM_I
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2275      	movs	r2, #117	@ 0x75
 80010a4:	21d0      	movs	r1, #208	@ 0xd0
 80010a6:	484f      	ldr	r0, [pc, #316]	@ (80011e4 <MPU6050_Init+0x158>)
 80010a8:	f003 f91e 	bl	80042e8 <HAL_I2C_Mem_Read>

    if (check == 0x68) {  // 0x68 indicates the sensor is working correctly
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b68      	cmp	r3, #104	@ 0x68
 80010b0:	f040 8093 	bne.w	80011da <MPU6050_Init+0x14e>
        HAL_Delay(100);
 80010b4:	2064      	movs	r0, #100	@ 0x64
 80010b6:	f002 f859 	bl	800316c <HAL_Delay>

        uint8_t Data;

        // Reset the sensor
        Data = DEVICE_RESET;
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	226b      	movs	r2, #107	@ 0x6b
 80010d0:	21d0      	movs	r1, #208	@ 0xd0
 80010d2:	4844      	ldr	r0, [pc, #272]	@ (80011e4 <MPU6050_Init+0x158>)
 80010d4:	f003 f80e 	bl	80040f4 <HAL_I2C_Mem_Write>

        // Reset digital filters
        Data = 0b00000111;
 80010d8:	2307      	movs	r3, #7
 80010da:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SIGNAL_PATH_RESET, 1, &Data, 1, 1000);
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	1dbb      	adds	r3, r7, #6
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2268      	movs	r2, #104	@ 0x68
 80010ee:	21d0      	movs	r1, #208	@ 0xd0
 80010f0:	483c      	ldr	r0, [pc, #240]	@ (80011e4 <MPU6050_Init+0x158>)
 80010f2:	f002 ffff 	bl	80040f4 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 80010f6:	2064      	movs	r0, #100	@ 0x64
 80010f8:	f002 f838 	bl	800316c <HAL_Delay>

        // Reset data registers
        Data = SIG_COND_RST;
 80010fc:	2301      	movs	r3, #1
 80010fe:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &Data, 1, 1000);
 8001100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2301      	movs	r3, #1
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	226a      	movs	r2, #106	@ 0x6a
 8001112:	21d0      	movs	r1, #208	@ 0xd0
 8001114:	4833      	ldr	r0, [pc, #204]	@ (80011e4 <MPU6050_Init+0x158>)
 8001116:	f002 ffed 	bl	80040f4 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f002 f826 	bl	800316c <HAL_Delay>

        // Select the best available clock source (gyro PLL)
        Data = 0b001;
 8001120:	2301      	movs	r3, #1
 8001122:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2301      	movs	r3, #1
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	1dbb      	adds	r3, r7, #6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	226b      	movs	r2, #107	@ 0x6b
 8001136:	21d0      	movs	r1, #208	@ 0xd0
 8001138:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <MPU6050_Init+0x158>)
 800113a:	f002 ffdb 	bl	80040f4 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f002 f814 	bl	800316c <HAL_Delay>

        // Configure sampling and filtering parameters
        Data = 0b100;  // Fs=1kHz, gyro_BW=20Hz, temp_BW=20Hz
 8001144:	2304      	movs	r3, #4
 8001146:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &Data, 1, 1000);
 8001148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2301      	movs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	221a      	movs	r2, #26
 800115a:	21d0      	movs	r1, #208	@ 0xd0
 800115c:	4821      	ldr	r0, [pc, #132]	@ (80011e4 <MPU6050_Init+0x158>)
 800115e:	f002 ffc9 	bl	80040f4 <HAL_I2C_Mem_Write>

        // Set gyroscope full-scale range to ±250°/s
        Data = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1dbb      	adds	r3, r7, #6
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	221b      	movs	r2, #27
 8001178:	21d0      	movs	r1, #208	@ 0xd0
 800117a:	481a      	ldr	r0, [pc, #104]	@ (80011e4 <MPU6050_Init+0x158>)
 800117c:	f002 ffba 	bl	80040f4 <HAL_I2C_Mem_Write>

        // Set accelerometer full-scale range to ±2g
        Data = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	221c      	movs	r2, #28
 8001196:	21d0      	movs	r1, #208	@ 0xd0
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <MPU6050_Init+0x158>)
 800119a:	f002 ffab 	bl	80040f4 <HAL_I2C_Mem_Write>

        // Set LPF parameters for the accelerometer (Fs=1kHz, accel_BW=20Hz)
        Data = 0b100;
 800119e:	2304      	movs	r3, #4
 80011a0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG2, 1, &Data, 1, 1000);
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	221d      	movs	r2, #29
 80011b4:	21d0      	movs	r1, #208	@ 0xd0
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <MPU6050_Init+0x158>)
 80011b8:	f002 ff9c 	bl	80040f4 <HAL_I2C_Mem_Write>

        // Set output data sampling rate to 100 Hz [1kHz/(1+9) = 100 Hz]
        Data = 9;
 80011bc:	2309      	movs	r3, #9
 80011be:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2219      	movs	r2, #25
 80011d2:	21d0      	movs	r1, #208	@ 0xd0
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MPU6050_Init+0x158>)
 80011d6:	f002 ff8d 	bl	80040f4 <HAL_I2C_Mem_Write>
    }
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000338 	.word	0x20000338

080011e8 <menu>:
 *   - `ssd1306_DrawRectangle`: Draws a rectangle at the specified coordinates.
 *
 * @note Assumes that `menu_items` and `bitmap_icons` arrays are defined and populated
 *       with the corresponding strings and bitmap data for the menu options.
 */
void menu(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af02      	add	r7, sp, #8
    ssd1306_Fill(0); // Clear the display
 80011ee:	2000      	movs	r0, #0
 80011f0:	f005 fc8e 	bl	8006b10 <ssd1306_Fill>

    // Render the previous menu item
    ssd1306_SetCursor(25, 5);
 80011f4:	2105      	movs	r1, #5
 80011f6:	2019      	movs	r0, #25
 80011f8:	f005 fdd4 	bl	8006da4 <ssd1306_SetCursor>
    ssd1306_WriteString(menu_items[item_sel_previous], Font_7x10, 1);
 80011fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <menu+0x140>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4a48      	ldr	r2, [pc, #288]	@ (800132c <menu+0x144>)
 800120a:	1898      	adds	r0, r3, r2
 800120c:	4b48      	ldr	r3, [pc, #288]	@ (8001330 <menu+0x148>)
 800120e:	2201      	movs	r2, #1
 8001210:	9200      	str	r2, [sp, #0]
 8001212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001214:	f005 fda0 	bl	8006d58 <ssd1306_WriteString>
    ssd1306_DrawBitmap(4, 2, bitmap_icons[item_sel_previous], 16, 16, 1);
 8001218:	4b43      	ldr	r3, [pc, #268]	@ (8001328 <menu+0x140>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a45      	ldr	r2, [pc, #276]	@ (8001334 <menu+0x14c>)
 800121e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001222:	2301      	movs	r3, #1
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2310      	movs	r3, #16
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2310      	movs	r3, #16
 800122c:	2102      	movs	r1, #2
 800122e:	2004      	movs	r0, #4
 8001230:	f005 fec1 	bl	8006fb6 <ssd1306_DrawBitmap>

    // Render the currently selected menu item
    ssd1306_SetCursor(25, 5 + 20 + 2);
 8001234:	211b      	movs	r1, #27
 8001236:	2019      	movs	r0, #25
 8001238:	f005 fdb4 	bl	8006da4 <ssd1306_SetCursor>
    ssd1306_WriteString(menu_items[item_selected], Font_7x10, 1);
 800123c:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <menu+0x150>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4a38      	ldr	r2, [pc, #224]	@ (800132c <menu+0x144>)
 800124a:	1898      	adds	r0, r3, r2
 800124c:	4b38      	ldr	r3, [pc, #224]	@ (8001330 <menu+0x148>)
 800124e:	2201      	movs	r2, #1
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001254:	f005 fd80 	bl	8006d58 <ssd1306_WriteString>
    ssd1306_DrawBitmap(4, 24, bitmap_icons[item_selected], 16, 16, 1);
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <menu+0x150>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a35      	ldr	r2, [pc, #212]	@ (8001334 <menu+0x14c>)
 800125e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2310      	movs	r3, #16
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2310      	movs	r3, #16
 800126c:	2118      	movs	r1, #24
 800126e:	2004      	movs	r0, #4
 8001270:	f005 fea1 	bl	8006fb6 <ssd1306_DrawBitmap>


    // Render the next menu item
    ssd1306_SetCursor(25, 5 + 20 + 20 + 2 + 2);
 8001274:	2131      	movs	r1, #49	@ 0x31
 8001276:	2019      	movs	r0, #25
 8001278:	f005 fd94 	bl	8006da4 <ssd1306_SetCursor>
    ssd1306_WriteString(menu_items[item_sel_next], Font_7x10, 1);
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <menu+0x154>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4a28      	ldr	r2, [pc, #160]	@ (800132c <menu+0x144>)
 800128a:	1898      	adds	r0, r3, r2
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <menu+0x148>)
 800128e:	2201      	movs	r2, #1
 8001290:	9200      	str	r2, [sp, #0]
 8001292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001294:	f005 fd60 	bl	8006d58 <ssd1306_WriteString>
    ssd1306_DrawBitmap(4, 46, bitmap_icons[item_sel_next], 16, 16, 1);
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <menu+0x154>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a25      	ldr	r2, [pc, #148]	@ (8001334 <menu+0x14c>)
 800129e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	2310      	movs	r3, #16
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2310      	movs	r3, #16
 80012ac:	212e      	movs	r1, #46	@ 0x2e
 80012ae:	2004      	movs	r0, #4
 80012b0:	f005 fe81 	bl	8006fb6 <ssd1306_DrawBitmap>

    // Draw the selection outline around the currently selected item
    ssd1306_DrawBitmap(0, 22, bitmap_item_sel_outline, 128, 21, 1);
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	2315      	movs	r3, #21
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <menu+0x158>)
 80012c0:	2116      	movs	r1, #22
 80012c2:	2000      	movs	r0, #0
 80012c4:	f005 fe77 	bl	8006fb6 <ssd1306_DrawBitmap>

    // Render the scrollbar on the right side
    ssd1306_DrawBitmap(128 - 8, 0, bitmap_scrollbar_background, 8, 64, 1);
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	2340      	movs	r3, #64	@ 0x40
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2308      	movs	r3, #8
 80012d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <menu+0x15c>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	@ 0x78
 80012d8:	f005 fe6d 	bl	8006fb6 <ssd1306_DrawBitmap>
    ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <menu+0x150>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	b2d9      	uxtb	r1, r3
                           (64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <menu+0x150>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
    ssd1306_DrawRectangle(125, 64 / NUM_ITEMS * item_selected, 128,
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2201      	movs	r2, #1
 80012f4:	9200      	str	r2, [sp, #0]
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	207d      	movs	r0, #125	@ 0x7d
 80012fa:	f005 fdd7 	bl	8006eac <ssd1306_DrawRectangle>
    ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <menu+0x150>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	b2d9      	uxtb	r1, r3
                           (64 / NUM_ITEMS * item_selected + (64 / NUM_ITEMS)), 1);
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <menu+0x150>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
    ssd1306_DrawRectangle(126, 64 / NUM_ITEMS * item_selected, 127,
 800130e:	b2db      	uxtb	r3, r3
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2201      	movs	r2, #1
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	227f      	movs	r2, #127	@ 0x7f
 800131a:	207e      	movs	r0, #126	@ 0x7e
 800131c:	f005 fdc6 	bl	8006eac <ssd1306_DrawRectangle>
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000278 	.word	0x20000278
 800132c:	20000010 	.word	0x20000010
 8001330:	0800cea0 	.word	0x0800cea0
 8001334:	20000000 	.word	0x20000000
 8001338:	20000274 	.word	0x20000274
 800133c:	2000027c 	.word	0x2000027c
 8001340:	0800bfd0 	.word	0x0800bfd0
 8001344:	0800bf90 	.word	0x0800bf90

08001348 <print_gyro>:
 *   - `ssd1306_DrawRectangle`: Draws a rectangle with the specified coordinates.
 *
 * @note The function assumes that the gyroscope data (`RateRoll`, `RatePitch`, `RateYaw`) has already
 *       been obtained from the sensor and is available in the variables `RateRoll`, `RatePitch`, and `RateYaw`.
 */
void print_gyro(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
	uint8_t check;
	// Check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2275      	movs	r2, #117	@ 0x75
 8001360:	21d0      	movs	r1, #208	@ 0xd0
 8001362:	4845      	ldr	r0, [pc, #276]	@ (8001478 <print_gyro+0x130>)
 8001364:	f002 ffc0 	bl	80042e8 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b68      	cmp	r3, #104	@ 0x68
 800136c:	d175      	bne.n	800145a <print_gyro+0x112>

		char buffer_floats[7];
		ssd1306_Fill(0); // Clear the display
 800136e:	2000      	movs	r0, #0
 8001370:	f005 fbce 	bl	8006b10 <ssd1306_Fill>

		// Display header
		ssd1306_SetCursor(35, 1);
 8001374:	2101      	movs	r1, #1
 8001376:	2023      	movs	r0, #35	@ 0x23
 8001378:	f005 fd14 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("GYROSCOPE", Font_7x10, 1);
 800137c:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <print_gyro+0x134>)
 800137e:	2201      	movs	r2, #1
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001384:	483e      	ldr	r0, [pc, #248]	@ (8001480 <print_gyro+0x138>)
 8001386:	f005 fce7 	bl	8006d58 <ssd1306_WriteString>
		ssd1306_FillRectangle(1, 15, 128, 16, 1);
 800138a:	2301      	movs	r3, #1
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2310      	movs	r3, #16
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	210f      	movs	r1, #15
 8001394:	2001      	movs	r0, #1
 8001396:	f005 fdc0 	bl	8006f1a <ssd1306_FillRectangle>
		ssd1306_DrawRectangle(1, 20, 127, 63, 1);
 800139a:	2301      	movs	r3, #1
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	233f      	movs	r3, #63	@ 0x3f
 80013a0:	227f      	movs	r2, #127	@ 0x7f
 80013a2:	2114      	movs	r1, #20
 80013a4:	2001      	movs	r0, #1
 80013a6:	f005 fd81 	bl	8006eac <ssd1306_DrawRectangle>

		// Display gyroscope rates
		ssd1306_SetCursor(7, 25);
 80013aa:	2119      	movs	r1, #25
 80013ac:	2007      	movs	r0, #7
 80013ae:	f005 fcf9 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("GYRO X: ", Font_6x8, 1);
 80013b2:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <print_gyro+0x13c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ba:	4833      	ldr	r0, [pc, #204]	@ (8001488 <print_gyro+0x140>)
 80013bc:	f005 fccc 	bl	8006d58 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.0f", RateRoll);
 80013c0:	4b32      	ldr	r3, [pc, #200]	@ (800148c <print_gyro+0x144>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4638      	mov	r0, r7
 80013d0:	492f      	ldr	r1, [pc, #188]	@ (8001490 <print_gyro+0x148>)
 80013d2:	f006 fddf 	bl	8007f94 <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1);
 80013d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <print_gyro+0x13c>)
 80013d8:	4638      	mov	r0, r7
 80013da:	2201      	movs	r2, #1
 80013dc:	9200      	str	r2, [sp, #0]
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	f005 fcba 	bl	8006d58 <ssd1306_WriteString>

		ssd1306_SetCursor(7, 39);
 80013e4:	2127      	movs	r1, #39	@ 0x27
 80013e6:	2007      	movs	r0, #7
 80013e8:	f005 fcdc 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("GYRO Y: ", Font_6x8, 1);
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <print_gyro+0x13c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f4:	4827      	ldr	r0, [pc, #156]	@ (8001494 <print_gyro+0x14c>)
 80013f6:	f005 fcaf 	bl	8006d58 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.0f", RatePitch);
 80013fa:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <print_gyro+0x150>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8c2 	bl	8000588 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4638      	mov	r0, r7
 800140a:	4921      	ldr	r1, [pc, #132]	@ (8001490 <print_gyro+0x148>)
 800140c:	f006 fdc2 	bl	8007f94 <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1);
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <print_gyro+0x13c>)
 8001412:	4638      	mov	r0, r7
 8001414:	2201      	movs	r2, #1
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	f005 fc9d 	bl	8006d58 <ssd1306_WriteString>

		ssd1306_SetCursor(7, 53);
 800141e:	2135      	movs	r1, #53	@ 0x35
 8001420:	2007      	movs	r0, #7
 8001422:	f005 fcbf 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("GYRO Z: ", Font_6x8, 1);
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <print_gyro+0x13c>)
 8001428:	2201      	movs	r2, #1
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142e:	481b      	ldr	r0, [pc, #108]	@ (800149c <print_gyro+0x154>)
 8001430:	f005 fc92 	bl	8006d58 <ssd1306_WriteString>
		sprintf(buffer_floats, "%.0f", RateYaw);
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <print_gyro+0x158>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f8a5 	bl	8000588 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4638      	mov	r0, r7
 8001444:	4912      	ldr	r1, [pc, #72]	@ (8001490 <print_gyro+0x148>)
 8001446:	f006 fda5 	bl	8007f94 <siprintf>
		ssd1306_WriteString(buffer_floats, Font_6x8, 1);
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <print_gyro+0x13c>)
 800144c:	4638      	mov	r0, r7
 800144e:	2201      	movs	r2, #1
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001454:	f005 fc80 	bl	8006d58 <ssd1306_WriteString>
	} else {
		// Display "INERCIAL OFF" if the sensor is not detected
		ssd1306_SetCursor(5, 30);
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1);
	}
}
 8001458:	e00a      	b.n	8001470 <print_gyro+0x128>
		ssd1306_SetCursor(5, 30);
 800145a:	211e      	movs	r1, #30
 800145c:	2005      	movs	r0, #5
 800145e:	f005 fca1 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("INERCIAL OFF", Font_6x8, 1);
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <print_gyro+0x13c>)
 8001464:	2201      	movs	r2, #1
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	480e      	ldr	r0, [pc, #56]	@ (80014a4 <print_gyro+0x15c>)
 800146c:	f005 fc74 	bl	8006d58 <ssd1306_WriteString>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000338 	.word	0x20000338
 800147c:	0800cea0 	.word	0x0800cea0
 8001480:	0800be44 	.word	0x0800be44
 8001484:	0800ce94 	.word	0x0800ce94
 8001488:	0800be50 	.word	0x0800be50
 800148c:	200002b0 	.word	0x200002b0
 8001490:	0800be5c 	.word	0x0800be5c
 8001494:	0800be64 	.word	0x0800be64
 8001498:	200002b4 	.word	0x200002b4
 800149c:	0800be70 	.word	0x0800be70
 80014a0:	200002b8 	.word	0x200002b8
 80014a4:	0800be34 	.word	0x0800be34

080014a8 <calibration>:
 *
 * @note The function uses a loop to collect MAX_SAMPLE readings and calculates the
 *       average. The offset values are rounded, scaled, and multiplied by -1 before
 *       being written to the respective MPU6050 registers.
 */
void calibration(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b096      	sub	sp, #88	@ 0x58
 80014ac:	af04      	add	r7, sp, #16

    const uint16_t MAX_SAMPLE = 1000; 										// Number of samples for offset calculation
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint8_t rawData[14];              										// Array to store raw sensor data

    int16_t RAW_ACCEL_X, RAW_ACCEL_Y, RAW_ACCEL_Z; 							// Raw accelerometer values
    int16_t RAW_GYRO_X, RAW_GYRO_Y, RAW_GYRO_Z;   							// Raw gyroscope values

    int32_t ACC_RAW_ACCEL_X = 0, ACC_RAW_ACCEL_Y = 0, ACC_RAW_ACCEL_Z = 0; 	// Accumulated accelerometer values
 80014b4:	2300      	movs	r3, #0
 80014b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014b8:	2300      	movs	r3, #0
 80014ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t ACC_RAW_GYRO_X = 0, ACC_RAW_GYRO_Y = 0, ACC_RAW_GYRO_Z = 0;   	// Accumulated gyroscope values
 80014c0:	2300      	movs	r3, #0
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30

    char buffer_float[5];             										// Buffer for displaying progress percentage
    uint16_t percentual;              										// Calibration progress percentage

	//Zeroing the raw inertial sensor values
	ACC_RAW_ACCEL_X = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	647b      	str	r3, [r7, #68]	@ 0x44
	ACC_RAW_ACCEL_Y = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	643b      	str	r3, [r7, #64]	@ 0x40
	ACC_RAW_ACCEL_Z = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	ACC_RAW_GYRO_X = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	@ 0x38
	ACC_RAW_GYRO_Y = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
	ACC_RAW_GYRO_Z = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30

	ssd1306_Fill(0);														//Clears the display
 80014e4:	2000      	movs	r0, #0
 80014e6:	f005 fb13 	bl	8006b10 <ssd1306_Fill>

	// Loop to collect MAX_SAMPLE raw sensor data and calculate averages
	for (uint16_t contador = 0; contador <= MAX_SAMPLE; ++contador) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80014ee:	e0bc      	b.n	800166a <calibration+0x1c2>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, DATA_ARRAY_POINTER, 1, rawData,
 80014f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	230e      	movs	r3, #14
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	223b      	movs	r2, #59	@ 0x3b
 8001504:	21d0      	movs	r1, #208	@ 0xd0
 8001506:	48c8      	ldr	r0, [pc, #800]	@ (8001828 <calibration+0x380>)
 8001508:	f002 feee 	bl	80042e8 <HAL_I2C_Mem_Read>
				14, 1000);

		// Parsing raw accelerometer and gyroscope data
		RAW_ACCEL_X = ((int16_t) rawData[0] << 8) | (rawData[1]);
 800150c:	7a3b      	ldrb	r3, [r7, #8]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7a7b      	ldrb	r3, [r7, #9]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	857b      	strh	r3, [r7, #42]	@ 0x2a
		RAW_ACCEL_Y = ((int16_t) rawData[2] << 8) | (rawData[3]);
 800151a:	7abb      	ldrb	r3, [r7, #10]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	853b      	strh	r3, [r7, #40]	@ 0x28
		RAW_ACCEL_Z = ((int16_t) rawData[4] << 8) | (rawData[5]);
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	84fb      	strh	r3, [r7, #38]	@ 0x26
		RAW_GYRO_X = ((int16_t) rawData[8] << 8) | (rawData[9]);
 8001536:	7c3b      	ldrb	r3, [r7, #16]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7c7b      	ldrb	r3, [r7, #17]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	84bb      	strh	r3, [r7, #36]	@ 0x24
		RAW_GYRO_Y = ((int16_t) rawData[10] << 8) | (rawData[11]);
 8001544:	7cbb      	ldrb	r3, [r7, #18]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7cfb      	ldrb	r3, [r7, #19]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	847b      	strh	r3, [r7, #34]	@ 0x22
		RAW_GYRO_Z = ((int16_t) rawData[12] << 8) | (rawData[13]);
 8001552:	7d3b      	ldrb	r3, [r7, #20]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7d7b      	ldrb	r3, [r7, #21]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	843b      	strh	r3, [r7, #32]

		// Accumulating sensor data
		ACC_RAW_ACCEL_X += RAW_ACCEL_X;
 8001560:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001566:	4413      	add	r3, r2
 8001568:	647b      	str	r3, [r7, #68]	@ 0x44
		ACC_RAW_ACCEL_Y += RAW_ACCEL_Y;
 800156a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800156e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001570:	4413      	add	r3, r2
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
		ACC_RAW_ACCEL_Z += RAW_ACCEL_Z;
 8001574:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800157a:	4413      	add	r3, r2
 800157c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ACC_RAW_GYRO_X += RAW_GYRO_X;
 800157e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001584:	4413      	add	r3, r2
 8001586:	63bb      	str	r3, [r7, #56]	@ 0x38
		ACC_RAW_GYRO_Y += RAW_GYRO_Y;
 8001588:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800158c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800158e:	4413      	add	r3, r2
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
		ACC_RAW_GYRO_Z += RAW_GYRO_Z;
 8001592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001598:	4413      	add	r3, r2
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30

		// Displaying calibration progress every 1%
		if (contador % 10 == 0) {
 800159c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800159e:	4ba3      	ldr	r3, [pc, #652]	@ (800182c <calibration+0x384>)
 80015a0:	fba3 1302 	umull	r1, r3, r3, r2
 80015a4:	08d9      	lsrs	r1, r3, #3
 80015a6:	460b      	mov	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d153      	bne.n	800165e <calibration+0x1b6>
			percentual = (contador * 100) / MAX_SAMPLE;
 80015b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015b8:	2264      	movs	r2, #100	@ 0x64
 80015ba:	fb03 f202 	mul.w	r2, r3, r2
 80015be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c4:	833b      	strh	r3, [r7, #24]

			ssd1306_Fill(0);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f005 faa2 	bl	8006b10 <ssd1306_Fill>
			ssd1306_SetCursor(27, 1);
 80015cc:	2101      	movs	r1, #1
 80015ce:	201b      	movs	r0, #27
 80015d0:	f005 fbe8 	bl	8006da4 <ssd1306_SetCursor>
			ssd1306_WriteString("CALIBRATION: ", Font_7x10, 1);
 80015d4:	4b96      	ldr	r3, [pc, #600]	@ (8001830 <calibration+0x388>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	4895      	ldr	r0, [pc, #596]	@ (8001834 <calibration+0x38c>)
 80015de:	f005 fbbb 	bl	8006d58 <ssd1306_WriteString>
			ssd1306_FillRectangle(1, 15, 128, 17, 1);
 80015e2:	2301      	movs	r3, #1
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2311      	movs	r3, #17
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	210f      	movs	r1, #15
 80015ec:	2001      	movs	r0, #1
 80015ee:	f005 fc94 	bl	8006f1a <ssd1306_FillRectangle>

			ssd1306_SetCursor(57, 28);
 80015f2:	211c      	movs	r1, #28
 80015f4:	2039      	movs	r0, #57	@ 0x39
 80015f6:	f005 fbd5 	bl	8006da4 <ssd1306_SetCursor>
			snprintf(buffer_float, sizeof(buffer_float), "%d\n", percentual);
 80015fa:	8b3b      	ldrh	r3, [r7, #24]
 80015fc:	4638      	mov	r0, r7
 80015fe:	4a8e      	ldr	r2, [pc, #568]	@ (8001838 <calibration+0x390>)
 8001600:	2105      	movs	r1, #5
 8001602:	f006 fc93 	bl	8007f2c <sniprintf>
			ssd1306_WriteString(buffer_float, Font_7x10, 1);
 8001606:	4b8a      	ldr	r3, [pc, #552]	@ (8001830 <calibration+0x388>)
 8001608:	4638      	mov	r0, r7
 800160a:	2201      	movs	r2, #1
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001610:	f005 fba2 	bl	8006d58 <ssd1306_WriteString>
			ssd1306_WriteString("%", Font_7x10, 1);
 8001614:	4b86      	ldr	r3, [pc, #536]	@ (8001830 <calibration+0x388>)
 8001616:	2201      	movs	r2, #1
 8001618:	9200      	str	r2, [sp, #0]
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	4887      	ldr	r0, [pc, #540]	@ (800183c <calibration+0x394>)
 800161e:	f005 fb9b 	bl	8006d58 <ssd1306_WriteString>
			ssd1306_DrawRectangle(11, 40, 117, 55, 1);
 8001622:	2301      	movs	r3, #1
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2337      	movs	r3, #55	@ 0x37
 8001628:	2275      	movs	r2, #117	@ 0x75
 800162a:	2128      	movs	r1, #40	@ 0x28
 800162c:	200b      	movs	r0, #11
 800162e:	f005 fc3d 	bl	8006eac <ssd1306_DrawRectangle>
			ssd1306_FillRectangle(11, 40,
					(11 + (percentual * (117 - 11)) / 100), 55, 1);
 8001632:	8b3b      	ldrh	r3, [r7, #24]
 8001634:	226a      	movs	r2, #106	@ 0x6a
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a81      	ldr	r2, [pc, #516]	@ (8001840 <calibration+0x398>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1152      	asrs	r2, r2, #5
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad3      	subs	r3, r2, r3
			ssd1306_FillRectangle(11, 40,
 8001646:	b2db      	uxtb	r3, r3
 8001648:	330b      	adds	r3, #11
 800164a:	b2da      	uxtb	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2337      	movs	r3, #55	@ 0x37
 8001652:	2128      	movs	r1, #40	@ 0x28
 8001654:	200b      	movs	r0, #11
 8001656:	f005 fc60 	bl	8006f1a <ssd1306_FillRectangle>
			ssd1306_UpdateScreen();
 800165a:	f005 fa71 	bl	8006b40 <ssd1306_UpdateScreen>
		}

		HAL_Delay(15);														// Small delay for sampling
 800165e:	200f      	movs	r0, #15
 8001660:	f001 fd84 	bl	800316c <HAL_Delay>
	for (uint16_t contador = 0; contador <= MAX_SAMPLE; ++contador) {
 8001664:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001666:	3301      	adds	r3, #1
 8001668:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800166a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800166c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800166e:	429a      	cmp	r2, r3
 8001670:	f67f af3e 	bls.w	80014f0 <calibration+0x48>
	}

	// Calculating average raw sensor values
	RAW_ACCEL_X = (ACC_RAW_ACCEL_X / MAX_SAMPLE);
 8001674:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001678:	fb92 f3f3 	sdiv	r3, r2, r3
 800167c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	RAW_ACCEL_Y = (ACC_RAW_ACCEL_Y / MAX_SAMPLE);
 800167e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001682:	fb92 f3f3 	sdiv	r3, r2, r3
 8001686:	853b      	strh	r3, [r7, #40]	@ 0x28
	RAW_ACCEL_Z = (ACC_RAW_ACCEL_Z / MAX_SAMPLE);
 8001688:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800168a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800168c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001690:	84fb      	strh	r3, [r7, #38]	@ 0x26
	RAW_GYRO_X = (ACC_RAW_GYRO_X / MAX_SAMPLE);
 8001692:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001696:	fb92 f3f3 	sdiv	r3, r2, r3
 800169a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	RAW_GYRO_Y = (ACC_RAW_GYRO_Y / MAX_SAMPLE);
 800169c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800169e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016a4:	847b      	strh	r3, [r7, #34]	@ 0x22
	RAW_GYRO_Z = (ACC_RAW_GYRO_Z / MAX_SAMPLE);
 80016a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ae:	843b      	strh	r3, [r7, #32]

	// Applying scaling factors and calculating offset values
	RAW_ACCEL_X = round(-(RAW_ACCEL_X * accelScalingFactor ) * 1024.0);
 80016b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016c0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800184c <calibration+0x3a4>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	eef1 7a67 	vneg.f32	s15, s15
 80016cc:	ee17 3a90 	vmov	r3, s15
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff59 	bl	8000588 <__aeabi_f2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b5a      	ldr	r3, [pc, #360]	@ (8001844 <calibration+0x39c>)
 80016dc:	f7fe ffac 	bl	8000638 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	ec43 2b17 	vmov	d7, r2, r3
 80016e8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ec:	eef0 0a67 	vmov.f32	s1, s15
 80016f0:	f00a fb30 	bl	800bd54 <round>
 80016f4:	ec53 2b10 	vmov	r2, r3, d0
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa4c 	bl	8000b98 <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	857b      	strh	r3, [r7, #42]	@ 0x2a
	RAW_ACCEL_Y = round(-(RAW_ACCEL_Y * accelScalingFactor ) * 1024.0);
 8001704:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001710:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001714:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800184c <calibration+0x3a4>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	eef1 7a67 	vneg.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff2f 	bl	8000588 <__aeabi_f2d>
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b45      	ldr	r3, [pc, #276]	@ (8001844 <calibration+0x39c>)
 8001730:	f7fe ff82 	bl	8000638 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	ec43 2b17 	vmov	d7, r2, r3
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	f00a fb06 	bl	800bd54 <round>
 8001748:	ec53 2b10 	vmov	r2, r3, d0
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa22 	bl	8000b98 <__aeabi_d2iz>
 8001754:	4603      	mov	r3, r0
 8001756:	853b      	strh	r3, [r7, #40]	@ 0x28
	RAW_ACCEL_Z = round(-(1 - (RAW_ACCEL_Z * accelScalingFactor )) * 1024.0);
 8001758:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001768:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800184c <calibration+0x3a4>
 800176c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001778:	eef1 7a67 	vneg.f32	s15, s15
 800177c:	ee17 3a90 	vmov	r3, s15
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe ff01 	bl	8000588 <__aeabi_f2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <calibration+0x39c>)
 800178c:	f7fe ff54 	bl	8000638 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	ec43 2b17 	vmov	d7, r2, r3
 8001798:	eeb0 0a47 	vmov.f32	s0, s14
 800179c:	eef0 0a67 	vmov.f32	s1, s15
 80017a0:	f00a fad8 	bl	800bd54 <round>
 80017a4:	ec53 2b10 	vmov	r2, r3, d0
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9f4 	bl	8000b98 <__aeabi_d2iz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	RAW_GYRO_X = round(-(RAW_GYRO_X * gyroScalingFactor ) * 32.768);
 80017b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001848 <calibration+0x3a0>
 80017c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800184c <calibration+0x3a4>
 80017cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d0:	eef1 7a67 	vneg.f32	s15, s15
 80017d4:	ee17 3a90 	vmov	r3, s15
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fed5 	bl	8000588 <__aeabi_f2d>
 80017de:	a310      	add	r3, pc, #64	@ (adr r3, 8001820 <calibration+0x378>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff28 	bl	8000638 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	ec43 2b17 	vmov	d7, r2, r3
 80017f0:	eeb0 0a47 	vmov.f32	s0, s14
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	f00a faac 	bl	800bd54 <round>
 80017fc:	ec53 2b10 	vmov	r2, r3, d0
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9c8 	bl	8000b98 <__aeabi_d2iz>
 8001808:	4603      	mov	r3, r0
 800180a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	RAW_GYRO_Y = round(-(RAW_GYRO_Y * gyroScalingFactor ) * 32.768);
 800180c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	e01a      	b.n	8001850 <calibration+0x3a8>
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	4040624d 	.word	0x4040624d
 8001828:	20000338 	.word	0x20000338
 800182c:	cccccccd 	.word	0xcccccccd
 8001830:	0800cea0 	.word	0x0800cea0
 8001834:	0800be7c 	.word	0x0800be7c
 8001838:	0800be8c 	.word	0x0800be8c
 800183c:	0800be90 	.word	0x0800be90
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	40900000 	.word	0x40900000
 8001848:	437a0000 	.word	0x437a0000
 800184c:	47000000 	.word	0x47000000
 8001850:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001848 <calibration+0x3a0>
 8001854:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001858:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 800184c <calibration+0x3a4>
 800185c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001860:	eef1 7a67 	vneg.f32	s15, s15
 8001864:	ee17 3a90 	vmov	r3, s15
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe8d 	bl	8000588 <__aeabi_f2d>
 800186e:	a3d0      	add	r3, pc, #832	@ (adr r3, 8001bb0 <calibration+0x708>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee0 	bl	8000638 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	ec43 2b17 	vmov	d7, r2, r3
 8001880:	eeb0 0a47 	vmov.f32	s0, s14
 8001884:	eef0 0a67 	vmov.f32	s1, s15
 8001888:	f00a fa64 	bl	800bd54 <round>
 800188c:	ec53 2b10 	vmov	r2, r3, d0
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f980 	bl	8000b98 <__aeabi_d2iz>
 8001898:	4603      	mov	r3, r0
 800189a:	847b      	strh	r3, [r7, #34]	@ 0x22
	RAW_GYRO_Z = round(-(RAW_GYRO_Z * gyroScalingFactor ) * 32.768);
 800189c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a8:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8001bb8 <calibration+0x710>
 80018ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b0:	eddf 6ac2 	vldr	s13, [pc, #776]	@ 8001bbc <calibration+0x714>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	eef1 7a67 	vneg.f32	s15, s15
 80018bc:	ee17 3a90 	vmov	r3, s15
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe61 	bl	8000588 <__aeabi_f2d>
 80018c6:	a3ba      	add	r3, pc, #744	@ (adr r3, 8001bb0 <calibration+0x708>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe feb4 	bl	8000638 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	f00a fa38 	bl	800bd54 <round>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f954 	bl	8000b98 <__aeabi_d2iz>
 80018f0:	4603      	mov	r3, r0
 80018f2:	843b      	strh	r3, [r7, #32]

	// Reading values ​​from accelerometer registers
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, XA_OFFSET_H, 1, &check1, 1, 1000);
 80018f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	2301      	movs	r3, #1
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	f107 0317 	add.w	r3, r7, #23
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	2277      	movs	r2, #119	@ 0x77
 8001908:	21d0      	movs	r1, #208	@ 0xd0
 800190a:	48ad      	ldr	r0, [pc, #692]	@ (8001bc0 <calibration+0x718>)
 800190c:	f002 fcec 	bl	80042e8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, XA_OFFSET_L, 1, &check2, 1, 1000);
 8001910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2301      	movs	r3, #1
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f107 0316 	add.w	r3, r7, #22
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	2278      	movs	r2, #120	@ 0x78
 8001924:	21d0      	movs	r1, #208	@ 0xd0
 8001926:	48a6      	ldr	r0, [pc, #664]	@ (8001bc0 <calibration+0x718>)
 8001928:	f002 fcde 	bl	80042e8 <HAL_I2C_Mem_Read>
	int16_t Cancel_XA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	7dba      	ldrb	r2, [r7, #22]
 8001932:	4313      	orrs	r3, r2
 8001934:	105a      	asrs	r2, r3, #1
			+ RAW_ACCEL_X) << 1;
 8001936:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
	int16_t Cancel_XA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 800193e:	83fb      	strh	r3, [r7, #30]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, YA_OFFSET_H, 1, &check1, 1, 1000);
 8001940:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	f107 0317 	add.w	r3, r7, #23
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	227a      	movs	r2, #122	@ 0x7a
 8001954:	21d0      	movs	r1, #208	@ 0xd0
 8001956:	489a      	ldr	r0, [pc, #616]	@ (8001bc0 <calibration+0x718>)
 8001958:	f002 fcc6 	bl	80042e8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, YA_OFFSET_L, 1, &check2, 1, 1000);
 800195c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2301      	movs	r3, #1
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f107 0316 	add.w	r3, r7, #22
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	227b      	movs	r2, #123	@ 0x7b
 8001970:	21d0      	movs	r1, #208	@ 0xd0
 8001972:	4893      	ldr	r0, [pc, #588]	@ (8001bc0 <calibration+0x718>)
 8001974:	f002 fcb8 	bl	80042e8 <HAL_I2C_Mem_Read>
	int16_t Cancel_YA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	7dba      	ldrb	r2, [r7, #22]
 800197e:	4313      	orrs	r3, r2
 8001980:	105a      	asrs	r2, r3, #1
			+ RAW_ACCEL_Y) << 1;
 8001982:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
	int16_t Cancel_YA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 800198a:	83bb      	strh	r3, [r7, #28]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZA_OFFSET_H, 1, &check1, 1, 1000);
 800198c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	2301      	movs	r3, #1
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	f107 0317 	add.w	r3, r7, #23
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	227d      	movs	r2, #125	@ 0x7d
 80019a0:	21d0      	movs	r1, #208	@ 0xd0
 80019a2:	4887      	ldr	r0, [pc, #540]	@ (8001bc0 <calibration+0x718>)
 80019a4:	f002 fca0 	bl	80042e8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZA_OFFSET_L, 1, &check2, 1, 1000);
 80019a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	f107 0316 	add.w	r3, r7, #22
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	227e      	movs	r2, #126	@ 0x7e
 80019bc:	21d0      	movs	r1, #208	@ 0xd0
 80019be:	4880      	ldr	r0, [pc, #512]	@ (8001bc0 <calibration+0x718>)
 80019c0:	f002 fc92 	bl	80042e8 <HAL_I2C_Mem_Read>
	int16_t Cancel_ZA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	7dba      	ldrb	r2, [r7, #22]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	105a      	asrs	r2, r3, #1
			+ RAW_ACCEL_Z) << 1;
 80019ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
	int16_t Cancel_ZA_Offset = (((((uint16_t) check1 << 8) | check2) >> 1)
 80019d6:	837b      	strh	r3, [r7, #26]

	//Writing offset values to accelerometer registers
	check1 = Cancel_XA_Offset >> 8;
 80019d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019dc:	121b      	asrs	r3, r3, #8
 80019de:	b21b      	sxth	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFSET_H, 1, &check1, 1, 1000);
 80019e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	f107 0317 	add.w	r3, r7, #23
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	2277      	movs	r2, #119	@ 0x77
 80019f8:	21d0      	movs	r1, #208	@ 0xd0
 80019fa:	4871      	ldr	r0, [pc, #452]	@ (8001bc0 <calibration+0x718>)
 80019fc:	f002 fb7a 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = Cancel_XA_Offset & 0xFF;
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFSET_L, 1, &check1, 1, 1000);
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f107 0317 	add.w	r3, r7, #23
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	2278      	movs	r2, #120	@ 0x78
 8001a1a:	21d0      	movs	r1, #208	@ 0xd0
 8001a1c:	4868      	ldr	r0, [pc, #416]	@ (8001bc0 <calibration+0x718>)
 8001a1e:	f002 fb69 	bl	80040f4 <HAL_I2C_Mem_Write>

	check1 = Cancel_YA_Offset >> 8;
 8001a22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a26:	121b      	asrs	r3, r3, #8
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFSET_H, 1, &check1, 1, 1000);
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 0317 	add.w	r3, r7, #23
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	227a      	movs	r2, #122	@ 0x7a
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	485e      	ldr	r0, [pc, #376]	@ (8001bc0 <calibration+0x718>)
 8001a46:	f002 fb55 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = Cancel_YA_Offset & 0xFF;
 8001a4a:	8bbb      	ldrh	r3, [r7, #28]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFSET_L, 1, &check1, 1, 1000);
 8001a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	f107 0317 	add.w	r3, r7, #23
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	227b      	movs	r2, #123	@ 0x7b
 8001a64:	21d0      	movs	r1, #208	@ 0xd0
 8001a66:	4856      	ldr	r0, [pc, #344]	@ (8001bc0 <calibration+0x718>)
 8001a68:	f002 fb44 	bl	80040f4 <HAL_I2C_Mem_Write>

	check1 = Cancel_ZA_Offset >> 8;
 8001a6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a70:	121b      	asrs	r3, r3, #8
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFSET_H, 1, &check1, 1, 1000);
 8001a78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 0317 	add.w	r3, r7, #23
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	227d      	movs	r2, #125	@ 0x7d
 8001a8c:	21d0      	movs	r1, #208	@ 0xd0
 8001a8e:	484c      	ldr	r0, [pc, #304]	@ (8001bc0 <calibration+0x718>)
 8001a90:	f002 fb30 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = Cancel_ZA_Offset & 0xFF;
 8001a94:	8b7b      	ldrh	r3, [r7, #26]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFSET_L, 1, &check1, 1, 1000);
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	f107 0317 	add.w	r3, r7, #23
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	227e      	movs	r2, #126	@ 0x7e
 8001aae:	21d0      	movs	r1, #208	@ 0xd0
 8001ab0:	4843      	ldr	r0, [pc, #268]	@ (8001bc0 <calibration+0x718>)
 8001ab2:	f002 fb1f 	bl	80040f4 <HAL_I2C_Mem_Write>

	//Writing offset values to accelerometer gyroscope
	check1 = RAW_GYRO_X >> 8;
 8001ab6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001aba:	121b      	asrs	r3, r3, #8
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFSET_H, 1, &check1, 1, 1000);
 8001ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	f107 0317 	add.w	r3, r7, #23
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	21d0      	movs	r1, #208	@ 0xd0
 8001ad8:	4839      	ldr	r0, [pc, #228]	@ (8001bc0 <calibration+0x718>)
 8001ada:	f002 fb0b 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = RAW_GYRO_X & 0xFF;
 8001ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFSET_L, 1, &check1, 1, 1000);
 8001ae4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	f107 0317 	add.w	r3, r7, #23
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	2214      	movs	r2, #20
 8001af8:	21d0      	movs	r1, #208	@ 0xd0
 8001afa:	4831      	ldr	r0, [pc, #196]	@ (8001bc0 <calibration+0x718>)
 8001afc:	f002 fafa 	bl	80040f4 <HAL_I2C_Mem_Write>

	check1 = RAW_GYRO_Y >> 8;
 8001b00:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001b04:	121b      	asrs	r3, r3, #8
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFSET_H, 1, &check1, 1, 1000);
 8001b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 0317 	add.w	r3, r7, #23
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2215      	movs	r2, #21
 8001b20:	21d0      	movs	r1, #208	@ 0xd0
 8001b22:	4827      	ldr	r0, [pc, #156]	@ (8001bc0 <calibration+0x718>)
 8001b24:	f002 fae6 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = RAW_GYRO_Y & 0xFF;
 8001b28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFSET_L, 1, &check1, 1, 1000);
 8001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	f107 0317 	add.w	r3, r7, #23
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	2216      	movs	r2, #22
 8001b42:	21d0      	movs	r1, #208	@ 0xd0
 8001b44:	481e      	ldr	r0, [pc, #120]	@ (8001bc0 <calibration+0x718>)
 8001b46:	f002 fad5 	bl	80040f4 <HAL_I2C_Mem_Write>

	check1 = RAW_GYRO_Z >> 8;
 8001b4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b4e:	121b      	asrs	r3, r3, #8
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFSET_H, 1, &check1, 1, 1000);
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	f107 0317 	add.w	r3, r7, #23
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2301      	movs	r3, #1
 8001b68:	2217      	movs	r2, #23
 8001b6a:	21d0      	movs	r1, #208	@ 0xd0
 8001b6c:	4814      	ldr	r0, [pc, #80]	@ (8001bc0 <calibration+0x718>)
 8001b6e:	f002 fac1 	bl	80040f4 <HAL_I2C_Mem_Write>
	check1 = RAW_GYRO_Z & 0xFF;
 8001b72:	8c3b      	ldrh	r3, [r7, #32]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFSET_L, 1, &check1, 1, 1000);
 8001b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	f107 0317 	add.w	r3, r7, #23
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2218      	movs	r2, #24
 8001b8c:	21d0      	movs	r1, #208	@ 0xd0
 8001b8e:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <calibration+0x718>)
 8001b90:	f002 fab0 	bl	80040f4 <HAL_I2C_Mem_Write>

	current_screen = !current_screen;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <calibration+0x71c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <calibration+0x71c>)
 8001ba6:	601a      	str	r2, [r3, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	3748      	adds	r7, #72	@ 0x48
 8001bac:	e00c      	b.n	8001bc8 <calibration+0x720>
 8001bae:	bf00      	nop
 8001bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bb4:	4040624d 	.word	0x4040624d
 8001bb8:	437a0000 	.word	0x437a0000
 8001bbc:	47000000 	.word	0x47000000
 8001bc0:	20000338 	.word	0x20000338
 8001bc4:	20000280 	.word	0x20000280
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <kalman_1d>:
 * @note The function uses a constant Kalman gain for simplicity, which is set to 0.1.
 *       The state is predicted using the input, and then corrected using the measurement.
 *       The updated state and uncertainty are stored in the Kalman1DOutput array.
 */
void kalman_1d(float *KalmanState, float *KalmanUncertainty, float *KalmanInput,
		float *KalmanMeasurement) {
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]

    // Predict step: Update state estimate using input
    *KalmanState = *KalmanState + 0.004 * *KalmanInput;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcd0 	bl	8000588 <__aeabi_f2d>
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fcc9 	bl	8000588 <__aeabi_f2d>
 8001bf6:	a339      	add	r3, pc, #228	@ (adr r3, 8001cdc <kalman_1d+0x10c>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd1c 	bl	8000638 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fb60 	bl	80002cc <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7ff f808 	bl	8000c28 <__aeabi_d2f>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]

    // Predict step: Update uncertainty with process noise
    *KalmanUncertainty = *KalmanUncertainty + 0.004 * 0.004 * 4.0 * 4.0;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fcb0 	bl	8000588 <__aeabi_f2d>
 8001c28:	a32e      	add	r3, pc, #184	@ (adr r3, 8001ce4 <kalman_1d+0x114>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fb4d 	bl	80002cc <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe fff5 	bl	8000c28 <__aeabi_d2f>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	601a      	str	r2, [r3, #0]

    // Compute the Kalman gain (constant for simplicity in this implementation)
    float KalmanGain = 0.1;
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <kalman_1d+0x100>)
 8001c46:	617b      	str	r3, [r7, #20]

    // Update step: Correct the state estimate using measurement
    *KalmanState = *KalmanState + KalmanGain * (*KalmanMeasurement - *KalmanState);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	edd3 6a00 	vldr	s13, [r3]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	edc3 7a00 	vstr	s15, [r3]

    // Update step: Correct the uncertainty
    *KalmanUncertainty = (1.0 - KalmanGain) * *KalmanUncertainty;
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7fe fc89 	bl	8000588 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	4915      	ldr	r1, [pc, #84]	@ (8001cd4 <kalman_1d+0x104>)
 8001c80:	f7fe fb22 	bl	80002c8 <__aeabi_dsub>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc79 	bl	8000588 <__aeabi_f2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fccb 	bl	8000638 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ffbd 	bl	8000c28 <__aeabi_d2f>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	601a      	str	r2, [r3, #0]

    // Store the updated state and uncertainty in the output array
    Kalman1DOutput[0] = *KalmanState;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <kalman_1d+0x108>)
 8001cba:	6013      	str	r3, [r2, #0]
    Kalman1DOutput[1] = *KalmanUncertainty;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <kalman_1d+0x108>)
 8001cc2:	6053      	str	r3, [r2, #4]
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	3dcccccd 	.word	0x3dcccccd
 8001cd4:	3ff00000 	.word	0x3ff00000
 8001cd8:	200002cc 	.word	0x200002cc
 8001cdc:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ce0:	3f70624d 	.word	0x3f70624d
 8001ce4:	a0b5ed8d 	.word	0xa0b5ed8d
 8001ce8:	3f30c6f7 	.word	0x3f30c6f7
 8001cec:	00000000 	.word	0x00000000

08001cf0 <MPU6050_Read_Measures>:
 *
 *
 * @note This function assumes the MPU6050 has already been initialized and
 *       the I2C communication is properly set up.
 */
void MPU6050_Read_Measures(void) {
 8001cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cf4:	b088      	sub	sp, #32
 8001cf6:	af04      	add	r7, sp, #16

	uint8_t check;

	// Check device ID by reading WHO_AM_I register (0x75)
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	f107 030f 	add.w	r3, r7, #15
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2275      	movs	r2, #117	@ 0x75
 8001d0c:	21d0      	movs	r1, #208	@ 0xd0
 8001d0e:	48b0      	ldr	r0, [pc, #704]	@ (8001fd0 <MPU6050_Read_Measures+0x2e0>)
 8001d10:	f002 faea 	bl	80042e8 <HAL_I2C_Mem_Read>

	// Verify MPU6050 device ID (0x68)
	if (check == 0x68) {
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b68      	cmp	r3, #104	@ 0x68
 8001d18:	f040 814d 	bne.w	8001fb6 <MPU6050_Read_Measures+0x2c6>
		uint8_t Rec_Data[14];

		// Read 14 bytes starting from ACCEL_XOUT_H (0x3B)
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 14, 1000);
 8001d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	230e      	movs	r3, #14
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	463b      	mov	r3, r7
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	223b      	movs	r2, #59	@ 0x3b
 8001d2e:	21d0      	movs	r1, #208	@ 0xd0
 8001d30:	48a7      	ldr	r0, [pc, #668]	@ (8001fd0 <MPU6050_Read_Measures+0x2e0>)
 8001d32:	f002 fad9 	bl	80042e8 <HAL_I2C_Mem_Read>

		// Extract raw accelerometer data
		Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001d36:	783b      	ldrb	r3, [r7, #0]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4ba3      	ldr	r3, [pc, #652]	@ (8001fd4 <MPU6050_Read_Measures+0x2e4>)
 8001d46:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001d48:	78bb      	ldrb	r3, [r7, #2]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4ba0      	ldr	r3, [pc, #640]	@ (8001fd8 <MPU6050_Read_Measures+0x2e8>)
 8001d58:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001d5a:	793b      	ldrb	r3, [r7, #4]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	797b      	ldrb	r3, [r7, #5]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	4b9c      	ldr	r3, [pc, #624]	@ (8001fdc <MPU6050_Read_Measures+0x2ec>)
 8001d6a:	801a      	strh	r2, [r3, #0]

		// Extract raw temperature data
		Temp_RAW = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	4b99      	ldr	r3, [pc, #612]	@ (8001fe0 <MPU6050_Read_Measures+0x2f0>)
 8001d7c:	801a      	strh	r2, [r3, #0]

		// Extract raw gyroscope data
		Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	4b95      	ldr	r3, [pc, #596]	@ (8001fe4 <MPU6050_Read_Measures+0x2f4>)
 8001d8e:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001d90:	7abb      	ldrb	r3, [r7, #10]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <MPU6050_Read_Measures+0x2f8>)
 8001da0:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001da2:	7b3b      	ldrb	r3, [r7, #12]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b8e      	ldr	r3, [pc, #568]	@ (8001fec <MPU6050_Read_Measures+0x2fc>)
 8001db2:	801a      	strh	r2, [r3, #0]

		 /*** Convert raw values to physical units ***/

		// Accelerometer: Convert to g (FS_SEL = 0, divisor = 16384)
		Ax = (float) Accel_X_RAW / 16384.0;
 8001db4:	4b87      	ldr	r3, [pc, #540]	@ (8001fd4 <MPU6050_Read_Measures+0x2e4>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc2:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8001ff0 <MPU6050_Read_Measures+0x300>
 8001dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dca:	4b8a      	ldr	r3, [pc, #552]	@ (8001ff4 <MPU6050_Read_Measures+0x304>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
		Ay = (float) Accel_Y_RAW / 16384.0;
 8001dd0:	4b81      	ldr	r3, [pc, #516]	@ (8001fd8 <MPU6050_Read_Measures+0x2e8>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dde:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8001ff0 <MPU6050_Read_Measures+0x300>
 8001de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de6:	4b84      	ldr	r3, [pc, #528]	@ (8001ff8 <MPU6050_Read_Measures+0x308>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]
		Az = (float) Accel_Z_RAW / 16384.0;
 8001dec:	4b7b      	ldr	r3, [pc, #492]	@ (8001fdc <MPU6050_Read_Measures+0x2ec>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfa:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001ff0 <MPU6050_Read_Measures+0x300>
 8001dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e02:	4b7e      	ldr	r3, [pc, #504]	@ (8001ffc <MPU6050_Read_Measures+0x30c>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]

		// Gyroscope: Convert to °/s (Full-scale = ±250°/s, divisor = 131)
		RateRoll = (float) Gyro_X_RAW / 131.0;
 8001e08:	4b76      	ldr	r3, [pc, #472]	@ (8001fe4 <MPU6050_Read_Measures+0x2f4>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e16:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002000 <MPU6050_Read_Measures+0x310>
 8001e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1e:	4b79      	ldr	r3, [pc, #484]	@ (8002004 <MPU6050_Read_Measures+0x314>)
 8001e20:	edc3 7a00 	vstr	s15, [r3]
		RatePitch = (float) Gyro_Y_RAW / 131.0;
 8001e24:	4b70      	ldr	r3, [pc, #448]	@ (8001fe8 <MPU6050_Read_Measures+0x2f8>)
 8001e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e32:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002000 <MPU6050_Read_Measures+0x310>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	4b73      	ldr	r3, [pc, #460]	@ (8002008 <MPU6050_Read_Measures+0x318>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
		RateYaw = (float) Gyro_Z_RAW / 131.0;
 8001e40:	4b6a      	ldr	r3, [pc, #424]	@ (8001fec <MPU6050_Read_Measures+0x2fc>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8002000 <MPU6050_Read_Measures+0x310>
 8001e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e56:	4b6d      	ldr	r3, [pc, #436]	@ (800200c <MPU6050_Read_Measures+0x31c>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]

		// Temperature: Convert to °C (according to datasheet formula)
		temp = ((float) Temp_RAW) / 333.87 + 21.0;
 8001e5c:	4b60      	ldr	r3, [pc, #384]	@ (8001fe0 <MPU6050_Read_Measures+0x2f0>)
 8001e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	ee17 0a90 	vmov	r0, s15
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	a353      	add	r3, pc, #332	@ (adr r3, 8001fc0 <MPU6050_Read_Measures+0x2d0>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fd08 	bl	800088c <__aeabi_ddiv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <MPU6050_Read_Measures+0x320>)
 8001e8a:	f7fe fa1f 	bl	80002cc <__adddf3>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fec7 	bl	8000c28 <__aeabi_d2f>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002014 <MPU6050_Read_Measures+0x324>)
 8001e9e:	6013      	str	r3, [r2, #0]

		// Roll angle (degrees)
		AngleRoll = atan(Ay / sqrt(Ax * Ax + Az * Az)) * 1 / (3.142 / 180.0);
 8001ea0:	4b55      	ldr	r3, [pc, #340]	@ (8001ff8 <MPU6050_Read_Measures+0x308>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb6f 	bl	8000588 <__aeabi_f2d>
 8001eaa:	4680      	mov	r8, r0
 8001eac:	4689      	mov	r9, r1
 8001eae:	4b51      	ldr	r3, [pc, #324]	@ (8001ff4 <MPU6050_Read_Measures+0x304>)
 8001eb0:	ed93 7a00 	vldr	s14, [r3]
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <MPU6050_Read_Measures+0x304>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8001ffc <MPU6050_Read_Measures+0x30c>)
 8001ec0:	edd3 6a00 	vldr	s13, [r3]
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <MPU6050_Read_Measures+0x30c>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb57 	bl	8000588 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	ec43 2b10 	vmov	d0, r2, r3
 8001ee2:	f009 fc8f 	bl	800b804 <sqrt>
 8001ee6:	ec53 2b10 	vmov	r2, r3, d0
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe fccd 	bl	800088c <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	ec43 2b17 	vmov	d7, r2, r3
 8001efa:	eeb0 0a47 	vmov.f32	s0, s14
 8001efe:	eef0 0a67 	vmov.f32	s1, s15
 8001f02:	f009 fcad 	bl	800b860 <atan>
 8001f06:	ec51 0b10 	vmov	r0, r1, d0
 8001f0a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001fc8 <MPU6050_Read_Measures+0x2d8>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fcbc 	bl	800088c <__aeabi_ddiv>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe84 	bl	8000c28 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a3d      	ldr	r2, [pc, #244]	@ (8002018 <MPU6050_Read_Measures+0x328>)
 8001f24:	6013      	str	r3, [r2, #0]

		// Pitch angle (degrees)
		AnglePitch = -atan(Ax / sqrt(Ay * Ay + Az * Az)) * 1 / (3.142 / 180.0);
 8001f26:	4b33      	ldr	r3, [pc, #204]	@ (8001ff4 <MPU6050_Read_Measures+0x304>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb2c 	bl	8000588 <__aeabi_f2d>
 8001f30:	4680      	mov	r8, r0
 8001f32:	4689      	mov	r9, r1
 8001f34:	4b30      	ldr	r3, [pc, #192]	@ (8001ff8 <MPU6050_Read_Measures+0x308>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <MPU6050_Read_Measures+0x308>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <MPU6050_Read_Measures+0x30c>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ffc <MPU6050_Read_Measures+0x30c>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	ee17 0a90 	vmov	r0, s15
 8001f5c:	f7fe fb14 	bl	8000588 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	ec43 2b10 	vmov	d0, r2, r3
 8001f68:	f009 fc4c 	bl	800b804 <sqrt>
 8001f6c:	ec53 2b10 	vmov	r2, r3, d0
 8001f70:	4640      	mov	r0, r8
 8001f72:	4649      	mov	r1, r9
 8001f74:	f7fe fc8a 	bl	800088c <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	ec43 2b17 	vmov	d7, r2, r3
 8001f80:	eeb0 0a47 	vmov.f32	s0, s14
 8001f84:	eef0 0a67 	vmov.f32	s1, s15
 8001f88:	f009 fc6a 	bl	800b860 <atan>
 8001f8c:	ec53 2b10 	vmov	r2, r3, d0
 8001f90:	4614      	mov	r4, r2
 8001f92:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f96:	a30c      	add	r3, pc, #48	@ (adr r3, 8001fc8 <MPU6050_Read_Measures+0x2d8>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe fc74 	bl	800088c <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fe3c 	bl	8000c28 <__aeabi_d2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <MPU6050_Read_Measures+0x32c>)
 8001fb4:	6013      	str	r3, [r2, #0]
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fc0:	851eb852 	.word	0x851eb852
 8001fc4:	4074ddeb 	.word	0x4074ddeb
 8001fc8:	80fa7e3f 	.word	0x80fa7e3f
 8001fcc:	3f91dfde 	.word	0x3f91dfde
 8001fd0:	20000338 	.word	0x20000338
 8001fd4:	20000290 	.word	0x20000290
 8001fd8:	20000292 	.word	0x20000292
 8001fdc:	20000294 	.word	0x20000294
 8001fe0:	2000029c 	.word	0x2000029c
 8001fe4:	20000296 	.word	0x20000296
 8001fe8:	20000298 	.word	0x20000298
 8001fec:	2000029a 	.word	0x2000029a
 8001ff0:	46800000 	.word	0x46800000
 8001ff4:	200002a0 	.word	0x200002a0
 8001ff8:	200002a4 	.word	0x200002a4
 8001ffc:	200002a8 	.word	0x200002a8
 8002000:	43030000 	.word	0x43030000
 8002004:	200002b0 	.word	0x200002b0
 8002008:	200002b4 	.word	0x200002b4
 800200c:	200002b8 	.word	0x200002b8
 8002010:	40350000 	.word	0x40350000
 8002014:	200002ac 	.word	0x200002ac
 8002018:	200002bc 	.word	0x200002bc
 800201c:	200002c0 	.word	0x200002c0

08002020 <print_kalman>:
 *   - `ssd1306_WriteString`: Writes a string at the current cursor position.
 *   - `ssd1306_FillRectangle`: Fills a rectangular area with a specified color.
 *   - `ssd1306_DrawRectangle`: Draws a rectangle with the specified coordinates.
 *
 */
void print_kalman(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8

	// Update Roll angle using Kalman filter
	kalman_1d(&KalmanAngleRoll, &KalmanUncertaintyAngleRoll, &RateRoll,
 8002026:	4b3c      	ldr	r3, [pc, #240]	@ (8002118 <print_kalman+0xf8>)
 8002028:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <print_kalman+0xfc>)
 800202a:	493d      	ldr	r1, [pc, #244]	@ (8002120 <print_kalman+0x100>)
 800202c:	483d      	ldr	r0, [pc, #244]	@ (8002124 <print_kalman+0x104>)
 800202e:	f7ff fdcf 	bl	8001bd0 <kalman_1d>
			&AngleRoll);
	KalmanAngleRoll = Kalman1DOutput[0];
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <print_kalman+0x108>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <print_kalman+0x104>)
 8002038:	6013      	str	r3, [r2, #0]
	KalmanUncertaintyAngleRoll = Kalman1DOutput[1];
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <print_kalman+0x108>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a38      	ldr	r2, [pc, #224]	@ (8002120 <print_kalman+0x100>)
 8002040:	6013      	str	r3, [r2, #0]

	// Update Pitch angle using Kalman filter
	kalman_1d(&KalmanAnglePitch, &KalmanUncertaintyAnglePitch, &RatePitch,
 8002042:	4b3a      	ldr	r3, [pc, #232]	@ (800212c <print_kalman+0x10c>)
 8002044:	4a3a      	ldr	r2, [pc, #232]	@ (8002130 <print_kalman+0x110>)
 8002046:	493b      	ldr	r1, [pc, #236]	@ (8002134 <print_kalman+0x114>)
 8002048:	483b      	ldr	r0, [pc, #236]	@ (8002138 <print_kalman+0x118>)
 800204a:	f7ff fdc1 	bl	8001bd0 <kalman_1d>
			&AnglePitch);
	KalmanAnglePitch = Kalman1DOutput[0];
 800204e:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <print_kalman+0x108>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a39      	ldr	r2, [pc, #228]	@ (8002138 <print_kalman+0x118>)
 8002054:	6013      	str	r3, [r2, #0]
	KalmanUncertaintyAnglePitch = Kalman1DOutput[1];
 8002056:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <print_kalman+0x108>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a36      	ldr	r2, [pc, #216]	@ (8002134 <print_kalman+0x114>)
 800205c:	6013      	str	r3, [r2, #0]

	char buffer_float[7]; 									// Buffer to hold formatted string values

	// --------------------------- Display Setup ---------------------------
	ssd1306_Fill(0); 										// Clear the display buffer
 800205e:	2000      	movs	r0, #0
 8002060:	f004 fd56 	bl	8006b10 <ssd1306_Fill>
	ssd1306_SetCursor(14, 1);								// Set cursor for title
 8002064:	2101      	movs	r1, #1
 8002066:	200e      	movs	r0, #14
 8002068:	f004 fe9c 	bl	8006da4 <ssd1306_SetCursor>
	ssd1306_WriteString("KALMAN FILTER: ", Font_7x10, 1);	// Write title
 800206c:	4b33      	ldr	r3, [pc, #204]	@ (800213c <print_kalman+0x11c>)
 800206e:	2201      	movs	r2, #1
 8002070:	9200      	str	r2, [sp, #0]
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	4832      	ldr	r0, [pc, #200]	@ (8002140 <print_kalman+0x120>)
 8002076:	f004 fe6f 	bl	8006d58 <ssd1306_WriteString>

	// Draw horizontal bar under the title
	ssd1306_FillRectangle(1, 15, 128, 16, 1);
 800207a:	2301      	movs	r3, #1
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2310      	movs	r3, #16
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	210f      	movs	r1, #15
 8002084:	2001      	movs	r0, #1
 8002086:	f004 ff48 	bl	8006f1a <ssd1306_FillRectangle>

	//Draw the Container that haves the values
	ssd1306_DrawRectangle(1, 20, 127, 63, 1);
 800208a:	2301      	movs	r3, #1
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	233f      	movs	r3, #63	@ 0x3f
 8002090:	227f      	movs	r2, #127	@ 0x7f
 8002092:	2114      	movs	r1, #20
 8002094:	2001      	movs	r0, #1
 8002096:	f004 ff09 	bl	8006eac <ssd1306_DrawRectangle>

	// Display Roll Value
	ssd1306_SetCursor(7, 25); 								// Position cursor for Roll value
 800209a:	2119      	movs	r1, #25
 800209c:	2007      	movs	r0, #7
 800209e:	f004 fe81 	bl	8006da4 <ssd1306_SetCursor>
	ssd1306_WriteString("ROLL: ", Font_6x8, 1);
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <print_kalman+0x124>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020aa:	4827      	ldr	r0, [pc, #156]	@ (8002148 <print_kalman+0x128>)
 80020ac:	f004 fe54 	bl	8006d58 <ssd1306_WriteString>
	sprintf(buffer_float, "%.1f", KalmanAngleRoll);
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <print_kalman+0x104>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fa67 	bl	8000588 <__aeabi_f2d>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4638      	mov	r0, r7
 80020c0:	4922      	ldr	r1, [pc, #136]	@ (800214c <print_kalman+0x12c>)
 80020c2:	f005 ff67 	bl	8007f94 <siprintf>
	ssd1306_WriteString(buffer_float, Font_7x10, 1);
 80020c6:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <print_kalman+0x11c>)
 80020c8:	4638      	mov	r0, r7
 80020ca:	2201      	movs	r2, #1
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d0:	f004 fe42 	bl	8006d58 <ssd1306_WriteString>

	// Display Pitch Value
	ssd1306_SetCursor(7, 39); 								// Position cursor for Pitch value
 80020d4:	2127      	movs	r1, #39	@ 0x27
 80020d6:	2007      	movs	r0, #7
 80020d8:	f004 fe64 	bl	8006da4 <ssd1306_SetCursor>
	ssd1306_WriteString("PITCH: ", Font_6x8, 1);
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <print_kalman+0x124>)
 80020de:	2201      	movs	r2, #1
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e4:	481a      	ldr	r0, [pc, #104]	@ (8002150 <print_kalman+0x130>)
 80020e6:	f004 fe37 	bl	8006d58 <ssd1306_WriteString>
	sprintf(buffer_float, "%.1f", KalmanAnglePitch);
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <print_kalman+0x118>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa4a 	bl	8000588 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4638      	mov	r0, r7
 80020fa:	4914      	ldr	r1, [pc, #80]	@ (800214c <print_kalman+0x12c>)
 80020fc:	f005 ff4a 	bl	8007f94 <siprintf>
	ssd1306_WriteString(buffer_float, Font_7x10, 1);
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <print_kalman+0x11c>)
 8002102:	4638      	mov	r0, r7
 8002104:	2201      	movs	r2, #1
 8002106:	9200      	str	r2, [sp, #0]
 8002108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210a:	f004 fe25 	bl	8006d58 <ssd1306_WriteString>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002bc 	.word	0x200002bc
 800211c:	200002b0 	.word	0x200002b0
 8002120:	20000060 	.word	0x20000060
 8002124:	200002c4 	.word	0x200002c4
 8002128:	200002cc 	.word	0x200002cc
 800212c:	200002c0 	.word	0x200002c0
 8002130:	200002b4 	.word	0x200002b4
 8002134:	20000064 	.word	0x20000064
 8002138:	200002c8 	.word	0x200002c8
 800213c:	0800cea0 	.word	0x0800cea0
 8002140:	0800be94 	.word	0x0800be94
 8002144:	0800ce94 	.word	0x0800ce94
 8002148:	0800bea4 	.word	0x0800bea4
 800214c:	0800beac 	.word	0x0800beac
 8002150:	0800beb4 	.word	0x0800beb4
 8002154:	00000000 	.word	0x00000000

08002158 <ultrassonico>:
 * - `HAL_TIM_GET_COUNTER()` and `__HAL_TIM_SET_COUNTER()` for reading and resetting the timer.
 * - `HAL_GPIO_ReadPin()` and `HAL_GPIO_WritePin()` to control and read the GPIO pins.
 * - `HAL_GetTick()` for tracking time to avoid infinite loops.
 *
 */
void ultrassonico(void) {
 8002158:	b598      	push	{r3, r4, r7, lr}
 800215a:	af00      	add	r7, sp, #0

	// Trigger the ultrasonic sensor by sending a pulse
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); 	// Set TRIG pin HIGH
 800215c:	2201      	movs	r2, #1
 800215e:	2140      	movs	r1, #64	@ 0x40
 8002160:	4837      	ldr	r0, [pc, #220]	@ (8002240 <ultrassonico+0xe8>)
 8002162:	f001 fe69 	bl	8003e38 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2, 0);						// Reset timer counter
 8002166:	4b37      	ldr	r3, [pc, #220]	@ (8002244 <ultrassonico+0xec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < 10)
 800216e:	bf00      	nop
 8002170:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <ultrassonico+0xec>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2b09      	cmp	r3, #9
 8002178:	d9fa      	bls.n	8002170 <ultrassonico+0x18>
		;  													// Wait for 10 microseconds
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // Set TRIG pin LOW
 800217a:	2200      	movs	r2, #0
 800217c:	2140      	movs	r1, #64	@ 0x40
 800217e:	4830      	ldr	r0, [pc, #192]	@ (8002240 <ultrassonico+0xe8>)
 8002180:	f001 fe5a 	bl	8003e38 <HAL_GPIO_WritePin>

	// Record the time when the echo pin goes high
	pMillis = HAL_GetTick(); 								// Store current time for timeout check
 8002184:	f000 ffe6 	bl	8003154 <HAL_GetTick>
 8002188:	4603      	mov	r3, r0
 800218a:	4a2f      	ldr	r2, [pc, #188]	@ (8002248 <ultrassonico+0xf0>)
 800218c:	6013      	str	r3, [r2, #0]
	// Wait for echo pin to go HIGH
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 800218e:	bf00      	nop
 8002190:	2180      	movs	r1, #128	@ 0x80
 8002192:	482b      	ldr	r0, [pc, #172]	@ (8002240 <ultrassonico+0xe8>)
 8002194:	f001 fe38 	bl	8003e08 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
			&& pMillis + 10 > HAL_GetTick())
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <ultrassonico+0x58>
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <ultrassonico+0xf0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f103 040a 	add.w	r4, r3, #10
 80021a6:	f000 ffd5 	bl	8003154 <HAL_GetTick>
 80021aa:	4603      	mov	r3, r0
 80021ac:	429c      	cmp	r4, r3
 80021ae:	d8ef      	bhi.n	8002190 <ultrassonico+0x38>
		;

	// Capture timer value when echo pin goes HIGH
	Value1 = __HAL_TIM_GET_COUNTER(&htim2);
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <ultrassonico+0xec>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <ultrassonico+0xf4>)
 80021b8:	6013      	str	r3, [r2, #0]

	// Wait for the echo pin to go low
	pMillis = HAL_GetTick(); 								// Store current time for timeout check
 80021ba:	f000 ffcb 	bl	8003154 <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a21      	ldr	r2, [pc, #132]	@ (8002248 <ultrassonico+0xf0>)
 80021c2:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 80021c4:	bf00      	nop
 80021c6:	2180      	movs	r1, #128	@ 0x80
 80021c8:	481d      	ldr	r0, [pc, #116]	@ (8002240 <ultrassonico+0xe8>)
 80021ca:	f001 fe1d 	bl	8003e08 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
			&& pMillis + 50 > HAL_GetTick())
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <ultrassonico+0x8e>
 80021d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <ultrassonico+0xf0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80021dc:	f000 ffba 	bl	8003154 <HAL_GetTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	429c      	cmp	r4, r3
 80021e4:	d8ef      	bhi.n	80021c6 <ultrassonico+0x6e>
		; 													// Wait for echo pin to go LOW

	// Capture timer value when echo pin goes LOW
	Value2 = __HAL_TIM_GET_COUNTER(&htim2);
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <ultrassonico+0xec>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	4a18      	ldr	r2, [pc, #96]	@ (8002250 <ultrassonico+0xf8>)
 80021ee:	6013      	str	r3, [r2, #0]

	// Calculate distance based on the time difference between Value1 and Value2
	Distance = (Value2 - Value1) * 0.034 / 2;				// Distance in centimeters
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <ultrassonico+0xf8>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b15      	ldr	r3, [pc, #84]	@ (800224c <ultrassonico+0xf4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9a2 	bl	8000544 <__aeabi_ui2d>
 8002200:	a30d      	add	r3, pc, #52	@ (adr r3, 8002238 <ultrassonico+0xe0>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe fa17 	bl	8000638 <__aeabi_dmul>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800221a:	f7fe fb37 	bl	800088c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcdf 	bl	8000be8 <__aeabi_d2uiz>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <ultrassonico+0xfc>)
 8002230:	801a      	strh	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	bd98      	pop	{r3, r4, r7, pc}
 8002236:	bf00      	nop
 8002238:	b020c49c 	.word	0xb020c49c
 800223c:	3fa16872 	.word	0x3fa16872
 8002240:	40020000 	.word	0x40020000
 8002244:	2000038c 	.word	0x2000038c
 8002248:	200002dc 	.word	0x200002dc
 800224c:	200002e0 	.word	0x200002e0
 8002250:	200002e4 	.word	0x200002e4
 8002254:	200002e8 	.word	0x200002e8

08002258 <print_ultrassonico>:
 *   - `ssd1306_WriteString`: Writes a string at the current cursor position.
 *   - `ssd1306_FillRectangle`: Fills a rectangular area with a specified color.
 *   - `ssd1306_DrawRectangle`: Draws a rectangle with the specified coordinates.
 *
 */
void print_ultrassonico(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8

	char buffer_float[7];							// Buffer to store formatted strings for display output

	// --------------------------- Configuration Stage ---------------------------
	while (intermediary_screen) {
 800225e:	e060      	b.n	8002322 <print_ultrassonico+0xca>
		ssd1306_Fill(0); 							// Clear the display buffer
 8002260:	2000      	movs	r0, #0
 8002262:	f004 fc55 	bl	8006b10 <ssd1306_Fill>
		ssd1306_SetCursor(27, 1);
 8002266:	2101      	movs	r1, #1
 8002268:	201b      	movs	r0, #27
 800226a:	f004 fd9b 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("ULTRASONIC: ", Font_7x10, 1);
 800226e:	4ba7      	ldr	r3, [pc, #668]	@ (800250c <print_ultrassonico+0x2b4>)
 8002270:	2201      	movs	r2, #1
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002276:	48a6      	ldr	r0, [pc, #664]	@ (8002510 <print_ultrassonico+0x2b8>)
 8002278:	f004 fd6e 	bl	8006d58 <ssd1306_WriteString>
		ssd1306_FillRectangle(1, 15, 128, 16, 1);	// Draw header rectangle
 800227c:	2301      	movs	r3, #1
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2310      	movs	r3, #16
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	210f      	movs	r1, #15
 8002286:	2001      	movs	r0, #1
 8002288:	f004 fe47 	bl	8006f1a <ssd1306_FillRectangle>
		ssd1306_DrawRectangle(1, 20, 127, 63, 1);	// Draw main display rectangle
 800228c:	2301      	movs	r3, #1
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	233f      	movs	r3, #63	@ 0x3f
 8002292:	227f      	movs	r2, #127	@ 0x7f
 8002294:	2114      	movs	r1, #20
 8002296:	2001      	movs	r0, #1
 8002298:	f004 fe08 	bl	8006eac <ssd1306_DrawRectangle>

		// Read potentiometer value using ADC
		HAL_ADC_Start(&hadc1);
 800229c:	489d      	ldr	r0, [pc, #628]	@ (8002514 <print_ultrassonico+0x2bc>)
 800229e:	f000 ffcd 	bl	800323c <HAL_ADC_Start>
		uint16_t raw_value = HAL_ADC_GetValue(&hadc1);
 80022a2:	489c      	ldr	r0, [pc, #624]	@ (8002514 <print_ultrassonico+0x2bc>)
 80022a4:	f001 f8cf 	bl	8003446 <HAL_ADC_GetValue>
 80022a8:	4603      	mov	r3, r0
 80022aa:	81bb      	strh	r3, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 80022ac:	4899      	ldr	r0, [pc, #612]	@ (8002514 <print_ultrassonico+0x2bc>)
 80022ae:	f001 f897 	bl	80033e0 <HAL_ADC_Stop>

		// Apply low-pass filter to smooth ADC readings
		uint16_t filtered_value = low_pass_filter(raw_value);
 80022b2:	89bb      	ldrh	r3, [r7, #12]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe feb5 	bl	8001024 <low_pass_filter>
 80022ba:	4603      	mov	r3, r0
 80022bc:	817b      	strh	r3, [r7, #10]

		// Map potentiometer value to range 5–200 cm
		Limit_Ultrasonic = 5 + ((filtered_value * 195) / 4095);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	4a95      	ldr	r2, [pc, #596]	@ (8002518 <print_ultrassonico+0x2c0>)
 80022c2:	fb82 1203 	smull	r1, r2, r2, r3
 80022c6:	1092      	asrs	r2, r2, #2
 80022c8:	17db      	asrs	r3, r3, #31
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	3305      	adds	r3, #5
 80022ce:	4a93      	ldr	r2, [pc, #588]	@ (800251c <print_ultrassonico+0x2c4>)
 80022d0:	6013      	str	r3, [r2, #0]

		// Display the threshold value
		ssd1306_SetCursor(9, 35);
 80022d2:	2123      	movs	r1, #35	@ 0x23
 80022d4:	2009      	movs	r0, #9
 80022d6:	f004 fd65 	bl	8006da4 <ssd1306_SetCursor>
		ssd1306_WriteString("Limit Value: ", Font_6x8, 1);
 80022da:	4b91      	ldr	r3, [pc, #580]	@ (8002520 <print_ultrassonico+0x2c8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e2:	4890      	ldr	r0, [pc, #576]	@ (8002524 <print_ultrassonico+0x2cc>)
 80022e4:	f004 fd38 	bl	8006d58 <ssd1306_WriteString>
		sprintf(buffer_float, "%dcm", Limit_Ultrasonic);
 80022e8:	4b8c      	ldr	r3, [pc, #560]	@ (800251c <print_ultrassonico+0x2c4>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	463b      	mov	r3, r7
 80022ee:	498e      	ldr	r1, [pc, #568]	@ (8002528 <print_ultrassonico+0x2d0>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f005 fe4f 	bl	8007f94 <siprintf>
		ssd1306_WriteString(buffer_float, Font_6x8, 1);
 80022f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002520 <print_ultrassonico+0x2c8>)
 80022f8:	4638      	mov	r0, r7
 80022fa:	2201      	movs	r2, #1
 80022fc:	9200      	str	r2, [sp, #0]
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	f004 fd2a 	bl	8006d58 <ssd1306_WriteString>

		// Check if ENTER button is pressed
		if (!HAL_GPIO_ReadPin(GPIOA, ENTER_BUTTON)) {
 8002304:	2110      	movs	r1, #16
 8002306:	4889      	ldr	r0, [pc, #548]	@ (800252c <print_ultrassonico+0x2d4>)
 8002308:	f001 fd7e 	bl	8003e08 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <print_ultrassonico+0xc6>
			intermediary_screen = 0;				// Exit configuration stage
 8002312:	4b87      	ldr	r3, [pc, #540]	@ (8002530 <print_ultrassonico+0x2d8>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
			HAL_Delay(200);							// Debounce delay
 8002318:	20c8      	movs	r0, #200	@ 0xc8
 800231a:	f000 ff27 	bl	800316c <HAL_Delay>
		}

		ssd1306_UpdateScreen();						// Update the OLED display
 800231e:	f004 fc0f 	bl	8006b40 <ssd1306_UpdateScreen>
	while (intermediary_screen) {
 8002322:	4b83      	ldr	r3, [pc, #524]	@ (8002530 <print_ultrassonico+0x2d8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d19a      	bne.n	8002260 <print_ultrassonico+0x8>
	}

	// --------------------------- Monitoring Stage ---------------------------
	ssd1306_Fill(0); 								// Clear the display buffer
 800232a:	2000      	movs	r0, #0
 800232c:	f004 fbf0 	bl	8006b10 <ssd1306_Fill>
	ssd1306_SetCursor(27, 1);
 8002330:	2101      	movs	r1, #1
 8002332:	201b      	movs	r0, #27
 8002334:	f004 fd36 	bl	8006da4 <ssd1306_SetCursor>
	ssd1306_WriteString("ULTRASONIC: ", Font_7x10, 1);
 8002338:	4b74      	ldr	r3, [pc, #464]	@ (800250c <print_ultrassonico+0x2b4>)
 800233a:	2201      	movs	r2, #1
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	4873      	ldr	r0, [pc, #460]	@ (8002510 <print_ultrassonico+0x2b8>)
 8002342:	f004 fd09 	bl	8006d58 <ssd1306_WriteString>
	ssd1306_FillRectangle(1, 15, 128, 16, 1);
 8002346:	2301      	movs	r3, #1
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2310      	movs	r3, #16
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	210f      	movs	r1, #15
 8002350:	2001      	movs	r0, #1
 8002352:	f004 fde2 	bl	8006f1a <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(1, 20, 127, 63, 1);
 8002356:	2301      	movs	r3, #1
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	233f      	movs	r3, #63	@ 0x3f
 800235c:	227f      	movs	r2, #127	@ 0x7f
 800235e:	2114      	movs	r1, #20
 8002360:	2001      	movs	r0, #1
 8002362:	f004 fda3 	bl	8006eac <ssd1306_DrawRectangle>

	// Measure distance using ultrasonic sensor
	ultrassonico();
 8002366:	f7ff fef7 	bl	8002158 <ultrassonico>

	// Apply low-pass filter to smooth readings from the ultrasonic sensor
	uint16_t filtered_distance = low_pass_filter(Distance);
 800236a:	4b72      	ldr	r3, [pc, #456]	@ (8002534 <print_ultrassonico+0x2dc>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fe58 	bl	8001024 <low_pass_filter>
 8002374:	4603      	mov	r3, r0
 8002376:	81fb      	strh	r3, [r7, #14]

	// Display the measured distance
	ssd1306_SetCursor(5, 22);
 8002378:	2116      	movs	r1, #22
 800237a:	2005      	movs	r0, #5
 800237c:	f004 fd12 	bl	8006da4 <ssd1306_SetCursor>
	if (filtered_distance > 200) {
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	2bc8      	cmp	r3, #200	@ 0xc8
 8002384:	d909      	bls.n	800239a <print_ultrassonico+0x142>
		filtered_distance = 200;
 8002386:	23c8      	movs	r3, #200	@ 0xc8
 8002388:	81fb      	strh	r3, [r7, #14]
		ssd1306_WriteString("Dist= +200cm", Font_6x8, 1);
 800238a:	4b65      	ldr	r3, [pc, #404]	@ (8002520 <print_ultrassonico+0x2c8>)
 800238c:	2201      	movs	r2, #1
 800238e:	9200      	str	r2, [sp, #0]
 8002390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002392:	4869      	ldr	r0, [pc, #420]	@ (8002538 <print_ultrassonico+0x2e0>)
 8002394:	f004 fce0 	bl	8006d58 <ssd1306_WriteString>
 8002398:	e027      	b.n	80023ea <print_ultrassonico+0x192>

	} else if (filtered_distance < 5) {
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d809      	bhi.n	80023b4 <print_ultrassonico+0x15c>
		filtered_distance = 5;
 80023a0:	2305      	movs	r3, #5
 80023a2:	81fb      	strh	r3, [r7, #14]
		ssd1306_WriteString("Dist= -5cm", Font_6x8, 1);
 80023a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002520 <print_ultrassonico+0x2c8>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ac:	4863      	ldr	r0, [pc, #396]	@ (800253c <print_ultrassonico+0x2e4>)
 80023ae:	f004 fcd3 	bl	8006d58 <ssd1306_WriteString>
 80023b2:	e01a      	b.n	80023ea <print_ultrassonico+0x192>
	} else {
		ssd1306_WriteString("Dist= ", Font_6x8, 1);
 80023b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002520 <print_ultrassonico+0x2c8>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	9200      	str	r2, [sp, #0]
 80023ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023bc:	4860      	ldr	r0, [pc, #384]	@ (8002540 <print_ultrassonico+0x2e8>)
 80023be:	f004 fccb 	bl	8006d58 <ssd1306_WriteString>
		sprintf(buffer_float, "%d", filtered_distance);
 80023c2:	89fa      	ldrh	r2, [r7, #14]
 80023c4:	463b      	mov	r3, r7
 80023c6:	495f      	ldr	r1, [pc, #380]	@ (8002544 <print_ultrassonico+0x2ec>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fde3 	bl	8007f94 <siprintf>
		ssd1306_WriteString(buffer_float, Font_7x10, 1);
 80023ce:	4b4f      	ldr	r3, [pc, #316]	@ (800250c <print_ultrassonico+0x2b4>)
 80023d0:	4638      	mov	r0, r7
 80023d2:	2201      	movs	r2, #1
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d8:	f004 fcbe 	bl	8006d58 <ssd1306_WriteString>
		ssd1306_WriteString("cm", Font_7x10, 1);
 80023dc:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <print_ultrassonico+0x2b4>)
 80023de:	2201      	movs	r2, #1
 80023e0:	9200      	str	r2, [sp, #0]
 80023e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e4:	4858      	ldr	r0, [pc, #352]	@ (8002548 <print_ultrassonico+0x2f0>)
 80023e6:	f004 fcb7 	bl	8006d58 <ssd1306_WriteString>
	}

	// Draws the line separating the distance values ​​from the horizontal distance bar
	ssd1306_DrawRectangle(1, 33, 127, 33, 1);
 80023ea:	2301      	movs	r3, #1
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2321      	movs	r3, #33	@ 0x21
 80023f0:	227f      	movs	r2, #127	@ 0x7f
 80023f2:	2121      	movs	r1, #33	@ 0x21
 80023f4:	2001      	movs	r0, #1
 80023f6:	f004 fd59 	bl	8006eac <ssd1306_DrawRectangle>

	// Condition if the number has 2 or 3 digits to help with formatting
	if (Limit_Ultrasonic >= 100) {
 80023fa:	4b48      	ldr	r3, [pc, #288]	@ (800251c <print_ultrassonico+0x2c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b63      	cmp	r3, #99	@ 0x63
 8002400:	dd0c      	ble.n	800241c <print_ultrassonico+0x1c4>
		ssd1306_DrawRectangle(95, 20, 127, 33, 1);
 8002402:	2301      	movs	r3, #1
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2321      	movs	r3, #33	@ 0x21
 8002408:	227f      	movs	r2, #127	@ 0x7f
 800240a:	2114      	movs	r1, #20
 800240c:	205f      	movs	r0, #95	@ 0x5f
 800240e:	f004 fd4d 	bl	8006eac <ssd1306_DrawRectangle>
		ssd1306_SetCursor(97, 22);
 8002412:	2116      	movs	r1, #22
 8002414:	2061      	movs	r0, #97	@ 0x61
 8002416:	f004 fcc5 	bl	8006da4 <ssd1306_SetCursor>
 800241a:	e00b      	b.n	8002434 <print_ultrassonico+0x1dc>
	} else {
		ssd1306_DrawRectangle(99, 20, 127, 33, 1);
 800241c:	2301      	movs	r3, #1
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2321      	movs	r3, #33	@ 0x21
 8002422:	227f      	movs	r2, #127	@ 0x7f
 8002424:	2114      	movs	r1, #20
 8002426:	2063      	movs	r0, #99	@ 0x63
 8002428:	f004 fd40 	bl	8006eac <ssd1306_DrawRectangle>
		ssd1306_SetCursor(102, 22);
 800242c:	2116      	movs	r1, #22
 800242e:	2066      	movs	r0, #102	@ 0x66
 8002430:	f004 fcb8 	bl	8006da4 <ssd1306_SetCursor>
	}

	// Write the threshold number
	sprintf(buffer_float, "%dcm", Limit_Ultrasonic);
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <print_ultrassonico+0x2c4>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	463b      	mov	r3, r7
 800243a:	493b      	ldr	r1, [pc, #236]	@ (8002528 <print_ultrassonico+0x2d0>)
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fda9 	bl	8007f94 <siprintf>
	ssd1306_WriteString(buffer_float, Font_6x8, 1);
 8002442:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <print_ultrassonico+0x2c8>)
 8002444:	4638      	mov	r0, r7
 8002446:	2201      	movs	r2, #1
 8002448:	9200      	str	r2, [sp, #0]
 800244a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244c:	f004 fc84 	bl	8006d58 <ssd1306_WriteString>

	// Draw Distance marker
	x_distance = (uint8_t) (((Distance - 5) * 128) / (200 - 5)) + 1;
 8002450:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <print_ultrassonico+0x2dc>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3b05      	subs	r3, #5
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	4a3c      	ldr	r2, [pc, #240]	@ (800254c <print_ultrassonico+0x2f4>)
 800245a:	fb82 1203 	smull	r1, r2, r2, r3
 800245e:	441a      	add	r2, r3
 8002460:	11d2      	asrs	r2, r2, #7
 8002462:	17db      	asrs	r3, r3, #31
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <print_ultrassonico+0x2f8>)
 800246e:	701a      	strb	r2, [r3, #0]
	ssd1306_FillRectangle(1, 33, x_distance, 63, 1);
 8002470:	4b37      	ldr	r3, [pc, #220]	@ (8002550 <print_ultrassonico+0x2f8>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	233f      	movs	r3, #63	@ 0x3f
 800247a:	2121      	movs	r1, #33	@ 0x21
 800247c:	2001      	movs	r0, #1
 800247e:	f004 fd4c 	bl	8006f1a <ssd1306_FillRectangle>

	// Draw threshold marker
	x_limit = (uint8_t) (((Limit_Ultrasonic - 5) * 128) / (200 - 5)) + 1;
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <print_ultrassonico+0x2c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3b05      	subs	r3, #5
 8002488:	01db      	lsls	r3, r3, #7
 800248a:	4a30      	ldr	r2, [pc, #192]	@ (800254c <print_ultrassonico+0x2f4>)
 800248c:	fb82 1203 	smull	r1, r2, r2, r3
 8002490:	441a      	add	r2, r3
 8002492:	11d2      	asrs	r2, r2, #7
 8002494:	17db      	asrs	r3, r3, #31
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024a0:	701a      	strb	r2, [r3, #0]

	// Color inversion condition for better visualization
	if (x_distance > x_limit)
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <print_ultrassonico+0x2f8>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <print_ultrassonico+0x270>
		ssd1306_DrawRectangle(x_limit, 33, x_limit + 1, 63, 0);
 80024ae:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024b0:	7818      	ldrb	r0, [r3, #0]
 80024b2:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	2300      	movs	r3, #0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	233f      	movs	r3, #63	@ 0x3f
 80024c0:	2121      	movs	r1, #33	@ 0x21
 80024c2:	f004 fcf3 	bl	8006eac <ssd1306_DrawRectangle>
 80024c6:	e00b      	b.n	80024e0 <print_ultrassonico+0x288>
	else
		ssd1306_DrawRectangle(x_limit, 33, x_limit + 1, 63, 1);
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024ca:	7818      	ldrb	r0, [r3, #0]
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	2301      	movs	r3, #1
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	233f      	movs	r3, #63	@ 0x3f
 80024da:	2121      	movs	r1, #33	@ 0x21
 80024dc:	f004 fce6 	bl	8006eac <ssd1306_DrawRectangle>

	// Alert condition: activate GPIO if distance exceeds threshold
	if (x_distance <= x_limit)
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <print_ultrassonico+0x2f8>)
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <print_ultrassonico+0x2fc>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d805      	bhi.n	80024f8 <print_ultrassonico+0x2a0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	2101      	movs	r1, #1
 80024f0:	4819      	ldr	r0, [pc, #100]	@ (8002558 <print_ultrassonico+0x300>)
 80024f2:	f001 fca1 	bl	8003e38 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

}
 80024f6:	e004      	b.n	8002502 <print_ultrassonico+0x2aa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2101      	movs	r1, #1
 80024fc:	4816      	ldr	r0, [pc, #88]	@ (8002558 <print_ultrassonico+0x300>)
 80024fe:	f001 fc9b 	bl	8003e38 <HAL_GPIO_WritePin>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800cea0 	.word	0x0800cea0
 8002510:	0800bebc 	.word	0x0800bebc
 8002514:	200002f0 	.word	0x200002f0
 8002518:	30c30c31 	.word	0x30c30c31
 800251c:	200002d8 	.word	0x200002d8
 8002520:	0800ce94 	.word	0x0800ce94
 8002524:	0800becc 	.word	0x0800becc
 8002528:	0800bedc 	.word	0x0800bedc
 800252c:	40020000 	.word	0x40020000
 8002530:	20000068 	.word	0x20000068
 8002534:	200002e8 	.word	0x200002e8
 8002538:	0800bee4 	.word	0x0800bee4
 800253c:	0800bef4 	.word	0x0800bef4
 8002540:	0800bf00 	.word	0x0800bf00
 8002544:	0800bf08 	.word	0x0800bf08
 8002548:	0800bf0c 	.word	0x0800bf0c
 800254c:	a80a80a9 	.word	0xa80a80a9
 8002550:	200002ea 	.word	0x200002ea
 8002554:	200002eb 	.word	0x200002eb
 8002558:	40020400 	.word	0x40020400

0800255c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002560:	f000 fd92 	bl	8003088 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002564:	f000 f8e6 	bl	8002734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002568:	f000 fa94 	bl	8002a94 <MX_GPIO_Init>
	MX_I2C1_Init();
 800256c:	f000 f9a0 	bl	80028b0 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8002570:	f000 fa66 	bl	8002a40 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002574:	f000 f94a 	bl	800280c <MX_ADC1_Init>
	MX_TIM3_Init();
 8002578:	f000 fa14 	bl	80029a4 <MX_TIM3_Init>
	MX_TIM2_Init();
 800257c:	f000 f9c6 	bl	800290c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	ssd1306_Init();
 8002580:	f004 fa5c 	bl	8006a3c <ssd1306_Init>
	MPU6050_Init();
 8002584:	f7fe fd82 	bl	800108c <MPU6050_Init>
//	TIM2_Setup();
	HAL_TIM_Base_Start(&htim2);
 8002588:	485d      	ldr	r0, [pc, #372]	@ (8002700 <main+0x1a4>)
 800258a:	f003 facb 	bl	8005b24 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); 	// Pull the TRIGGER pin low
 800258e:	2200      	movs	r2, #0
 8002590:	2140      	movs	r1, #64	@ 0x40
 8002592:	485c      	ldr	r0, [pc, #368]	@ (8002704 <main+0x1a8>)
 8002594:	f001 fc50 	bl	8003e38 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);								// Starts the TIMER3 for interruption of overflow
 8002598:	485b      	ldr	r0, [pc, #364]	@ (8002708 <main+0x1ac>)
 800259a:	f003 fb2b 	bl	8005bf4 <HAL_TIM_Base_Start_IT>
	current_screen = 0;
 800259e:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <main+0x1b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80025a4:	2064      	movs	r0, #100	@ 0x64
 80025a6:	f000 fde1 	bl	800316c <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		// Data acquisition every 10ms (100 Hz)
		if (Data_Ready) {
 80025aa:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <main+0x1b4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <main+0x62>
			MPU6050_Read_Measures();
 80025b2:	f7ff fb9d 	bl	8001cf0 <MPU6050_Read_Measures>
			Data_Ready -= 0;
 80025b6:	4b56      	ldr	r3, [pc, #344]	@ (8002710 <main+0x1b4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a55      	ldr	r2, [pc, #340]	@ (8002710 <main+0x1b4>)
 80025bc:	6013      	str	r3, [r2, #0]
		}

// --------------------------- Menu Logic ---------------------------

		// ------------------- Home screen Logic --------------------
		if (current_screen == 0) {
 80025be:	4b53      	ldr	r3, [pc, #332]	@ (800270c <main+0x1b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d131      	bne.n	800262a <main+0xce>

			// Checking if someone pressed the CHANGE button
			if ((HAL_GPIO_ReadPin(GPIOA, CHANGE_BUTTON) == GPIO_PIN_RESET) && button_change_clicked == 0) {
 80025c6:	2102      	movs	r1, #2
 80025c8:	484e      	ldr	r0, [pc, #312]	@ (8002704 <main+0x1a8>)
 80025ca:	f001 fc1d 	bl	8003e08 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11e      	bne.n	8002612 <main+0xb6>
 80025d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002714 <main+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11a      	bne.n	8002612 <main+0xb6>

				// Variable for CHANGE button debounce
				button_change_clicked = 1;
 80025dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002714 <main+0x1b8>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
				cursor++;
 80025e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <main+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002718 <main+0x1bc>)
 80025ea:	6013      	str	r3, [r2, #0]

				// Making the main menu cyclic
				if (cursor == 4)
 80025ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <main+0x1bc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d102      	bne.n	80025fa <main+0x9e>
					cursor = 0;
 80025f4:	4b48      	ldr	r3, [pc, #288]	@ (8002718 <main+0x1bc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

				// Making the cursor move a feature
				item_selected += 1;
 80025fa:	4b48      	ldr	r3, [pc, #288]	@ (800271c <main+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a46      	ldr	r2, [pc, #280]	@ (800271c <main+0x1c0>)
 8002602:	6013      	str	r3, [r2, #0]

				// If the cursor reaches the last item, it should return to the first item.
				if (item_selected >= NUM_ITEMS)
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <main+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b03      	cmp	r3, #3
 800260a:	dd02      	ble.n	8002612 <main+0xb6>
					item_selected = 0;
 800260c:	4b43      	ldr	r3, [pc, #268]	@ (800271c <main+0x1c0>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
			}
			// If the CHANGE button was release, the auxiliar variable returns to low
			if (HAL_GPIO_ReadPin(GPIOA, CHANGE_BUTTON) == GPIO_PIN_SET) {
 8002612:	2102      	movs	r1, #2
 8002614:	483b      	ldr	r0, [pc, #236]	@ (8002704 <main+0x1a8>)
 8002616:	f001 fbf7 	bl	8003e08 <HAL_GPIO_ReadPin>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <main+0xca>
				button_change_clicked = 0;
 8002620:	4b3c      	ldr	r3, [pc, #240]	@ (8002714 <main+0x1b8>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
			}

			// External function for writing icons and feature titles on the OLED display
			menu();
 8002626:	f7fe fddf 	bl	80011e8 <menu>
		}

		// ------------------- Specific screen Logic ----------------
		if (current_screen) {
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <main+0x1b0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01d      	beq.n	800266e <main+0x112>

			// Fills the display with a specific color
			ssd1306_Fill(0);
 8002632:	2000      	movs	r0, #0
 8002634:	f004 fa6c 	bl	8006b10 <ssd1306_Fill>

			if (item_selected == 0)
 8002638:	4b38      	ldr	r3, [pc, #224]	@ (800271c <main+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <main+0xea>
				// External function for utilizing and sampling ultrasonic sensor functionality
				print_ultrassonico();
 8002640:	f7ff fe0a 	bl	8002258 <print_ultrassonico>
 8002644:	e013      	b.n	800266e <main+0x112>

			else if (item_selected == 1)
 8002646:	4b35      	ldr	r3, [pc, #212]	@ (800271c <main+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <main+0xf8>
				// External function for using and sampling gyroscope functionality
				print_gyro();
 800264e:	f7fe fe7b 	bl	8001348 <print_gyro>
 8002652:	e00c      	b.n	800266e <main+0x112>

			else if (item_selected == 2)
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <main+0x1c0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d102      	bne.n	8002662 <main+0x106>
				// External function for using and sampling the kalman filter functionality
				print_kalman();
 800265c:	f7ff fce0 	bl	8002020 <print_kalman>
 8002660:	e005      	b.n	800266e <main+0x112>

			else if (item_selected == 3)
 8002662:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <main+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d101      	bne.n	800266e <main+0x112>
				// External function for using and sampling the inertial sensor calibration functionality
				calibration();
 800266a:	f7fe ff1d 	bl	80014a8 <calibration>

		}

		// Checking if someone pressed the ENTER button
		if (HAL_GPIO_ReadPin(GPIOA, ENTER_BUTTON) == GPIO_PIN_RESET && button_enter_clicked == 0) {
 800266e:	2110      	movs	r1, #16
 8002670:	4824      	ldr	r0, [pc, #144]	@ (8002704 <main+0x1a8>)
 8002672:	f001 fbc9 	bl	8003e08 <HAL_GPIO_ReadPin>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d118      	bne.n	80026ae <main+0x152>
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <main+0x1c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d114      	bne.n	80026ae <main+0x152>

			button_enter_clicked = 1;
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <main+0x1c4>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

			// Setting the auxiliary variable of the ultrasonic sensor functionality to high
			intermediary_screen = 1;
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <main+0x1c8>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

			// Turning off the buzzer
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2101      	movs	r1, #1
 8002694:	4824      	ldr	r0, [pc, #144]	@ (8002728 <main+0x1cc>)
 8002696:	f001 fbcf 	bl	8003e38 <HAL_GPIO_WritePin>

			// Switching to the other screen type
			current_screen = !current_screen;
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <main+0x1b0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <main+0x1b0>)
 80026ac:	601a      	str	r2, [r3, #0]
		}

		// If the ENTER button was release, the auxiliar variable returns to low
		if (HAL_GPIO_ReadPin(GPIOA, ENTER_BUTTON) == GPIO_PIN_SET && button_enter_clicked == 1) {
 80026ae:	2110      	movs	r1, #16
 80026b0:	4814      	ldr	r0, [pc, #80]	@ (8002704 <main+0x1a8>)
 80026b2:	f001 fba9 	bl	8003e08 <HAL_GPIO_ReadPin>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <main+0x16e>
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <main+0x1c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <main+0x16e>
			button_enter_clicked = 0;
 80026c4:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <main+0x1c4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
		}


		// Setting the previous item to print on the display
		item_sel_previous = item_selected - 1;
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <main+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <main+0x1d0>)
 80026d2:	6013      	str	r3, [r2, #0]

		// Previous item would be below first = make it the last
		if (item_sel_previous < 0) {
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <main+0x1d0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da02      	bge.n	80026e2 <main+0x186>
			item_sel_previous = NUM_ITEMS - 1;
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <main+0x1d0>)
 80026de:	2203      	movs	r2, #3
 80026e0:	601a      	str	r2, [r3, #0]
		}

		// Setting the next item to print on the display
		item_sel_next = item_selected + 1;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <main+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <main+0x1d4>)
 80026ea:	6013      	str	r3, [r2, #0]

		// Next item would be after last = make it the first
		if (item_sel_next >= NUM_ITEMS) {
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <main+0x1d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	dd02      	ble.n	80026fa <main+0x19e>
			item_sel_next = 0;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <main+0x1d4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
		}

		// Extern function to update the changes on the display
		ssd1306_UpdateScreen();
 80026fa:	f004 fa21 	bl	8006b40 <ssd1306_UpdateScreen>
		if (Data_Ready) {
 80026fe:	e754      	b.n	80025aa <main+0x4e>
 8002700:	2000038c 	.word	0x2000038c
 8002704:	40020000 	.word	0x40020000
 8002708:	200003d4 	.word	0x200003d4
 800270c:	20000280 	.word	0x20000280
 8002710:	200002d4 	.word	0x200002d4
 8002714:	20000288 	.word	0x20000288
 8002718:	20000284 	.word	0x20000284
 800271c:	20000274 	.word	0x20000274
 8002720:	2000028c 	.word	0x2000028c
 8002724:	20000068 	.word	0x20000068
 8002728:	40020400 	.word	0x40020400
 800272c:	20000278 	.word	0x20000278
 8002730:	2000027c 	.word	0x2000027c

08002734 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	@ 0x50
 8002738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800273a:	f107 031c 	add.w	r3, r7, #28
 800273e:	2234      	movs	r2, #52	@ 0x34
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f005 fca3 	bl	800808e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <SystemClock_Config+0xd0>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <SystemClock_Config+0xd0>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	@ 0x40
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <SystemClock_Config+0xd0>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <SystemClock_Config+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002780:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <SystemClock_Config+0xd4>)
 8002782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <SystemClock_Config+0xd4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002798:	2301      	movs	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800279c:	2310      	movs	r3, #16
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a0:	2302      	movs	r3, #2
 80027a2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80027a8:	2308      	movs	r3, #8
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 80027ac:	2350      	movs	r3, #80	@ 0x50
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80027b8:	2302      	movs	r3, #2
 80027ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fec1 	bl	8005548 <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0x9c>
		Error_Handler();
 80027cc:	f000 f9e2 	bl	8002b94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d4:	2302      	movs	r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fb61 	bl	8004eb4 <HAL_RCC_ClockConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0xc8>
		Error_Handler();
 80027f8:	f000 f9cc 	bl	8002b94 <Error_Handler>
	}
}
 80027fc:	bf00      	nop
 80027fe:	3750      	adds	r7, #80	@ 0x50
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002812:	463b      	mov	r3, r7
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800281e:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002820:	4a21      	ldr	r2, [pc, #132]	@ (80028a8 <MX_ADC1_Init+0x9c>)
 8002822:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800282a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800283a:	2200      	movs	r2, #0
 800283c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002848:	2200      	movs	r2, #0
 800284a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800284e:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <MX_ADC1_Init+0xa0>)
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800285a:	2201      	movs	r2, #1
 800285c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <MX_ADC1_Init+0x98>)
 8002868:	2201      	movs	r2, #1
 800286a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800286c:	480d      	ldr	r0, [pc, #52]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800286e:	f000 fca1 	bl	80031b4 <HAL_ADC_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_ADC1_Init+0x70>
		Error_Handler();
 8002878:	f000 f98c 	bl	8002b94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002880:	2301      	movs	r3, #1
 8002882:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002888:	463b      	mov	r3, r7
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <MX_ADC1_Init+0x98>)
 800288e:	f000 fde7 	bl	8003460 <HAL_ADC_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC1_Init+0x90>
		Error_Handler();
 8002898:	f000 f97c 	bl	8002b94 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200002f0 	.word	0x200002f0
 80028a8:	40012000 	.word	0x40012000
 80028ac:	0f000001 	.word	0x0f000001

080028b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <MX_I2C1_Init+0x54>)
 80028b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028bc:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <MX_I2C1_Init+0x58>)
 80028be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028ec:	4804      	ldr	r0, [pc, #16]	@ (8002900 <MX_I2C1_Init+0x50>)
 80028ee:	f001 fabd 	bl	8003e6c <HAL_I2C_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80028f8:	f000 f94c 	bl	8002b94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000338 	.word	0x20000338
 8002904:	40005400 	.word	0x40005400
 8002908:	000186a0 	.word	0x000186a0

0800290c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002928:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <MX_TIM2_Init+0x94>)
 800292a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800292e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <MX_TIM2_Init+0x94>)
 8002932:	224f      	movs	r2, #79	@ 0x4f
 8002934:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <MX_TIM2_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800293c:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <MX_TIM2_Init+0x94>)
 800293e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002942:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <MX_TIM2_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <MX_TIM2_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002950:	4813      	ldr	r0, [pc, #76]	@ (80029a0 <MX_TIM2_Init+0x94>)
 8002952:	f003 f897 	bl	8005a84 <HAL_TIM_Base_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM2_Init+0x54>
		Error_Handler();
 800295c:	f000 f91a 	bl	8002b94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002964:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	4619      	mov	r1, r3
 800296c:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <MX_TIM2_Init+0x94>)
 800296e:	f003 faa1 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x70>
		Error_Handler();
 8002978:	f000 f90c 	bl	8002b94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_TIM2_Init+0x94>)
 800298a:	f003 fcc9 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002994:	f000 f8fe 	bl	8002b94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000038c 	.word	0x2000038c

080029a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029c2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <MX_TIM3_Init+0x98>)
 80029c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 79;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029c8:	224f      	movs	r2, #79	@ 0x4f
 80029ca:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80029d8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80029e6:	4814      	ldr	r0, [pc, #80]	@ (8002a38 <MX_TIM3_Init+0x94>)
 80029e8:	f003 f84c 	bl	8005a84 <HAL_TIM_Base_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80029f2:	f000 f8cf 	bl	8002b94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029fa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <MX_TIM3_Init+0x94>)
 8002a04:	f003 fa56 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8002a0e:	f000 f8c1 	bl	8002b94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <MX_TIM3_Init+0x94>)
 8002a20:	f003 fc7e 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002a2a:	f000 f8b3 	bl	8002b94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200003d4 	.word	0x200003d4
 8002a3c:	40000400 	.word	0x40000400

08002a40 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002a44:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a46:	4a11      	ldr	r2, [pc, #68]	@ (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 1000000;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a4c:	4a10      	ldr	r2, [pc, #64]	@ (8002a90 <MX_USART2_UART_Init+0x50>)
 8002a4e:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002a56:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a64:	220c      	movs	r2, #12
 8002a66:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a68:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002a74:	4804      	ldr	r0, [pc, #16]	@ (8002a88 <MX_USART2_UART_Init+0x48>)
 8002a76:	f003 fce3 	bl	8006440 <HAL_UART_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_USART2_UART_Init+0x44>
		Error_Handler();
 8002a80:	f000 f888 	bl	8002b94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000041c 	.word	0x2000041c
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	000f4240 	.word	0x000f4240

08002a94 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a26      	ldr	r2, [pc, #152]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b24      	ldr	r3, [pc, #144]	@ (8002b68 <MX_GPIO_Init+0xd4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4821      	ldr	r0, [pc, #132]	@ (8002b6c <MX_GPIO_Init+0xd8>)
 8002ae8:	f001 f9a6 	bl	8003e38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2101      	movs	r1, #1
 8002af0:	481f      	ldr	r0, [pc, #124]	@ (8002b70 <MX_GPIO_Init+0xdc>)
 8002af2:	f001 f9a1 	bl	8003e38 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4;
 8002af6:	2312      	movs	r3, #18
 8002af8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4619      	mov	r1, r3
 8002b08:	4818      	ldr	r0, [pc, #96]	@ (8002b6c <MX_GPIO_Init+0xd8>)
 8002b0a:	f000 ffe9 	bl	8003ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b0e:	2340      	movs	r3, #64	@ 0x40
 8002b10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	4619      	mov	r1, r3
 8002b24:	4811      	ldr	r0, [pc, #68]	@ (8002b6c <MX_GPIO_Init+0xd8>)
 8002b26:	f000 ffdb 	bl	8003ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480b      	ldr	r0, [pc, #44]	@ (8002b6c <MX_GPIO_Init+0xd8>)
 8002b3e:	f000 ffcf 	bl	8003ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b42:	2301      	movs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4805      	ldr	r0, [pc, #20]	@ (8002b70 <MX_GPIO_Init+0xdc>)
 8002b5a:	f000 ffc1 	bl	8003ae0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002b5e:	bf00      	nop
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback for TIM3, used to indicate the right time to capture data from the inertial unit
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	Data_Ready = 1;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200002d4 	.word	0x200002d4

08002b94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <Error_Handler+0x8>

08002ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	4a0f      	ldr	r2, [pc, #60]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_MspInit+0x4c>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bde:	2007      	movs	r0, #7
 8002be0:	f000 ff3c 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800

08002bf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <HAL_ADC_MspInit+0x7c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d127      	bne.n	8002c62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c22:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <HAL_ADC_MspInit+0x80>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4805      	ldr	r0, [pc, #20]	@ (8002c74 <HAL_ADC_MspInit+0x84>)
 8002c5e:	f000 ff3f 	bl	8003ae0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40012000 	.word	0x40012000
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <HAL_I2C_MspInit+0x84>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12c      	bne.n	8002cf4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <HAL_I2C_MspInit+0x8c>)
 8002cd4:	f000 ff04 	bl	8003ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a07      	ldr	r2, [pc, #28]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cf4:	bf00      	nop
 8002cf6:	3728      	adds	r7, #40	@ 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40005400 	.word	0x40005400
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d18:	d10e      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2a:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d36:	e01a      	b.n	8002d6e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <HAL_TIM_Base_MspInit+0x74>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d115      	bne.n	8002d6e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_TIM_Base_MspInit+0x70>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	201d      	movs	r0, #29
 8002d64:	f000 fe85 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d68:	201d      	movs	r0, #29
 8002d6a:	f000 fe9e 	bl	8003aaa <HAL_NVIC_EnableIRQ>
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40000400 	.word	0x40000400

08002d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <HAL_UART_MspInit+0x84>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12b      	bne.n	8002dfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <HAL_UART_MspInit+0x88>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dda:	230c      	movs	r3, #12
 8002ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dea:	2307      	movs	r3, #7
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <HAL_UART_MspInit+0x8c>)
 8002df6:	f000 fe73 	bl	8003ae0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40004400 	.word	0x40004400
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <NMI_Handler+0x4>

08002e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <MemManage_Handler+0x4>

08002e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e66:	f000 f961 	bl	800312c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <TIM3_IRQHandler+0x10>)
 8002e76:	f002 ff2d 	bl	8005cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003d4 	.word	0x200003d4

08002e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f005 f949 	bl	8008134 <__errno>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe7 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <_exit+0x12>

08002eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e00a      	b.n	8002ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002edc:	f3af 8000 	nop.w
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	60ba      	str	r2, [r7, #8]
 8002ee8:	b2ca      	uxtb	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	dbf0      	blt.n	8002edc <_read+0x12>
  }

  return len;
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e009      	b.n	8002f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	60ba      	str	r2, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbf1      	blt.n	8002f16 <_write+0x12>
  }
  return len;
 8002f32:	687b      	ldr	r3, [r7, #4]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_close>:

int _close(int file)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f64:	605a      	str	r2, [r3, #4]
  return 0;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_isatty>:

int _isatty(int file)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f005 f8ae 	bl	8008134 <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	220c      	movs	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20020000 	.word	0x20020000
 8003004:	00000400 	.word	0x00000400
 8003008:	20000464 	.word	0x20000464
 800300c:	200009c0 	.word	0x200009c0

08003010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <SystemInit+0x20>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	4a05      	ldr	r2, [pc, #20]	@ (8003030 <SystemInit+0x20>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800306c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003038:	f7ff ffea 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800303c:	480c      	ldr	r0, [pc, #48]	@ (8003070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800303e:	490d      	ldr	r1, [pc, #52]	@ (8003074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003040:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003044:	e002      	b.n	800304c <LoopCopyDataInit>

08003046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304a:	3304      	adds	r3, #4

0800304c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800304c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800304e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003050:	d3f9      	bcc.n	8003046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003054:	4c0a      	ldr	r4, [pc, #40]	@ (8003080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003058:	e001      	b.n	800305e <LoopFillZerobss>

0800305a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800305c:	3204      	adds	r2, #4

0800305e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800305e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003060:	d3fb      	bcc.n	800305a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003062:	f005 f86d 	bl	8008140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003066:	f7ff fa79 	bl	800255c <main>
  bx  lr    
 800306a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 800306c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003074:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003078:	0800d328 	.word	0x0800d328
  ldr r2, =_sbss
 800307c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003080:	200009c0 	.word	0x200009c0

08003084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003084:	e7fe      	b.n	8003084 <ADC_IRQHandler>
	...

08003088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800308c:	4b0e      	ldr	r3, [pc, #56]	@ (80030c8 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0d      	ldr	r2, [pc, #52]	@ (80030c8 <HAL_Init+0x40>)
 8003092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_Init+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_Init+0x40>)
 800309e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a4:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <HAL_Init+0x40>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b0:	2003      	movs	r0, #3
 80030b2:	f000 fcd3 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 f808 	bl	80030cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030bc:	f7ff fd70 	bl	8002ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00

080030cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_InitTick+0x54>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_InitTick+0x58>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fceb 	bl	8003ac6 <HAL_SYSTICK_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00e      	b.n	8003118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d80a      	bhi.n	8003116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003100:	2200      	movs	r2, #0
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f000 fcb3 	bl	8003a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800310c:	4a06      	ldr	r2, [pc, #24]	@ (8003128 <HAL_InitTick+0x5c>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000070 	.word	0x20000070
 8003124:	20000078 	.word	0x20000078
 8003128:	20000074 	.word	0x20000074

0800312c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_IncTick+0x20>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_IncTick+0x24>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4413      	add	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <HAL_IncTick+0x24>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000078 	.word	0x20000078
 8003150:	20000468 	.word	0x20000468

08003154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_GetTick+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000468 	.word	0x20000468

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff ffee 	bl	8003154 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_Delay+0x44>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003192:	bf00      	nop
 8003194:	f7ff ffde 	bl	8003154 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000078 	.word	0x20000078

080031b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e033      	b.n	8003232 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fd0c 	bl	8002bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031fa:	f023 0302 	bic.w	r3, r3, #2
 80031fe:	f043 0202 	orr.w	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa5c 	bl	80036c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
 8003222:	e001      	b.n	8003228 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Start+0x1a>
 8003252:	2302      	movs	r3, #2
 8003254:	e0b2      	b.n	80033bc <HAL_ADC_Start+0x180>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d018      	beq.n	800329e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800327c:	4b52      	ldr	r3, [pc, #328]	@ (80033c8 <HAL_ADC_Start+0x18c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a52      	ldr	r2, [pc, #328]	@ (80033cc <HAL_ADC_Start+0x190>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0c9a      	lsrs	r2, r3, #18
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003290:	e002      	b.n	8003298 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3b01      	subs	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f9      	bne.n	8003292 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d17a      	bne.n	80033a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	f023 0206 	bic.w	r2, r3, #6
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80032f8:	e002      	b.n	8003300 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_ADC_Start+0x194>)
 800330a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003314:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12a      	bne.n	8003378 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_ADC_Start+0x198>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d015      	beq.n	8003358 <HAL_ADC_Start+0x11c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a29      	ldr	r2, [pc, #164]	@ (80033d8 <HAL_ADC_Start+0x19c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d105      	bne.n	8003342 <HAL_ADC_Start+0x106>
 8003336:	4b26      	ldr	r3, [pc, #152]	@ (80033d0 <HAL_ADC_Start+0x194>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <HAL_ADC_Start+0x1a0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d136      	bne.n	80033ba <HAL_ADC_Start+0x17e>
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_ADC_Start+0x194>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d130      	bne.n	80033ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d129      	bne.n	80033ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	e020      	b.n	80033ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a15      	ldr	r2, [pc, #84]	@ (80033d4 <HAL_ADC_Start+0x198>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d11b      	bne.n	80033ba <HAL_ADC_Start+0x17e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d114      	bne.n	80033ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	e00b      	b.n	80033ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000070 	.word	0x20000070
 80033cc:	431bde83 	.word	0x431bde83
 80033d0:	40012300 	.word	0x40012300
 80033d4:	40012000 	.word	0x40012000
 80033d8:	40012100 	.word	0x40012100
 80033dc:	40012200 	.word	0x40012200

080033e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_Stop+0x16>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e021      	b.n	800343a <HAL_ADC_Stop+0x5a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e113      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x244>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b09      	cmp	r3, #9
 800348a:	d925      	bls.n	80034d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	3b1e      	subs	r3, #30
 80034a2:	2207      	movs	r2, #7
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43da      	mvns	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	400a      	ands	r2, r1
 80034b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68d9      	ldr	r1, [r3, #12]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	4603      	mov	r3, r0
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4403      	add	r3, r0
 80034ca:	3b1e      	subs	r3, #30
 80034cc:	409a      	lsls	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e022      	b.n	800351e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6919      	ldr	r1, [r3, #16]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	2207      	movs	r2, #7
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	400a      	ands	r2, r1
 80034fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6919      	ldr	r1, [r3, #16]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	4618      	mov	r0, r3
 800350e:	4603      	mov	r3, r0
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4403      	add	r3, r0
 8003514:	409a      	lsls	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d824      	bhi.n	8003570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3b05      	subs	r3, #5
 8003538:	221f      	movs	r2, #31
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43da      	mvns	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	400a      	ands	r2, r1
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	3b05      	subs	r3, #5
 8003562:	fa00 f203 	lsl.w	r2, r0, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	635a      	str	r2, [r3, #52]	@ 0x34
 800356e:	e04c      	b.n	800360a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d824      	bhi.n	80035c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	3b23      	subs	r3, #35	@ 0x23
 800358a:	221f      	movs	r2, #31
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43da      	mvns	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	400a      	ands	r2, r1
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	3b23      	subs	r3, #35	@ 0x23
 80035b4:	fa00 f203 	lsl.w	r2, r0, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c0:	e023      	b.n	800360a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	3b41      	subs	r3, #65	@ 0x41
 80035d4:	221f      	movs	r2, #31
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	400a      	ands	r2, r1
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3b41      	subs	r3, #65	@ 0x41
 80035fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800360a:	4b29      	ldr	r3, [pc, #164]	@ (80036b0 <HAL_ADC_ConfigChannel+0x250>)
 800360c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a28      	ldr	r2, [pc, #160]	@ (80036b4 <HAL_ADC_ConfigChannel+0x254>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10f      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1d8>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b12      	cmp	r3, #18
 800361e:	d10b      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_ADC_ConfigChannel+0x254>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12b      	bne.n	800369a <HAL_ADC_ConfigChannel+0x23a>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_ADC_ConfigChannel+0x258>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <HAL_ADC_ConfigChannel+0x1f4>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b11      	cmp	r3, #17
 8003652:	d122      	bne.n	800369a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a11      	ldr	r2, [pc, #68]	@ (80036b8 <HAL_ADC_ConfigChannel+0x258>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d111      	bne.n	800369a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003676:	4b11      	ldr	r3, [pc, #68]	@ (80036bc <HAL_ADC_ConfigChannel+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a11      	ldr	r2, [pc, #68]	@ (80036c0 <HAL_ADC_ConfigChannel+0x260>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	0c9a      	lsrs	r2, r3, #18
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800368c:	e002      	b.n	8003694 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40012300 	.word	0x40012300
 80036b4:	40012000 	.word	0x40012000
 80036b8:	10000012 	.word	0x10000012
 80036bc:	20000070 	.word	0x20000070
 80036c0:	431bde83 	.word	0x431bde83

080036c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036cc:	4b79      	ldr	r3, [pc, #484]	@ (80038b4 <ADC_Init+0x1f0>)
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800371c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800373e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	4a58      	ldr	r2, [pc, #352]	@ (80038b8 <ADC_Init+0x1f4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800376a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800378c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	e00f      	b.n	80037c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0202 	bic.w	r2, r2, #2
 80037d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7e1b      	ldrb	r3, [r3, #24]
 80037dc:	005a      	lsls	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01b      	beq.n	8003828 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800380e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	3b01      	subs	r3, #1
 800381c:	035a      	lsls	r2, r3, #13
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e007      	b.n	8003838 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	3b01      	subs	r3, #1
 8003854:	051a      	lsls	r2, r3, #20
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800386c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800387a:	025a      	lsls	r2, r3, #9
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6899      	ldr	r1, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	029a      	lsls	r2, r3, #10
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40012300 	.word	0x40012300
 80038b8:	0f000001 	.word	0x0f000001

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	@ (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	@ (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a28:	d301      	bcc.n	8003a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00f      	b.n	8003a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <SysTick_Config+0x40>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a36:	210f      	movs	r1, #15
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f7ff ff8e 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <SysTick_Config+0x40>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a46:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <SysTick_Config+0x40>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000e010 	.word	0xe000e010

08003a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff29 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a84:	f7ff ff3e 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff8e 	bl	80039b0 <NVIC_EncodePriority>
 8003a94:	4602      	mov	r2, r0
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff5d 	bl	800395c <__NVIC_SetPriority>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff31 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ffa2 	bl	8003a18 <SysTick_Config>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b089      	sub	sp, #36	@ 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e165      	b.n	8003dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f040 8154 	bne.w	8003dc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d005      	beq.n	8003b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d130      	bne.n	8003b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0201 	and.w	r2, r3, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d017      	beq.n	8003bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d123      	bne.n	8003c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80ae 	beq.w	8003dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003de0 <HAL_GPIO_Init+0x300>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003de0 <HAL_GPIO_Init+0x300>)
 8003c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c76:	4b5a      	ldr	r3, [pc, #360]	@ (8003de0 <HAL_GPIO_Init+0x300>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c82:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_GPIO_Init+0x304>)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8003de8 <HAL_GPIO_Init+0x308>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d025      	beq.n	8003cfa <HAL_GPIO_Init+0x21a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8003dec <HAL_GPIO_Init+0x30c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01f      	beq.n	8003cf6 <HAL_GPIO_Init+0x216>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8003df0 <HAL_GPIO_Init+0x310>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d019      	beq.n	8003cf2 <HAL_GPIO_Init+0x212>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8003df4 <HAL_GPIO_Init+0x314>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_GPIO_Init+0x20e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8003df8 <HAL_GPIO_Init+0x318>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00d      	beq.n	8003cea <HAL_GPIO_Init+0x20a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <HAL_GPIO_Init+0x31c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <HAL_GPIO_Init+0x206>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	@ (8003e00 <HAL_GPIO_Init+0x320>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_GPIO_Init+0x202>
 8003cde:	2306      	movs	r3, #6
 8003ce0:	e00c      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003ce2:	2307      	movs	r3, #7
 8003ce4:	e00a      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003ce6:	2305      	movs	r3, #5
 8003ce8:	e008      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003cea:	2304      	movs	r3, #4
 8003cec:	e006      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e004      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e002      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_GPIO_Init+0x21c>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	f002 0203 	and.w	r2, r2, #3
 8003d02:	0092      	lsls	r2, r2, #2
 8003d04:	4093      	lsls	r3, r2
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d0c:	4935      	ldr	r1, [pc, #212]	@ (8003de4 <HAL_GPIO_Init+0x304>)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3e:	4a31      	ldr	r2, [pc, #196]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d44:	4b2f      	ldr	r3, [pc, #188]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d6e:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d92:	4a1c      	ldr	r2, [pc, #112]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d98:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dbc:	4a11      	ldr	r2, [pc, #68]	@ (8003e04 <HAL_GPIO_Init+0x324>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	f67f ae96 	bls.w	8003afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3724      	adds	r7, #36	@ 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40013800 	.word	0x40013800
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40020400 	.word	0x40020400
 8003df0:	40020800 	.word	0x40020800
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40021400 	.word	0x40021400
 8003e00:	40021800 	.word	0x40021800
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	e001      	b.n	8003e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e54:	e003      	b.n	8003e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e12b      	b.n	80040d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe fef0 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	@ 0x24
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f001 f8e2 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a81      	ldr	r2, [pc, #516]	@ (80040e0 <HAL_I2C_Init+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d807      	bhi.n	8003ef0 <HAL_I2C_Init+0x84>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a80      	ldr	r2, [pc, #512]	@ (80040e4 <HAL_I2C_Init+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	bf94      	ite	ls
 8003ee8:	2301      	movls	r3, #1
 8003eea:	2300      	movhi	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e006      	b.n	8003efe <HAL_I2C_Init+0x92>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a7d      	ldr	r2, [pc, #500]	@ (80040e8 <HAL_I2C_Init+0x27c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf94      	ite	ls
 8003ef8:	2301      	movls	r3, #1
 8003efa:	2300      	movhi	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0e7      	b.n	80040d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a78      	ldr	r2, [pc, #480]	@ (80040ec <HAL_I2C_Init+0x280>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a6a      	ldr	r2, [pc, #424]	@ (80040e0 <HAL_I2C_Init+0x274>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d802      	bhi.n	8003f40 <HAL_I2C_Init+0xd4>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	e009      	b.n	8003f54 <HAL_I2C_Init+0xe8>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a69      	ldr	r2, [pc, #420]	@ (80040f0 <HAL_I2C_Init+0x284>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	3301      	adds	r3, #1
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	495c      	ldr	r1, [pc, #368]	@ (80040e0 <HAL_I2C_Init+0x274>)
 8003f70:	428b      	cmp	r3, r1
 8003f72:	d819      	bhi.n	8003fa8 <HAL_I2C_Init+0x13c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e59      	subs	r1, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f82:	1c59      	adds	r1, r3, #1
 8003f84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f88:	400b      	ands	r3, r1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_I2C_Init+0x138>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1e59      	subs	r1, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	e051      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	e04f      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d111      	bne.n	8003fd4 <HAL_I2C_Init+0x168>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e012      	b.n	8003ffa <HAL_I2C_Init+0x18e>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e58      	subs	r0, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	0099      	lsls	r1, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Init+0x196>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e022      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_I2C_Init+0x1bc>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e58      	subs	r0, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	440b      	add	r3, r1
 8004018:	fbb0 f3f3 	udiv	r3, r0, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004026:	e00f      	b.n	8004048 <HAL_I2C_Init+0x1dc>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	6809      	ldr	r1, [r1, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004076:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6911      	ldr	r1, [r2, #16]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	430b      	orrs	r3, r1
 800408a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	000186a0 	.word	0x000186a0
 80040e4:	001e847f 	.word	0x001e847f
 80040e8:	003d08ff 	.word	0x003d08ff
 80040ec:	431bde83 	.word	0x431bde83
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800410e:	f7ff f821 	bl	8003154 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	f040 80d9 	bne.w	80042d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2319      	movs	r3, #25
 8004128:	2201      	movs	r2, #1
 800412a:	496d      	ldr	r1, [pc, #436]	@ (80042e0 <HAL_I2C_Mem_Write+0x1ec>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fc8b 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
 800413a:	e0cc      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_I2C_Mem_Write+0x56>
 8004146:	2302      	movs	r3, #2
 8004148:	e0c5      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d007      	beq.n	8004170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800417e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	@ 0x21
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a4d      	ldr	r2, [pc, #308]	@ (80042e4 <HAL_I2C_Mem_Write+0x1f0>)
 80041b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041b2:	88f8      	ldrh	r0, [r7, #6]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4603      	mov	r3, r0
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fac2 	bl	800474c <I2C_RequestMemoryWrite>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d052      	beq.n	8004274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e081      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fd50 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_I2C_Mem_Write+0x180>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1aa      	bne.n	80041d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fd43 	bl	8004d0c <I2C_WaitOnBTFFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e016      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	@ 0x30
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	817b      	strh	r3, [r7, #10]
 80042fa:	460b      	mov	r3, r1
 80042fc:	813b      	strh	r3, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004302:	f7fe ff27 	bl	8003154 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b20      	cmp	r3, #32
 8004312:	f040 8214 	bne.w	800473e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2319      	movs	r3, #25
 800431c:	2201      	movs	r2, #1
 800431e:	497b      	ldr	r1, [pc, #492]	@ (800450c <HAL_I2C_Mem_Read+0x224>)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fb91 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	e207      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_I2C_Mem_Read+0x56>
 800433a:	2302      	movs	r3, #2
 800433c:	e200      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d007      	beq.n	8004364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2222      	movs	r2, #34	@ 0x22
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2240      	movs	r2, #64	@ 0x40
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004510 <HAL_I2C_Mem_Read+0x228>)
 80043a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a6:	88f8      	ldrh	r0, [r7, #6]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa5e 	bl	8004878 <I2C_RequestMemoryRead>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1bc      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e190      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d11b      	bne.n	8004436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e170      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	2b02      	cmp	r3, #2
 800443c:	d11b      	bne.n	8004476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	e150      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800448c:	e144      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 80f1 	bhi.w	800467a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449c:	2b01      	cmp	r3, #1
 800449e:	d123      	bne.n	80044e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fc79 	bl	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e145      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044e6:	e117      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d14e      	bne.n	800458e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	2200      	movs	r2, #0
 80044f8:	4906      	ldr	r1, [pc, #24]	@ (8004514 <HAL_I2C_Mem_Read+0x22c>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 faa4 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e11a      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000
 8004514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800458c:	e0c4      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2200      	movs	r2, #0
 8004596:	496c      	ldr	r1, [pc, #432]	@ (8004748 <HAL_I2C_Mem_Read+0x460>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fa55 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cb      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	2200      	movs	r2, #0
 80045f2:	4955      	ldr	r1, [pc, #340]	@ (8004748 <HAL_I2C_Mem_Read+0x460>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fa27 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e09d      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004678:	e04e      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fb8c 	bl	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e058      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d124      	bne.n	8004718 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f aeb6 	bne.w	800448e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3728      	adds	r7, #40	@ 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	00010004 	.word	0x00010004

0800474c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	461a      	mov	r2, r3
 800475a:	4603      	mov	r3, r0
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	460b      	mov	r3, r1
 8004760:	813b      	strh	r3, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2200      	movs	r2, #0
 800477e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f960 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00d      	beq.n	80047aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479c:	d103      	bne.n	80047a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e05f      	b.n	800486a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047aa:	897b      	ldrh	r3, [r7, #10]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	6a3a      	ldr	r2, [r7, #32]
 80047be:	492d      	ldr	r1, [pc, #180]	@ (8004874 <I2C_RequestMemoryWrite+0x128>)
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f9bb 	bl	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e04c      	b.n	800486a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e8:	6a39      	ldr	r1, [r7, #32]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa46 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d107      	bne.n	800480e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e02b      	b.n	800486a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]
 8004822:	e021      	b.n	8004868 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b29b      	uxth	r3, r3
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004834:	6a39      	ldr	r1, [r7, #32]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa20 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	2b04      	cmp	r3, #4
 8004848:	d107      	bne.n	800485a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e005      	b.n	800486a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	00010002 	.word	0x00010002

08004878 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	817b      	strh	r3, [r7, #10]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8c2 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00d      	beq.n	80048e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d8:	d103      	bne.n	80048e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0aa      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	4952      	ldr	r1, [pc, #328]	@ (8004a44 <I2C_RequestMemoryRead+0x1cc>)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f91d 	bl	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e097      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f9a8 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	2b04      	cmp	r3, #4
 8004938:	d107      	bne.n	800494a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e076      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004954:	893b      	ldrh	r3, [r7, #8]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]
 800495e:	e021      	b.n	80049a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004960:	893b      	ldrh	r3, [r7, #8]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	b29b      	uxth	r3, r3
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f982 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e050      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800499a:	893b      	ldrh	r3, [r7, #8]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a6:	6a39      	ldr	r1, [r7, #32]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f967 	bl	8004c7c <I2C_WaitOnTXEFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d107      	bne.n	80049cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e035      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f82b 	bl	8004a48 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a06:	d103      	bne.n	8004a10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e013      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a14:	897b      	ldrh	r3, [r7, #10]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	4906      	ldr	r1, [pc, #24]	@ (8004a44 <I2C_RequestMemoryRead+0x1cc>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f886 	bl	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	00010002 	.word	0x00010002

08004a48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a58:	e048      	b.n	8004aec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d044      	beq.n	8004aec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe fb77 	bl	8003154 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d139      	bne.n	8004aec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10d      	bne.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	e00c      	b.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d116      	bne.n	8004aec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e023      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d10d      	bne.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	43da      	mvns	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	e00c      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d093      	beq.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b4a:	e071      	b.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5a:	d123      	bne.n	8004ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e067      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d041      	beq.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fe fad2 	bl	8003154 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d136      	bne.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10c      	bne.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf14      	ite	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	2300      	moveq	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	e00b      	b.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	43da      	mvns	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e021      	b.n	8004c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d10c      	bne.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e00b      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f47f af6d 	bne.w	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c88:	e034      	b.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f8e3 	bl	8004e56 <I2C_IsAcknowledgeFailed>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e034      	b.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d028      	beq.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fe fa57 	bl	8003154 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d11d      	bne.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b80      	cmp	r3, #128	@ 0x80
 8004cc4:	d016      	beq.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e007      	b.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfe:	2b80      	cmp	r3, #128	@ 0x80
 8004d00:	d1c3      	bne.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d18:	e034      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f89b 	bl	8004e56 <I2C_IsAcknowledgeFailed>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e034      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d028      	beq.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d32:	f7fe fa0f 	bl	8003154 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d11d      	bne.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d016      	beq.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e007      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d1c3      	bne.n	8004d1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da8:	e049      	b.n	8004e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d119      	bne.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0210 	mvn.w	r2, #16
 8004dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e030      	b.n	8004e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dec:	f7fe f9b2 	bl	8003154 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d11d      	bne.n	8004e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b40      	cmp	r3, #64	@ 0x40
 8004e0e:	d016      	beq.n	8004e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d1ae      	bne.n	8004daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6c:	d11b      	bne.n	8004ea6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0cc      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b68      	ldr	r3, [pc, #416]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d90c      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b65      	ldr	r3, [pc, #404]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b63      	ldr	r3, [pc, #396]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0b8      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f08:	4b59      	ldr	r3, [pc, #356]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a58      	ldr	r2, [pc, #352]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f20:	4b53      	ldr	r3, [pc, #332]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a52      	ldr	r2, [pc, #328]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f2c:	4b50      	ldr	r3, [pc, #320]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	494d      	ldr	r1, [pc, #308]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d044      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b47      	ldr	r3, [pc, #284]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d119      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e07f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b3f      	ldr	r3, [pc, #252]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e067      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4934      	ldr	r1, [pc, #208]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7fe f8d6 	bl	8003154 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fac:	f7fe f8d2 	bl	8003154 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e04f      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 020c 	and.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1eb      	bne.n	8004fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b25      	ldr	r3, [pc, #148]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d20c      	bcs.n	8004ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b22      	ldr	r3, [pc, #136]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b20      	ldr	r3, [pc, #128]	@ (800506c <HAL_RCC_ClockConfig+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e032      	b.n	8005062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005008:	4b19      	ldr	r3, [pc, #100]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4916      	ldr	r1, [pc, #88]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	4313      	orrs	r3, r2
 8005018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	490e      	ldr	r1, [pc, #56]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800503a:	f000 f855 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 800503e:	4602      	mov	r2, r0
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	490a      	ldr	r1, [pc, #40]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	fa22 f303 	lsr.w	r3, r2, r3
 8005052:	4a09      	ldr	r2, [pc, #36]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005056:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_RCC_ClockConfig+0x1c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe f836 	bl	80030cc <HAL_InitTick>

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023c00 	.word	0x40023c00
 8005070:	40023800 	.word	0x40023800
 8005074:	0800c120 	.word	0x0800c120
 8005078:	20000070 	.word	0x20000070
 800507c:	20000074 	.word	0x20000074

08005080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005084:	4b03      	ldr	r3, [pc, #12]	@ (8005094 <HAL_RCC_GetHCLKFreq+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000070 	.word	0x20000070

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800509c:	f7ff fff0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a9b      	lsrs	r3, r3, #10
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	@ (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40023800 	.word	0x40023800
 80050bc:	0800c130 	.word	0x0800c130

080050c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c4:	f7ff ffdc 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0b5b      	lsrs	r3, r3, #13
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	@ (80050e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	0800c130 	.word	0x0800c130

080050e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ec:	b0ae      	sub	sp, #184	@ 0xb8
 80050ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800510e:	4bcb      	ldr	r3, [pc, #812]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b0c      	cmp	r3, #12
 8005118:	f200 8206 	bhi.w	8005528 <HAL_RCC_GetSysClockFreq+0x440>
 800511c:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005159 	.word	0x08005159
 8005128:	08005529 	.word	0x08005529
 800512c:	08005529 	.word	0x08005529
 8005130:	08005529 	.word	0x08005529
 8005134:	08005161 	.word	0x08005161
 8005138:	08005529 	.word	0x08005529
 800513c:	08005529 	.word	0x08005529
 8005140:	08005529 	.word	0x08005529
 8005144:	08005169 	.word	0x08005169
 8005148:	08005529 	.word	0x08005529
 800514c:	08005529 	.word	0x08005529
 8005150:	08005529 	.word	0x08005529
 8005154:	08005359 	.word	0x08005359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4bb9      	ldr	r3, [pc, #740]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x358>)
 800515a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800515e:	e1e7      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005160:	4bb8      	ldr	r3, [pc, #736]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005166:	e1e3      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005168:	4bb4      	ldr	r3, [pc, #720]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005174:	4bb1      	ldr	r3, [pc, #708]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d071      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005180:	4bae      	ldr	r3, [pc, #696]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	099b      	lsrs	r3, r3, #6
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800518c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800519c:	2300      	movs	r3, #0
 800519e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	f04f 0000 	mov.w	r0, #0
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	0159      	lsls	r1, r3, #5
 80051b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b8:	0150      	lsls	r0, r2, #5
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4621      	mov	r1, r4
 80051c0:	1a51      	subs	r1, r2, r1
 80051c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80051c4:	4629      	mov	r1, r5
 80051c6:	eb63 0301 	sbc.w	r3, r3, r1
 80051ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80051d8:	4649      	mov	r1, r9
 80051da:	018b      	lsls	r3, r1, #6
 80051dc:	4641      	mov	r1, r8
 80051de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051e2:	4641      	mov	r1, r8
 80051e4:	018a      	lsls	r2, r1, #6
 80051e6:	4641      	mov	r1, r8
 80051e8:	1a51      	subs	r1, r2, r1
 80051ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051ec:	4649      	mov	r1, r9
 80051ee:	eb63 0301 	sbc.w	r3, r3, r1
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005200:	4649      	mov	r1, r9
 8005202:	00cb      	lsls	r3, r1, #3
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520a:	4641      	mov	r1, r8
 800520c:	00ca      	lsls	r2, r1, #3
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	4603      	mov	r3, r0
 8005214:	4622      	mov	r2, r4
 8005216:	189b      	adds	r3, r3, r2
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
 800521a:	462b      	mov	r3, r5
 800521c:	460a      	mov	r2, r1
 800521e:	eb42 0303 	adc.w	r3, r2, r3
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005230:	4629      	mov	r1, r5
 8005232:	024b      	lsls	r3, r1, #9
 8005234:	4621      	mov	r1, r4
 8005236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800523a:	4621      	mov	r1, r4
 800523c:	024a      	lsls	r2, r1, #9
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800524c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005254:	f7fb fd38 	bl	8000cc8 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005262:	e067      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005264:	4b75      	ldr	r3, [pc, #468]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800527e:	2300      	movs	r3, #0
 8005280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005286:	4622      	mov	r2, r4
 8005288:	462b      	mov	r3, r5
 800528a:	f04f 0000 	mov.w	r0, #0
 800528e:	f04f 0100 	mov.w	r1, #0
 8005292:	0159      	lsls	r1, r3, #5
 8005294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005298:	0150      	lsls	r0, r2, #5
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4621      	mov	r1, r4
 80052a0:	1a51      	subs	r1, r2, r1
 80052a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052a4:	4629      	mov	r1, r5
 80052a6:	eb63 0301 	sbc.w	r3, r3, r1
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80052b8:	4649      	mov	r1, r9
 80052ba:	018b      	lsls	r3, r1, #6
 80052bc:	4641      	mov	r1, r8
 80052be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052c2:	4641      	mov	r1, r8
 80052c4:	018a      	lsls	r2, r1, #6
 80052c6:	4641      	mov	r1, r8
 80052c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80052cc:	4649      	mov	r1, r9
 80052ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e6:	4692      	mov	sl, r2
 80052e8:	469b      	mov	fp, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	eb1a 0303 	adds.w	r3, sl, r3
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	462b      	mov	r3, r5
 80052f4:	eb4b 0303 	adc.w	r3, fp, r3
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005306:	4629      	mov	r1, r5
 8005308:	028b      	lsls	r3, r1, #10
 800530a:	4621      	mov	r1, r4
 800530c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005310:	4621      	mov	r1, r4
 8005312:	028a      	lsls	r2, r1, #10
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800531c:	2200      	movs	r2, #0
 800531e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005320:	677a      	str	r2, [r7, #116]	@ 0x74
 8005322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005326:	f7fb fccf 	bl	8000cc8 <__aeabi_uldivmod>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4613      	mov	r3, r2
 8005330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005334:	4b41      	ldr	r3, [pc, #260]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800534a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005356:	e0eb      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005358:	4b38      	ldr	r3, [pc, #224]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005364:	4b35      	ldr	r3, [pc, #212]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d06b      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005370:	4b32      	ldr	r3, [pc, #200]	@ (800543c <HAL_RCC_GetSysClockFreq+0x354>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	2200      	movs	r2, #0
 8005378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800537a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800537c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	663b      	str	r3, [r7, #96]	@ 0x60
 8005384:	2300      	movs	r3, #0
 8005386:	667b      	str	r3, [r7, #100]	@ 0x64
 8005388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	f04f 0000 	mov.w	r0, #0
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	0159      	lsls	r1, r3, #5
 800539a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539e:	0150      	lsls	r0, r2, #5
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4621      	mov	r1, r4
 80053a6:	1a51      	subs	r1, r2, r1
 80053a8:	61b9      	str	r1, [r7, #24]
 80053aa:	4629      	mov	r1, r5
 80053ac:	eb63 0301 	sbc.w	r3, r3, r1
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80053be:	4659      	mov	r1, fp
 80053c0:	018b      	lsls	r3, r1, #6
 80053c2:	4651      	mov	r1, sl
 80053c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c8:	4651      	mov	r1, sl
 80053ca:	018a      	lsls	r2, r1, #6
 80053cc:	4651      	mov	r1, sl
 80053ce:	ebb2 0801 	subs.w	r8, r2, r1
 80053d2:	4659      	mov	r1, fp
 80053d4:	eb63 0901 	sbc.w	r9, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ec:	4690      	mov	r8, r2
 80053ee:	4699      	mov	r9, r3
 80053f0:	4623      	mov	r3, r4
 80053f2:	eb18 0303 	adds.w	r3, r8, r3
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	462b      	mov	r3, r5
 80053fa:	eb49 0303 	adc.w	r3, r9, r3
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800540c:	4629      	mov	r1, r5
 800540e:	024b      	lsls	r3, r1, #9
 8005410:	4621      	mov	r1, r4
 8005412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005416:	4621      	mov	r1, r4
 8005418:	024a      	lsls	r2, r1, #9
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005422:	2200      	movs	r2, #0
 8005424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800542c:	f7fb fc4c 	bl	8000cc8 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800543a:	e065      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x420>
 800543c:	40023800 	.word	0x40023800
 8005440:	00f42400 	.word	0x00f42400
 8005444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005448:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x458>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	099b      	lsrs	r3, r3, #6
 800544e:	2200      	movs	r2, #0
 8005450:	4618      	mov	r0, r3
 8005452:	4611      	mov	r1, r2
 8005454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005458:	653b      	str	r3, [r7, #80]	@ 0x50
 800545a:	2300      	movs	r3, #0
 800545c:	657b      	str	r3, [r7, #84]	@ 0x54
 800545e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005462:	4642      	mov	r2, r8
 8005464:	464b      	mov	r3, r9
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	0159      	lsls	r1, r3, #5
 8005470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005474:	0150      	lsls	r0, r2, #5
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4641      	mov	r1, r8
 800547c:	1a51      	subs	r1, r2, r1
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	4649      	mov	r1, r9
 8005482:	eb63 0301 	sbc.w	r3, r3, r1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005494:	4659      	mov	r1, fp
 8005496:	018b      	lsls	r3, r1, #6
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800549e:	4651      	mov	r1, sl
 80054a0:	018a      	lsls	r2, r1, #6
 80054a2:	4651      	mov	r1, sl
 80054a4:	1a54      	subs	r4, r2, r1
 80054a6:	4659      	mov	r1, fp
 80054a8:	eb63 0501 	sbc.w	r5, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	00eb      	lsls	r3, r5, #3
 80054b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ba:	00e2      	lsls	r2, r4, #3
 80054bc:	4614      	mov	r4, r2
 80054be:	461d      	mov	r5, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	18e3      	adds	r3, r4, r3
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	464b      	mov	r3, r9
 80054c8:	eb45 0303 	adc.w	r3, r5, r3
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054da:	4629      	mov	r1, r5
 80054dc:	028b      	lsls	r3, r1, #10
 80054de:	4621      	mov	r1, r4
 80054e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054e4:	4621      	mov	r1, r4
 80054e6:	028a      	lsls	r2, r1, #10
 80054e8:	4610      	mov	r0, r2
 80054ea:	4619      	mov	r1, r3
 80054ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054f0:	2200      	movs	r2, #0
 80054f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054fa:	f7fb fbe5 	bl	8000cc8 <__aeabi_uldivmod>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4613      	mov	r3, r2
 8005504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005508:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x458>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	0f1b      	lsrs	r3, r3, #28
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800551a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005526:	e003      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800552a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800552e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005534:	4618      	mov	r0, r3
 8005536:	37b8      	adds	r7, #184	@ 0xb8
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800
 8005544:	00f42400 	.word	0x00f42400

08005548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e28d      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8083 	beq.w	800566e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005568:	4b94      	ldr	r3, [pc, #592]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b04      	cmp	r3, #4
 8005572:	d019      	beq.n	80055a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005574:	4b91      	ldr	r3, [pc, #580]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 030c 	and.w	r3, r3, #12
        || \
 800557c:	2b08      	cmp	r3, #8
 800557e:	d106      	bne.n	800558e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005580:	4b8e      	ldr	r3, [pc, #568]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800558c:	d00c      	beq.n	80055a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800558e:	4b8b      	ldr	r3, [pc, #556]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d112      	bne.n	80055c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800559a:	4b88      	ldr	r3, [pc, #544]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055a6:	d10b      	bne.n	80055c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	4b84      	ldr	r3, [pc, #528]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05b      	beq.n	800566c <HAL_RCC_OscConfig+0x124>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d157      	bne.n	800566c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e25a      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c8:	d106      	bne.n	80055d8 <HAL_RCC_OscConfig+0x90>
 80055ca:	4b7c      	ldr	r3, [pc, #496]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7b      	ldr	r2, [pc, #492]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e01d      	b.n	8005614 <HAL_RCC_OscConfig+0xcc>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055e0:	d10c      	bne.n	80055fc <HAL_RCC_OscConfig+0xb4>
 80055e2:	4b76      	ldr	r3, [pc, #472]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a75      	ldr	r2, [pc, #468]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b73      	ldr	r3, [pc, #460]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a72      	ldr	r2, [pc, #456]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e00b      	b.n	8005614 <HAL_RCC_OscConfig+0xcc>
 80055fc:	4b6f      	ldr	r3, [pc, #444]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6e      	ldr	r2, [pc, #440]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b6c      	ldr	r3, [pc, #432]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6b      	ldr	r2, [pc, #428]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800560e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fd fd9a 	bl	8003154 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005624:	f7fd fd96 	bl	8003154 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	@ 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e21f      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	4b61      	ldr	r3, [pc, #388]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0xdc>
 8005642:	e014      	b.n	800566e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd fd86 	bl	8003154 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564c:	f7fd fd82 	bl	8003154 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	@ 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e20b      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565e:	4b57      	ldr	r3, [pc, #348]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x104>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d06f      	beq.n	800575a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800567a:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b00      	cmp	r3, #0
 8005684:	d017      	beq.n	80056b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005686:	4b4d      	ldr	r3, [pc, #308]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
        || \
 800568e:	2b08      	cmp	r3, #8
 8005690:	d105      	bne.n	800569e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005692:	4b4a      	ldr	r3, [pc, #296]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569e:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d11c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056aa:	4b44      	ldr	r3, [pc, #272]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d116      	bne.n	80056e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b6:	4b41      	ldr	r3, [pc, #260]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_RCC_OscConfig+0x186>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e1d3      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ce:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4937      	ldr	r1, [pc, #220]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	e03a      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ec:	4b34      	ldr	r3, [pc, #208]	@ (80057c0 <HAL_RCC_OscConfig+0x278>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fd fd2f 	bl	8003154 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fa:	f7fd fd2b 	bl	8003154 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e1b4      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570c:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005718:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4925      	ldr	r1, [pc, #148]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005728:	4313      	orrs	r3, r2
 800572a:	600b      	str	r3, [r1, #0]
 800572c:	e015      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <HAL_RCC_OscConfig+0x278>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fd0e 	bl	8003154 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573c:	f7fd fd0a 	bl	8003154 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e193      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574e:	4b1b      	ldr	r3, [pc, #108]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d036      	beq.n	80057d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d016      	beq.n	800579c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800576e:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <HAL_RCC_OscConfig+0x27c>)
 8005770:	2201      	movs	r2, #1
 8005772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fd fcee 	bl	8003154 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577c:	f7fd fcea 	bl	8003154 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e173      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578e:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_OscConfig+0x274>)
 8005790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x234>
 800579a:	e01b      	b.n	80057d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579c:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <HAL_RCC_OscConfig+0x27c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fd fcd7 	bl	8003154 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	e00e      	b.n	80057c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057aa:	f7fd fcd3 	bl	8003154 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d907      	bls.n	80057c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e15c      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470000 	.word	0x42470000
 80057c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c8:	4b8a      	ldr	r3, [pc, #552]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80057ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ea      	bne.n	80057aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8097 	beq.w	8005910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4b83      	ldr	r3, [pc, #524]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	4b7f      	ldr	r3, [pc, #508]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	4a7e      	ldr	r2, [pc, #504]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80057fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005800:	6413      	str	r3, [r2, #64]	@ 0x40
 8005802:	4b7c      	ldr	r3, [pc, #496]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005812:	4b79      	ldr	r3, [pc, #484]	@ (80059f8 <HAL_RCC_OscConfig+0x4b0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d118      	bne.n	8005850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581e:	4b76      	ldr	r3, [pc, #472]	@ (80059f8 <HAL_RCC_OscConfig+0x4b0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a75      	ldr	r2, [pc, #468]	@ (80059f8 <HAL_RCC_OscConfig+0x4b0>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800582a:	f7fd fc93 	bl	8003154 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005832:	f7fd fc8f 	bl	8003154 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e118      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005844:	4b6c      	ldr	r3, [pc, #432]	@ (80059f8 <HAL_RCC_OscConfig+0x4b0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d106      	bne.n	8005866 <HAL_RCC_OscConfig+0x31e>
 8005858:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	4a65      	ldr	r2, [pc, #404]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6713      	str	r3, [r2, #112]	@ 0x70
 8005864:	e01c      	b.n	80058a0 <HAL_RCC_OscConfig+0x358>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b05      	cmp	r3, #5
 800586c:	d10c      	bne.n	8005888 <HAL_RCC_OscConfig+0x340>
 800586e:	4b61      	ldr	r3, [pc, #388]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	4a60      	ldr	r2, [pc, #384]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	f043 0304 	orr.w	r3, r3, #4
 8005878:	6713      	str	r3, [r2, #112]	@ 0x70
 800587a:	4b5e      	ldr	r3, [pc, #376]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a5d      	ldr	r2, [pc, #372]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6713      	str	r3, [r2, #112]	@ 0x70
 8005886:	e00b      	b.n	80058a0 <HAL_RCC_OscConfig+0x358>
 8005888:	4b5a      	ldr	r3, [pc, #360]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	4a59      	ldr	r2, [pc, #356]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	6713      	str	r3, [r2, #112]	@ 0x70
 8005894:	4b57      	ldr	r3, [pc, #348]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	4a56      	ldr	r2, [pc, #344]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800589a:	f023 0304 	bic.w	r3, r3, #4
 800589e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fd fc54 	bl	8003154 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ae:	e00a      	b.n	80058c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b0:	f7fd fc50 	bl	8003154 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e0d7      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c6:	4b4b      	ldr	r3, [pc, #300]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ee      	beq.n	80058b0 <HAL_RCC_OscConfig+0x368>
 80058d2:	e014      	b.n	80058fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd fc3e 	bl	8003154 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058dc:	f7fd fc3a 	bl	8003154 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e0c1      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f2:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ee      	bne.n	80058dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005904:	4b3b      	ldr	r3, [pc, #236]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	4a3a      	ldr	r2, [pc, #232]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800590a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800590e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80ad 	beq.w	8005a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800591a:	4b36      	ldr	r3, [pc, #216]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b08      	cmp	r3, #8
 8005924:	d060      	beq.n	80059e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d145      	bne.n	80059ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592e:	4b33      	ldr	r3, [pc, #204]	@ (80059fc <HAL_RCC_OscConfig+0x4b4>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fd fc0e 	bl	8003154 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fd fc0a 	bl	8003154 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e093      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594e:	4b29      	ldr	r3, [pc, #164]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	3b01      	subs	r3, #1
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	491b      	ldr	r1, [pc, #108]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598c:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <HAL_RCC_OscConfig+0x4b4>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fd fbdf 	bl	8003154 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599a:	f7fd fbdb 	bl	8003154 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e064      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x452>
 80059b8:	e05c      	b.n	8005a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <HAL_RCC_OscConfig+0x4b4>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd fbc8 	bl	8003154 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fd fbc4 	bl	8003154 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04d      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_RCC_OscConfig+0x4ac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x480>
 80059e6:	e045      	b.n	8005a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e040      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40007000 	.word	0x40007000
 80059fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a00:	4b1f      	ldr	r3, [pc, #124]	@ (8005a80 <HAL_RCC_OscConfig+0x538>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d030      	beq.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d129      	bne.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d122      	bne.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d119      	bne.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10f      	bne.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800

08005a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e041      	b.n	8005b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fd f92c 	bl	8002d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fae6 	bl	8006094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e046      	b.n	8005bca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a23      	ldr	r2, [pc, #140]	@ (8005bd8 <HAL_TIM_Base_Start+0xb4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b56:	d01d      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bdc <HAL_TIM_Base_Start+0xb8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	@ (8005be0 <HAL_TIM_Base_Start+0xbc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <HAL_TIM_Base_Start+0xc0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005be8 <HAL_TIM_Base_Start+0xc4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a19      	ldr	r2, [pc, #100]	@ (8005bec <HAL_TIM_Base_Start+0xc8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_Base_Start+0x70>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a18      	ldr	r2, [pc, #96]	@ (8005bf0 <HAL_TIM_Base_Start+0xcc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d111      	bne.n	8005bb8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d010      	beq.n	8005bc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	e007      	b.n	8005bc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40010400 	.word	0x40010400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40001800 	.word	0x40001800

08005bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e04e      	b.n	8005caa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a23      	ldr	r2, [pc, #140]	@ (8005cb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d022      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c36:	d01d      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cbc <HAL_TIM_Base_Start_IT+0xc8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a19      	ldr	r2, [pc, #100]	@ (8005ccc <HAL_TIM_Base_Start_IT+0xd8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	@ (8005cd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b06      	cmp	r3, #6
 8005c84:	d010      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	e007      	b.n	8005ca8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40010400 	.word	0x40010400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40001800 	.word	0x40001800

08005cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d020      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0202 	mvn.w	r2, #2
 8005d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f999 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005d24:	e005      	b.n	8005d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f98b 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f99c 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d020      	beq.n	8005d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0204 	mvn.w	r2, #4
 8005d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f973 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f965 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f976 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0208 	mvn.w	r2, #8
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2204      	movs	r2, #4
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f94d 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f93f 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f950 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d020      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01b      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0210 	mvn.w	r2, #16
 8005dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2208      	movs	r2, #8
 8005df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f927 	bl	8006056 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f919 	bl	8006042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f92a 	bl	800606a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0201 	mvn.w	r2, #1
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fc fe9a 	bl	8002b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fae4 	bl	800642c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8fb 	bl	800607e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0220 	mvn.w	r2, #32
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fab6 	bl	8006418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e0b4      	b.n	800603a <HAL_TIM_ConfigClockSource+0x186>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f08:	d03e      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0xd4>
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0e:	f200 8087 	bhi.w	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	f000 8086 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x172>
 8005f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1e:	d87f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b70      	cmp	r3, #112	@ 0x70
 8005f22:	d01a      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xa6>
 8005f24:	2b70      	cmp	r3, #112	@ 0x70
 8005f26:	d87b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b60      	cmp	r3, #96	@ 0x60
 8005f2a:	d050      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x11a>
 8005f2c:	2b60      	cmp	r3, #96	@ 0x60
 8005f2e:	d877      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b50      	cmp	r3, #80	@ 0x50
 8005f32:	d03c      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0xfa>
 8005f34:	2b50      	cmp	r3, #80	@ 0x50
 8005f36:	d873      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d058      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x13a>
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d86f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b30      	cmp	r3, #48	@ 0x30
 8005f42:	d064      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b30      	cmp	r3, #48	@ 0x30
 8005f46:	d86b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d060      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d867      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d05a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f58:	e062      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f6a:	f000 f9b9 	bl	80062e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	609a      	str	r2, [r3, #8]
      break;
 8005f86:	e04f      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f98:	f000 f9a2 	bl	80062e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005faa:	609a      	str	r2, [r3, #8]
      break;
 8005fac:	e03c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 f916 	bl	80061ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2150      	movs	r1, #80	@ 0x50
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f96f 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e02c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 f935 	bl	800624a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2160      	movs	r1, #96	@ 0x60
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f95f 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 8005fec:	e01c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 f8f6 	bl	80061ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f94f 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 800600c:	e00c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f000 f946 	bl	80062aa <TIM_ITRx_SetConfig>
      break;
 800601e:	e003      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e000      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a46      	ldr	r2, [pc, #280]	@ (80061c0 <TIM_Base_SetConfig+0x12c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	d00f      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a43      	ldr	r2, [pc, #268]	@ (80061c4 <TIM_Base_SetConfig+0x130>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a42      	ldr	r2, [pc, #264]	@ (80061c8 <TIM_Base_SetConfig+0x134>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a41      	ldr	r2, [pc, #260]	@ (80061cc <TIM_Base_SetConfig+0x138>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a40      	ldr	r2, [pc, #256]	@ (80061d0 <TIM_Base_SetConfig+0x13c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a35      	ldr	r2, [pc, #212]	@ (80061c0 <TIM_Base_SetConfig+0x12c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02b      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f4:	d027      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a32      	ldr	r2, [pc, #200]	@ (80061c4 <TIM_Base_SetConfig+0x130>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d023      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a31      	ldr	r2, [pc, #196]	@ (80061c8 <TIM_Base_SetConfig+0x134>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01f      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a30      	ldr	r2, [pc, #192]	@ (80061cc <TIM_Base_SetConfig+0x138>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01b      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2f      	ldr	r2, [pc, #188]	@ (80061d0 <TIM_Base_SetConfig+0x13c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d017      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2e      	ldr	r2, [pc, #184]	@ (80061d4 <TIM_Base_SetConfig+0x140>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2d      	ldr	r2, [pc, #180]	@ (80061d8 <TIM_Base_SetConfig+0x144>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00f      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2c      	ldr	r2, [pc, #176]	@ (80061dc <TIM_Base_SetConfig+0x148>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00b      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2b      	ldr	r2, [pc, #172]	@ (80061e0 <TIM_Base_SetConfig+0x14c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d007      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2a      	ldr	r2, [pc, #168]	@ (80061e4 <TIM_Base_SetConfig+0x150>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a29      	ldr	r2, [pc, #164]	@ (80061e8 <TIM_Base_SetConfig+0x154>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d108      	bne.n	8006158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800614c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a10      	ldr	r2, [pc, #64]	@ (80061c0 <TIM_Base_SetConfig+0x12c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_Base_SetConfig+0xf8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a12      	ldr	r2, [pc, #72]	@ (80061d0 <TIM_Base_SetConfig+0x13c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d105      	bne.n	80061b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	611a      	str	r2, [r3, #16]
  }
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	40010400 	.word	0x40010400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800
 80061e0:	40001800 	.word	0x40001800
 80061e4:	40001c00 	.word	0x40001c00
 80061e8:	40002000 	.word	0x40002000

080061ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 030a 	bic.w	r3, r3, #10
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624a:	b480      	push	{r7}
 800624c:	b087      	sub	sp, #28
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f023 0210 	bic.w	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	031b      	lsls	r3, r3, #12
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f043 0307 	orr.w	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	431a      	orrs	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e05a      	b.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a21      	ldr	r2, [pc, #132]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006384:	d01d      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1a      	ldr	r2, [pc, #104]	@ (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a18      	ldr	r2, [pc, #96]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a17      	ldr	r2, [pc, #92]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10c      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800

08006418 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e042      	b.n	80064d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc fc8a 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	@ 0x24
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f82b 	bl	80064e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e4:	b0c0      	sub	sp, #256	@ 0x100
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	68d9      	ldr	r1, [r3, #12]
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	ea40 0301 	orr.w	r3, r0, r1
 8006508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	431a      	orrs	r2, r3
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	431a      	orrs	r2, r3
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006538:	f021 010c 	bic.w	r1, r1, #12
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006546:	430b      	orrs	r3, r1
 8006548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	6999      	ldr	r1, [r3, #24]
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	ea40 0301 	orr.w	r3, r0, r1
 8006566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b8f      	ldr	r3, [pc, #572]	@ (80067ac <UART_SetConfig+0x2cc>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d005      	beq.n	8006580 <UART_SetConfig+0xa0>
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b8d      	ldr	r3, [pc, #564]	@ (80067b0 <UART_SetConfig+0x2d0>)
 800657c:	429a      	cmp	r2, r3
 800657e:	d104      	bne.n	800658a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fe fd9e 	bl	80050c0 <HAL_RCC_GetPCLK2Freq>
 8006584:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006588:	e003      	b.n	8006592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800658a:	f7fe fd85 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 800658e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800659c:	f040 810c 	bne.w	80067b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	1891      	adds	r1, r2, r2
 80065b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065ba:	415b      	adcs	r3, r3
 80065bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065c2:	4621      	mov	r1, r4
 80065c4:	eb12 0801 	adds.w	r8, r2, r1
 80065c8:	4629      	mov	r1, r5
 80065ca:	eb43 0901 	adc.w	r9, r3, r1
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e2:	4690      	mov	r8, r2
 80065e4:	4699      	mov	r9, r3
 80065e6:	4623      	mov	r3, r4
 80065e8:	eb18 0303 	adds.w	r3, r8, r3
 80065ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065f0:	462b      	mov	r3, r5
 80065f2:	eb49 0303 	adc.w	r3, r9, r3
 80065f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006606:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800660a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800660e:	460b      	mov	r3, r1
 8006610:	18db      	adds	r3, r3, r3
 8006612:	653b      	str	r3, [r7, #80]	@ 0x50
 8006614:	4613      	mov	r3, r2
 8006616:	eb42 0303 	adc.w	r3, r2, r3
 800661a:	657b      	str	r3, [r7, #84]	@ 0x54
 800661c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006624:	f7fa fb50 	bl	8000cc8 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <UART_SetConfig+0x2d4>)
 800662e:	fba3 2302 	umull	r2, r3, r3, r2
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	011c      	lsls	r4, r3, #4
 8006636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006640:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	1891      	adds	r1, r2, r2
 800664e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006650:	415b      	adcs	r3, r3
 8006652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006658:	4641      	mov	r1, r8
 800665a:	eb12 0a01 	adds.w	sl, r2, r1
 800665e:	4649      	mov	r1, r9
 8006660:	eb43 0b01 	adc.w	fp, r3, r1
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006678:	4692      	mov	sl, r2
 800667a:	469b      	mov	fp, r3
 800667c:	4643      	mov	r3, r8
 800667e:	eb1a 0303 	adds.w	r3, sl, r3
 8006682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006686:	464b      	mov	r3, r9
 8006688:	eb4b 0303 	adc.w	r3, fp, r3
 800668c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800669c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066a4:	460b      	mov	r3, r1
 80066a6:	18db      	adds	r3, r3, r3
 80066a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066aa:	4613      	mov	r3, r2
 80066ac:	eb42 0303 	adc.w	r3, r2, r3
 80066b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066ba:	f7fa fb05 	bl	8000cc8 <__aeabi_uldivmod>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	4b3b      	ldr	r3, [pc, #236]	@ (80067b4 <UART_SetConfig+0x2d4>)
 80066c6:	fba3 2301 	umull	r2, r3, r3, r1
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	2264      	movs	r2, #100	@ 0x64
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	1acb      	subs	r3, r1, r3
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066da:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <UART_SetConfig+0x2d4>)
 80066dc:	fba3 2302 	umull	r2, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066e8:	441c      	add	r4, r3
 80066ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	1891      	adds	r1, r2, r2
 8006702:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006704:	415b      	adcs	r3, r3
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800670c:	4641      	mov	r1, r8
 800670e:	1851      	adds	r1, r2, r1
 8006710:	6339      	str	r1, [r7, #48]	@ 0x30
 8006712:	4649      	mov	r1, r9
 8006714:	414b      	adcs	r3, r1
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006724:	4659      	mov	r1, fp
 8006726:	00cb      	lsls	r3, r1, #3
 8006728:	4651      	mov	r1, sl
 800672a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800672e:	4651      	mov	r1, sl
 8006730:	00ca      	lsls	r2, r1, #3
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	4603      	mov	r3, r0
 8006738:	4642      	mov	r2, r8
 800673a:	189b      	adds	r3, r3, r2
 800673c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006740:	464b      	mov	r3, r9
 8006742:	460a      	mov	r2, r1
 8006744:	eb42 0303 	adc.w	r3, r2, r3
 8006748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006758:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800675c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006760:	460b      	mov	r3, r1
 8006762:	18db      	adds	r3, r3, r3
 8006764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006766:	4613      	mov	r3, r2
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006776:	f7fa faa7 	bl	8000cc8 <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <UART_SetConfig+0x2d4>)
 8006780:	fba3 1302 	umull	r1, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	2164      	movs	r1, #100	@ 0x64
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	3332      	adds	r3, #50	@ 0x32
 8006792:	4a08      	ldr	r2, [pc, #32]	@ (80067b4 <UART_SetConfig+0x2d4>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	f003 0207 	and.w	r2, r3, #7
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4422      	add	r2, r4
 80067a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067a8:	e106      	b.n	80069b8 <UART_SetConfig+0x4d8>
 80067aa:	bf00      	nop
 80067ac:	40011000 	.word	0x40011000
 80067b0:	40011400 	.word	0x40011400
 80067b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067ca:	4642      	mov	r2, r8
 80067cc:	464b      	mov	r3, r9
 80067ce:	1891      	adds	r1, r2, r2
 80067d0:	6239      	str	r1, [r7, #32]
 80067d2:	415b      	adcs	r3, r3
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067da:	4641      	mov	r1, r8
 80067dc:	1854      	adds	r4, r2, r1
 80067de:	4649      	mov	r1, r9
 80067e0:	eb43 0501 	adc.w	r5, r3, r1
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	00eb      	lsls	r3, r5, #3
 80067ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067f2:	00e2      	lsls	r2, r4, #3
 80067f4:	4614      	mov	r4, r2
 80067f6:	461d      	mov	r5, r3
 80067f8:	4643      	mov	r3, r8
 80067fa:	18e3      	adds	r3, r4, r3
 80067fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006800:	464b      	mov	r3, r9
 8006802:	eb45 0303 	adc.w	r3, r5, r3
 8006806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006826:	4629      	mov	r1, r5
 8006828:	008b      	lsls	r3, r1, #2
 800682a:	4621      	mov	r1, r4
 800682c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006830:	4621      	mov	r1, r4
 8006832:	008a      	lsls	r2, r1, #2
 8006834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006838:	f7fa fa46 	bl	8000cc8 <__aeabi_uldivmod>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4b60      	ldr	r3, [pc, #384]	@ (80069c4 <UART_SetConfig+0x4e4>)
 8006842:	fba3 2302 	umull	r2, r3, r3, r2
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	011c      	lsls	r4, r3, #4
 800684a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684e:	2200      	movs	r2, #0
 8006850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006854:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800685c:	4642      	mov	r2, r8
 800685e:	464b      	mov	r3, r9
 8006860:	1891      	adds	r1, r2, r2
 8006862:	61b9      	str	r1, [r7, #24]
 8006864:	415b      	adcs	r3, r3
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800686c:	4641      	mov	r1, r8
 800686e:	1851      	adds	r1, r2, r1
 8006870:	6139      	str	r1, [r7, #16]
 8006872:	4649      	mov	r1, r9
 8006874:	414b      	adcs	r3, r1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006884:	4659      	mov	r1, fp
 8006886:	00cb      	lsls	r3, r1, #3
 8006888:	4651      	mov	r1, sl
 800688a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688e:	4651      	mov	r1, sl
 8006890:	00ca      	lsls	r2, r1, #3
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	4603      	mov	r3, r0
 8006898:	4642      	mov	r2, r8
 800689a:	189b      	adds	r3, r3, r2
 800689c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068a0:	464b      	mov	r3, r9
 80068a2:	460a      	mov	r2, r1
 80068a4:	eb42 0303 	adc.w	r3, r2, r3
 80068a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068c4:	4649      	mov	r1, r9
 80068c6:	008b      	lsls	r3, r1, #2
 80068c8:	4641      	mov	r1, r8
 80068ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ce:	4641      	mov	r1, r8
 80068d0:	008a      	lsls	r2, r1, #2
 80068d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068d6:	f7fa f9f7 	bl	8000cc8 <__aeabi_uldivmod>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	4b38      	ldr	r3, [pc, #224]	@ (80069c4 <UART_SetConfig+0x4e4>)
 80068e2:	fba3 2301 	umull	r2, r3, r3, r1
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	2264      	movs	r2, #100	@ 0x64
 80068ea:	fb02 f303 	mul.w	r3, r2, r3
 80068ee:	1acb      	subs	r3, r1, r3
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	3332      	adds	r3, #50	@ 0x32
 80068f4:	4a33      	ldr	r2, [pc, #204]	@ (80069c4 <UART_SetConfig+0x4e4>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006900:	441c      	add	r4, r3
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	673b      	str	r3, [r7, #112]	@ 0x70
 800690a:	677a      	str	r2, [r7, #116]	@ 0x74
 800690c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006910:	4642      	mov	r2, r8
 8006912:	464b      	mov	r3, r9
 8006914:	1891      	adds	r1, r2, r2
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	415b      	adcs	r3, r3
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006920:	4641      	mov	r1, r8
 8006922:	1851      	adds	r1, r2, r1
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	4649      	mov	r1, r9
 8006928:	414b      	adcs	r3, r1
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006938:	4659      	mov	r1, fp
 800693a:	00cb      	lsls	r3, r1, #3
 800693c:	4651      	mov	r1, sl
 800693e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006942:	4651      	mov	r1, sl
 8006944:	00ca      	lsls	r2, r1, #3
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	4603      	mov	r3, r0
 800694c:	4642      	mov	r2, r8
 800694e:	189b      	adds	r3, r3, r2
 8006950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006952:	464b      	mov	r3, r9
 8006954:	460a      	mov	r2, r1
 8006956:	eb42 0303 	adc.w	r3, r2, r3
 800695a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	663b      	str	r3, [r7, #96]	@ 0x60
 8006966:	667a      	str	r2, [r7, #100]	@ 0x64
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006974:	4649      	mov	r1, r9
 8006976:	008b      	lsls	r3, r1, #2
 8006978:	4641      	mov	r1, r8
 800697a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800697e:	4641      	mov	r1, r8
 8006980:	008a      	lsls	r2, r1, #2
 8006982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006986:	f7fa f99f 	bl	8000cc8 <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <UART_SetConfig+0x4e4>)
 8006990:	fba3 1302 	umull	r1, r3, r3, r2
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	2164      	movs	r1, #100	@ 0x64
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	3332      	adds	r3, #50	@ 0x32
 80069a2:	4a08      	ldr	r2, [pc, #32]	@ (80069c4 <UART_SetConfig+0x4e4>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f003 020f 	and.w	r2, r3, #15
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4422      	add	r2, r4
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069be:	46bd      	mov	sp, r7
 80069c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c4:	51eb851f 	.word	0x51eb851f

080069c8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af04      	add	r7, sp, #16
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	2301      	movs	r3, #1
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2301      	movs	r3, #1
 80069f2:	2200      	movs	r2, #0
 80069f4:	2178      	movs	r1, #120	@ 0x78
 80069f6:	4803      	ldr	r0, [pc, #12]	@ (8006a04 <ssd1306_WriteCommand+0x2c>)
 80069f8:	f7fd fb7c 	bl	80040f4 <HAL_I2C_Mem_Write>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000338 	.word	0x20000338

08006a08 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	9202      	str	r2, [sp, #8]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	2301      	movs	r3, #1
 8006a24:	2240      	movs	r2, #64	@ 0x40
 8006a26:	2178      	movs	r1, #120	@ 0x78
 8006a28:	4803      	ldr	r0, [pc, #12]	@ (8006a38 <ssd1306_WriteData+0x30>)
 8006a2a:	f7fd fb63 	bl	80040f4 <HAL_I2C_Mem_Write>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000338 	.word	0x20000338

08006a3c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006a40:	f7ff ffc2 	bl	80069c8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006a44:	2064      	movs	r0, #100	@ 0x64
 8006a46:	f7fc fb91 	bl	800316c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f000 fb22 	bl	8007094 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006a50:	2020      	movs	r0, #32
 8006a52:	f7ff ffc1 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7ff ffbe 	bl	80069d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006a5c:	20b0      	movs	r0, #176	@ 0xb0
 8006a5e:	f7ff ffbb 	bl	80069d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006a62:	20c8      	movs	r0, #200	@ 0xc8
 8006a64:	f7ff ffb8 	bl	80069d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f7ff ffb5 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7ff ffb2 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006a74:	2040      	movs	r0, #64	@ 0x40
 8006a76:	f7ff ffaf 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006a7a:	20ff      	movs	r0, #255	@ 0xff
 8006a7c:	f000 faf6 	bl	800706c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006a80:	20a1      	movs	r0, #161	@ 0xa1
 8006a82:	f7ff ffa9 	bl	80069d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006a86:	20a6      	movs	r0, #166	@ 0xa6
 8006a88:	f7ff ffa6 	bl	80069d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006a8c:	20a8      	movs	r0, #168	@ 0xa8
 8006a8e:	f7ff ffa3 	bl	80069d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006a92:	203f      	movs	r0, #63	@ 0x3f
 8006a94:	f7ff ffa0 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006a98:	20a4      	movs	r0, #164	@ 0xa4
 8006a9a:	f7ff ff9d 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006a9e:	20d3      	movs	r0, #211	@ 0xd3
 8006aa0:	f7ff ff9a 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f7ff ff97 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006aaa:	20d5      	movs	r0, #213	@ 0xd5
 8006aac:	f7ff ff94 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006ab0:	20f0      	movs	r0, #240	@ 0xf0
 8006ab2:	f7ff ff91 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006ab6:	20d9      	movs	r0, #217	@ 0xd9
 8006ab8:	f7ff ff8e 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006abc:	2022      	movs	r0, #34	@ 0x22
 8006abe:	f7ff ff8b 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006ac2:	20da      	movs	r0, #218	@ 0xda
 8006ac4:	f7ff ff88 	bl	80069d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006ac8:	2012      	movs	r0, #18
 8006aca:	f7ff ff85 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006ace:	20db      	movs	r0, #219	@ 0xdb
 8006ad0:	f7ff ff82 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006ad4:	2020      	movs	r0, #32
 8006ad6:	f7ff ff7f 	bl	80069d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006ada:	208d      	movs	r0, #141	@ 0x8d
 8006adc:	f7ff ff7c 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006ae0:	2014      	movs	r0, #20
 8006ae2:	f7ff ff79 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	f000 fad4 	bl	8007094 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006aec:	2000      	movs	r0, #0
 8006aee:	f000 f80f 	bl	8006b10 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006af2:	f000 f825 	bl	8006b40 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006af6:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <ssd1306_Init+0xd0>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006afc:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <ssd1306_Init+0xd0>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006b02:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <ssd1306_Init+0xd0>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	711a      	strb	r2, [r3, #4]
}
 8006b08:	bf00      	nop
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000086c 	.word	0x2000086c

08006b10 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <ssd1306_Fill+0x14>
 8006b20:	2300      	movs	r3, #0
 8006b22:	e000      	b.n	8006b26 <ssd1306_Fill+0x16>
 8006b24:	23ff      	movs	r3, #255	@ 0xff
 8006b26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4803      	ldr	r0, [pc, #12]	@ (8006b3c <ssd1306_Fill+0x2c>)
 8006b2e:	f001 faae 	bl	800808e <memset>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2000046c 	.word	0x2000046c

08006b40 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006b46:	2300      	movs	r3, #0
 8006b48:	71fb      	strb	r3, [r7, #7]
 8006b4a:	e016      	b.n	8006b7a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	3b50      	subs	r3, #80	@ 0x50
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff ff40 	bl	80069d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006b58:	2000      	movs	r0, #0
 8006b5a:	f7ff ff3d 	bl	80069d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7ff ff3a 	bl	80069d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4a08      	ldr	r2, [pc, #32]	@ (8006b8c <ssd1306_UpdateScreen+0x4c>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	2180      	movs	r1, #128	@ 0x80
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ff4a 	bl	8006a08 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	3301      	adds	r3, #1
 8006b78:	71fb      	strb	r3, [r7, #7]
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d9e5      	bls.n	8006b4c <ssd1306_UpdateScreen+0xc>
    }
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	2000046c 	.word	0x2000046c

08006b90 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	71bb      	strb	r3, [r7, #6]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	db3d      	blt.n	8006c26 <ssd1306_DrawPixel+0x96>
 8006baa:	79bb      	ldrb	r3, [r7, #6]
 8006bac:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bae:	d83a      	bhi.n	8006c26 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006bb0:	797b      	ldrb	r3, [r7, #5]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d11a      	bne.n	8006bec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006bb6:	79fa      	ldrb	r2, [r7, #7]
 8006bb8:	79bb      	ldrb	r3, [r7, #6]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	b2d8      	uxtb	r0, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	01db      	lsls	r3, r3, #7
 8006bc2:	4413      	add	r3, r2
 8006bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c34 <ssd1306_DrawPixel+0xa4>)
 8006bc6:	5cd3      	ldrb	r3, [r2, r3]
 8006bc8:	b25a      	sxtb	r2, r3
 8006bca:	79bb      	ldrb	r3, [r7, #6]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	b259      	sxtb	r1, r3
 8006bdc:	79fa      	ldrb	r2, [r7, #7]
 8006bde:	4603      	mov	r3, r0
 8006be0:	01db      	lsls	r3, r3, #7
 8006be2:	4413      	add	r3, r2
 8006be4:	b2c9      	uxtb	r1, r1
 8006be6:	4a13      	ldr	r2, [pc, #76]	@ (8006c34 <ssd1306_DrawPixel+0xa4>)
 8006be8:	54d1      	strb	r1, [r2, r3]
 8006bea:	e01d      	b.n	8006c28 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006bec:	79fa      	ldrb	r2, [r7, #7]
 8006bee:	79bb      	ldrb	r3, [r7, #6]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	b2d8      	uxtb	r0, r3
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	01db      	lsls	r3, r3, #7
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <ssd1306_DrawPixel+0xa4>)
 8006bfc:	5cd3      	ldrb	r3, [r2, r3]
 8006bfe:	b25a      	sxtb	r2, r3
 8006c00:	79bb      	ldrb	r3, [r7, #6]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2101      	movs	r1, #1
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	4013      	ands	r3, r2
 8006c14:	b259      	sxtb	r1, r3
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	4603      	mov	r3, r0
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	b2c9      	uxtb	r1, r1
 8006c20:	4a04      	ldr	r2, [pc, #16]	@ (8006c34 <ssd1306_DrawPixel+0xa4>)
 8006c22:	54d1      	strb	r1, [r2, r3]
 8006c24:	e000      	b.n	8006c28 <ssd1306_DrawPixel+0x98>
        return;
 8006c26:	bf00      	nop
    }
}
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	2000046c 	.word	0x2000046c

08006c38 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b089      	sub	sp, #36	@ 0x24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4638      	mov	r0, r7
 8006c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006c46:	4623      	mov	r3, r4
 8006c48:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b1f      	cmp	r3, #31
 8006c4e:	d902      	bls.n	8006c56 <ssd1306_WriteChar+0x1e>
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b7e      	cmp	r3, #126	@ 0x7e
 8006c54:	d901      	bls.n	8006c5a <ssd1306_WriteChar+0x22>
        return 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e077      	b.n	8006d4a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	783b      	ldrb	r3, [r7, #0]
 8006c62:	4413      	add	r3, r2
 8006c64:	2b80      	cmp	r3, #128	@ 0x80
 8006c66:	dc06      	bgt.n	8006c76 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8006c68:	4b3a      	ldr	r3, [pc, #232]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	787b      	ldrb	r3, [r7, #1]
 8006c70:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	dd01      	ble.n	8006c7a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e067      	b.n	8006d4a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e04e      	b.n	8006d1e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	3b20      	subs	r3, #32
 8006c86:	7879      	ldrb	r1, [r7, #1]
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	440b      	add	r3, r1
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	e036      	b.n	8006d0e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006cb0:	4b28      	ldr	r3, [pc, #160]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	b2d8      	uxtb	r0, r3
 8006cbe:	4b25      	ldr	r3, [pc, #148]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f7ff ff5d 	bl	8006b90 <ssd1306_DrawPixel>
 8006cd6:	e017      	b.n	8006d08 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b2d8      	uxtb	r0, r3
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006ce8:	885b      	ldrh	r3, [r3, #2]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	b2d9      	uxtb	r1, r3
 8006cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2301      	moveq	r3, #1
 8006cfe:	2300      	movne	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	f7ff ff44 	bl	8006b90 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	783b      	ldrb	r3, [r7, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d3c3      	bcc.n	8006ca0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	787b      	ldrb	r3, [r7, #1]
 8006d20:	461a      	mov	r2, r3
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d3ab      	bcc.n	8006c80 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	d005      	beq.n	8006d3e <ssd1306_WriteChar+0x106>
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	7bfa      	ldrb	r2, [r7, #15]
 8006d36:	3a20      	subs	r2, #32
 8006d38:	440a      	add	r2, r1
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	e000      	b.n	8006d40 <ssd1306_WriteChar+0x108>
 8006d3e:	783a      	ldrb	r2, [r7, #0]
 8006d40:	4413      	add	r3, r2
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	4b03      	ldr	r3, [pc, #12]	@ (8006d54 <ssd1306_WriteChar+0x11c>)
 8006d46:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3724      	adds	r7, #36	@ 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd90      	pop	{r4, r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2000086c 	.word	0x2000086c

08006d58 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	4638      	mov	r0, r7
 8006d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006d66:	e013      	b.n	8006d90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	7818      	ldrb	r0, [r3, #0]
 8006d6c:	7e3b      	ldrb	r3, [r7, #24]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	463b      	mov	r3, r7
 8006d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d74:	f7ff ff60 	bl	8006c38 <ssd1306_WriteChar>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d002      	beq.n	8006d8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	e008      	b.n	8006d9c <ssd1306_WriteString+0x44>
        }
        str++;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e7      	bne.n	8006d68 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	460a      	mov	r2, r1
 8006dae:	71fb      	strb	r3, [r7, #7]
 8006db0:	4613      	mov	r3, r2
 8006db2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <ssd1306_SetCursor+0x2c>)
 8006dba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006dbc:	79bb      	ldrb	r3, [r7, #6]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <ssd1306_SetCursor+0x2c>)
 8006dc2:	805a      	strh	r2, [r3, #2]
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	2000086c 	.word	0x2000086c

08006dd4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b089      	sub	sp, #36	@ 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4623      	mov	r3, r4
 8006de4:	71fb      	strb	r3, [r7, #7]
 8006de6:	4603      	mov	r3, r0
 8006de8:	71bb      	strb	r3, [r7, #6]
 8006dea:	460b      	mov	r3, r1
 8006dec:	717b      	strb	r3, [r7, #5]
 8006dee:	4613      	mov	r3, r2
 8006df0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8006df2:	797a      	ldrb	r2, [r7, #5]
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	425b      	neglt	r3, r3
 8006dfe:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8006e00:	793a      	ldrb	r2, [r7, #4]
 8006e02:	79bb      	ldrb	r3, [r7, #6]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	425b      	neglt	r3, r3
 8006e0c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8006e0e:	79fa      	ldrb	r2, [r7, #7]
 8006e10:	797b      	ldrb	r3, [r7, #5]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d201      	bcs.n	8006e1a <ssd1306_Line+0x46>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e001      	b.n	8006e1e <ssd1306_Line+0x4a>
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8006e20:	79ba      	ldrb	r2, [r7, #6]
 8006e22:	793b      	ldrb	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d201      	bcs.n	8006e2c <ssd1306_Line+0x58>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e001      	b.n	8006e30 <ssd1306_Line+0x5c>
 8006e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e30:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8006e3a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006e3e:	7939      	ldrb	r1, [r7, #4]
 8006e40:	797b      	ldrb	r3, [r7, #5]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fea4 	bl	8006b90 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006e48:	e024      	b.n	8006e94 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8006e4a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006e4e:	79b9      	ldrb	r1, [r7, #6]
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fe9c 	bl	8006b90 <ssd1306_DrawPixel>
        error2 = error * 2;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	425b      	negs	r3, r3
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	dd08      	ble.n	8006e7a <ssd1306_Line+0xa6>
            error -= deltaY;
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	4413      	add	r3, r2
 8006e78:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	da08      	bge.n	8006e94 <ssd1306_Line+0xc0>
            error += deltaX;
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	4413      	add	r3, r2
 8006e88:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	79bb      	ldrb	r3, [r7, #6]
 8006e90:	4413      	add	r3, r2
 8006e92:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006e94:	79fa      	ldrb	r2, [r7, #7]
 8006e96:	797b      	ldrb	r3, [r7, #5]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d1d6      	bne.n	8006e4a <ssd1306_Line+0x76>
 8006e9c:	79ba      	ldrb	r2, [r7, #6]
 8006e9e:	793b      	ldrb	r3, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d1d2      	bne.n	8006e4a <ssd1306_Line+0x76>
        }
    }
    return;
 8006ea4:	bf00      	nop
}
 8006ea6:	3724      	adds	r7, #36	@ 0x24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd90      	pop	{r4, r7, pc}

08006eac <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	71fb      	strb	r3, [r7, #7]
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	71bb      	strb	r3, [r7, #6]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	717b      	strb	r3, [r7, #5]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8006eca:	79bc      	ldrb	r4, [r7, #6]
 8006ecc:	797a      	ldrb	r2, [r7, #5]
 8006ece:	79b9      	ldrb	r1, [r7, #6]
 8006ed0:	79f8      	ldrb	r0, [r7, #7]
 8006ed2:	7e3b      	ldrb	r3, [r7, #24]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	f7ff ff7c 	bl	8006dd4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8006edc:	793c      	ldrb	r4, [r7, #4]
 8006ede:	797a      	ldrb	r2, [r7, #5]
 8006ee0:	79b9      	ldrb	r1, [r7, #6]
 8006ee2:	7978      	ldrb	r0, [r7, #5]
 8006ee4:	7e3b      	ldrb	r3, [r7, #24]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4623      	mov	r3, r4
 8006eea:	f7ff ff73 	bl	8006dd4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8006eee:	793c      	ldrb	r4, [r7, #4]
 8006ef0:	79fa      	ldrb	r2, [r7, #7]
 8006ef2:	7939      	ldrb	r1, [r7, #4]
 8006ef4:	7978      	ldrb	r0, [r7, #5]
 8006ef6:	7e3b      	ldrb	r3, [r7, #24]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	4623      	mov	r3, r4
 8006efc:	f7ff ff6a 	bl	8006dd4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8006f00:	79bc      	ldrb	r4, [r7, #6]
 8006f02:	79fa      	ldrb	r2, [r7, #7]
 8006f04:	7939      	ldrb	r1, [r7, #4]
 8006f06:	79f8      	ldrb	r0, [r7, #7]
 8006f08:	7e3b      	ldrb	r3, [r7, #24]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	f7ff ff61 	bl	8006dd4 <ssd1306_Line>

    return;
 8006f12:	bf00      	nop
}
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd90      	pop	{r4, r7, pc}

08006f1a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8006f1a:	b590      	push	{r4, r7, lr}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	4604      	mov	r4, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	461a      	mov	r2, r3
 8006f28:	4623      	mov	r3, r4
 8006f2a:	71fb      	strb	r3, [r7, #7]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	71bb      	strb	r3, [r7, #6]
 8006f30:	460b      	mov	r3, r1
 8006f32:	717b      	strb	r3, [r7, #5]
 8006f34:	4613      	mov	r3, r2
 8006f36:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	797b      	ldrb	r3, [r7, #5]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bf28      	it	cs
 8006f40:	4613      	movcs	r3, r2
 8006f42:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8006f44:	797a      	ldrb	r2, [r7, #5]
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bf38      	it	cc
 8006f4c:	4613      	movcc	r3, r2
 8006f4e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8006f50:	79ba      	ldrb	r2, [r7, #6]
 8006f52:	793b      	ldrb	r3, [r7, #4]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	bf28      	it	cs
 8006f58:	4613      	movcs	r3, r2
 8006f5a:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8006f5c:	793a      	ldrb	r2, [r7, #4]
 8006f5e:	79bb      	ldrb	r3, [r7, #6]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bf38      	it	cc
 8006f64:	4613      	movcc	r3, r2
 8006f66:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e017      	b.n	8006f9e <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8006f6e:	7b7b      	ldrb	r3, [r7, #13]
 8006f70:	73bb      	strb	r3, [r7, #14]
 8006f72:	e009      	b.n	8006f88 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8006f74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006f78:	7bf9      	ldrb	r1, [r7, #15]
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fe07 	bl	8006b90 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	3301      	adds	r3, #1
 8006f86:	73bb      	strb	r3, [r7, #14]
 8006f88:	7bba      	ldrb	r2, [r7, #14]
 8006f8a:	7b3b      	ldrb	r3, [r7, #12]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d803      	bhi.n	8006f98 <ssd1306_FillRectangle+0x7e>
 8006f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	daed      	bge.n	8006f74 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
 8006f9e:	7bfa      	ldrb	r2, [r7, #15]
 8006fa0:	7abb      	ldrb	r3, [r7, #10]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d803      	bhi.n	8006fae <ssd1306_FillRectangle+0x94>
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	2b3f      	cmp	r3, #63	@ 0x3f
 8006faa:	d9e0      	bls.n	8006f6e <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
}
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd90      	pop	{r4, r7, pc}

08006fb6 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	603a      	str	r2, [r7, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	71fb      	strb	r3, [r7, #7]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	71bb      	strb	r3, [r7, #6]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8006fcc:	797b      	ldrb	r3, [r7, #5]
 8006fce:	3307      	adds	r3, #7
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da00      	bge.n	8006fd6 <ssd1306_DrawBitmap+0x20>
 8006fd4:	3307      	adds	r3, #7
 8006fd6:	10db      	asrs	r3, r3, #3
 8006fd8:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	db3e      	blt.n	8007064 <ssd1306_DrawBitmap+0xae>
 8006fe6:	79bb      	ldrb	r3, [r7, #6]
 8006fe8:	2b3f      	cmp	r3, #63	@ 0x3f
 8006fea:	d83b      	bhi.n	8007064 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8006fec:	2300      	movs	r3, #0
 8006fee:	73bb      	strb	r3, [r7, #14]
 8006ff0:	e033      	b.n	800705a <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	737b      	strb	r3, [r7, #13]
 8006ff6:	e026      	b.n	8007046 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8006ff8:	7b7b      	ldrb	r3, [r7, #13]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
 8007008:	e00d      	b.n	8007026 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007010:	fb02 f303 	mul.w	r3, r2, r3
 8007014:	7b7a      	ldrb	r2, [r7, #13]
 8007016:	08d2      	lsrs	r2, r2, #3
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	4413      	add	r3, r2
 800701c:	461a      	mov	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	4413      	add	r3, r2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8007026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da08      	bge.n	8007040 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800702e:	79fa      	ldrb	r2, [r7, #7]
 8007030:	7b7b      	ldrb	r3, [r7, #13]
 8007032:	4413      	add	r3, r2
 8007034:	b2db      	uxtb	r3, r3
 8007036:	7f3a      	ldrb	r2, [r7, #28]
 8007038:	79b9      	ldrb	r1, [r7, #6]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fda8 	bl	8006b90 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8007040:	7b7b      	ldrb	r3, [r7, #13]
 8007042:	3301      	adds	r3, #1
 8007044:	737b      	strb	r3, [r7, #13]
 8007046:	7b7a      	ldrb	r2, [r7, #13]
 8007048:	797b      	ldrb	r3, [r7, #5]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3d4      	bcc.n	8006ff8 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	3301      	adds	r3, #1
 8007052:	73bb      	strb	r3, [r7, #14]
 8007054:	79bb      	ldrb	r3, [r7, #6]
 8007056:	3301      	adds	r3, #1
 8007058:	71bb      	strb	r3, [r7, #6]
 800705a:	7bba      	ldrb	r2, [r7, #14]
 800705c:	7e3b      	ldrb	r3, [r7, #24]
 800705e:	429a      	cmp	r2, r3
 8007060:	d3c7      	bcc.n	8006ff2 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8007062:	e000      	b.n	8007066 <ssd1306_DrawBitmap+0xb0>
        return;
 8007064:	bf00      	nop
}
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8007076:	2381      	movs	r3, #129	@ 0x81
 8007078:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff fcab 	bl	80069d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fca7 	bl	80069d8 <ssd1306_WriteCommand>
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80070a4:	23af      	movs	r3, #175	@ 0xaf
 80070a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <ssd1306_SetDisplayOn+0x38>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	715a      	strb	r2, [r3, #5]
 80070ae:	e004      	b.n	80070ba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80070b0:	23ae      	movs	r3, #174	@ 0xae
 80070b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80070b4:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <ssd1306_SetDisplayOn+0x38>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff fc8b 	bl	80069d8 <ssd1306_WriteCommand>
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	2000086c 	.word	0x2000086c

080070d0 <__cvt>:
 80070d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	ec57 6b10 	vmov	r6, r7, d0
 80070d8:	2f00      	cmp	r7, #0
 80070da:	460c      	mov	r4, r1
 80070dc:	4619      	mov	r1, r3
 80070de:	463b      	mov	r3, r7
 80070e0:	bfbb      	ittet	lt
 80070e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80070e6:	461f      	movlt	r7, r3
 80070e8:	2300      	movge	r3, #0
 80070ea:	232d      	movlt	r3, #45	@ 0x2d
 80070ec:	700b      	strb	r3, [r1, #0]
 80070ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80070f4:	4691      	mov	r9, r2
 80070f6:	f023 0820 	bic.w	r8, r3, #32
 80070fa:	bfbc      	itt	lt
 80070fc:	4632      	movlt	r2, r6
 80070fe:	4616      	movlt	r6, r2
 8007100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007104:	d005      	beq.n	8007112 <__cvt+0x42>
 8007106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800710a:	d100      	bne.n	800710e <__cvt+0x3e>
 800710c:	3401      	adds	r4, #1
 800710e:	2102      	movs	r1, #2
 8007110:	e000      	b.n	8007114 <__cvt+0x44>
 8007112:	2103      	movs	r1, #3
 8007114:	ab03      	add	r3, sp, #12
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	ab02      	add	r3, sp, #8
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	ec47 6b10 	vmov	d0, r6, r7
 8007120:	4653      	mov	r3, sl
 8007122:	4622      	mov	r2, r4
 8007124:	f001 f8d0 	bl	80082c8 <_dtoa_r>
 8007128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800712c:	4605      	mov	r5, r0
 800712e:	d119      	bne.n	8007164 <__cvt+0x94>
 8007130:	f019 0f01 	tst.w	r9, #1
 8007134:	d00e      	beq.n	8007154 <__cvt+0x84>
 8007136:	eb00 0904 	add.w	r9, r0, r4
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8007146:	b108      	cbz	r0, 800714c <__cvt+0x7c>
 8007148:	f8cd 900c 	str.w	r9, [sp, #12]
 800714c:	2230      	movs	r2, #48	@ 0x30
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	454b      	cmp	r3, r9
 8007152:	d31e      	bcc.n	8007192 <__cvt+0xc2>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007158:	1b5b      	subs	r3, r3, r5
 800715a:	4628      	mov	r0, r5
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	b004      	add	sp, #16
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007168:	eb00 0904 	add.w	r9, r0, r4
 800716c:	d1e5      	bne.n	800713a <__cvt+0x6a>
 800716e:	7803      	ldrb	r3, [r0, #0]
 8007170:	2b30      	cmp	r3, #48	@ 0x30
 8007172:	d10a      	bne.n	800718a <__cvt+0xba>
 8007174:	2200      	movs	r2, #0
 8007176:	2300      	movs	r3, #0
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fcc4 	bl	8000b08 <__aeabi_dcmpeq>
 8007180:	b918      	cbnz	r0, 800718a <__cvt+0xba>
 8007182:	f1c4 0401 	rsb	r4, r4, #1
 8007186:	f8ca 4000 	str.w	r4, [sl]
 800718a:	f8da 3000 	ldr.w	r3, [sl]
 800718e:	4499      	add	r9, r3
 8007190:	e7d3      	b.n	800713a <__cvt+0x6a>
 8007192:	1c59      	adds	r1, r3, #1
 8007194:	9103      	str	r1, [sp, #12]
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	e7d9      	b.n	800714e <__cvt+0x7e>

0800719a <__exponent>:
 800719a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800719c:	2900      	cmp	r1, #0
 800719e:	bfba      	itte	lt
 80071a0:	4249      	neglt	r1, r1
 80071a2:	232d      	movlt	r3, #45	@ 0x2d
 80071a4:	232b      	movge	r3, #43	@ 0x2b
 80071a6:	2909      	cmp	r1, #9
 80071a8:	7002      	strb	r2, [r0, #0]
 80071aa:	7043      	strb	r3, [r0, #1]
 80071ac:	dd29      	ble.n	8007202 <__exponent+0x68>
 80071ae:	f10d 0307 	add.w	r3, sp, #7
 80071b2:	461d      	mov	r5, r3
 80071b4:	270a      	movs	r7, #10
 80071b6:	461a      	mov	r2, r3
 80071b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80071bc:	fb07 1416 	mls	r4, r7, r6, r1
 80071c0:	3430      	adds	r4, #48	@ 0x30
 80071c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071c6:	460c      	mov	r4, r1
 80071c8:	2c63      	cmp	r4, #99	@ 0x63
 80071ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80071ce:	4631      	mov	r1, r6
 80071d0:	dcf1      	bgt.n	80071b6 <__exponent+0x1c>
 80071d2:	3130      	adds	r1, #48	@ 0x30
 80071d4:	1e94      	subs	r4, r2, #2
 80071d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071da:	1c41      	adds	r1, r0, #1
 80071dc:	4623      	mov	r3, r4
 80071de:	42ab      	cmp	r3, r5
 80071e0:	d30a      	bcc.n	80071f8 <__exponent+0x5e>
 80071e2:	f10d 0309 	add.w	r3, sp, #9
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	42ac      	cmp	r4, r5
 80071ea:	bf88      	it	hi
 80071ec:	2300      	movhi	r3, #0
 80071ee:	3302      	adds	r3, #2
 80071f0:	4403      	add	r3, r0
 80071f2:	1a18      	subs	r0, r3, r0
 80071f4:	b003      	add	sp, #12
 80071f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007200:	e7ed      	b.n	80071de <__exponent+0x44>
 8007202:	2330      	movs	r3, #48	@ 0x30
 8007204:	3130      	adds	r1, #48	@ 0x30
 8007206:	7083      	strb	r3, [r0, #2]
 8007208:	70c1      	strb	r1, [r0, #3]
 800720a:	1d03      	adds	r3, r0, #4
 800720c:	e7f1      	b.n	80071f2 <__exponent+0x58>
	...

08007210 <_printf_float>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	b08d      	sub	sp, #52	@ 0x34
 8007216:	460c      	mov	r4, r1
 8007218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800721c:	4616      	mov	r6, r2
 800721e:	461f      	mov	r7, r3
 8007220:	4605      	mov	r5, r0
 8007222:	f000 ff3d 	bl	80080a0 <_localeconv_r>
 8007226:	6803      	ldr	r3, [r0, #0]
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	4618      	mov	r0, r3
 800722c:	f7f9 f840 	bl	80002b0 <strlen>
 8007230:	2300      	movs	r3, #0
 8007232:	930a      	str	r3, [sp, #40]	@ 0x28
 8007234:	f8d8 3000 	ldr.w	r3, [r8]
 8007238:	9005      	str	r0, [sp, #20]
 800723a:	3307      	adds	r3, #7
 800723c:	f023 0307 	bic.w	r3, r3, #7
 8007240:	f103 0208 	add.w	r2, r3, #8
 8007244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007248:	f8d4 b000 	ldr.w	fp, [r4]
 800724c:	f8c8 2000 	str.w	r2, [r8]
 8007250:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	f8cd 8018 	str.w	r8, [sp, #24]
 800725e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007266:	4b9c      	ldr	r3, [pc, #624]	@ (80074d8 <_printf_float+0x2c8>)
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	f7f9 fc7e 	bl	8000b6c <__aeabi_dcmpun>
 8007270:	bb70      	cbnz	r0, 80072d0 <_printf_float+0xc0>
 8007272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007276:	4b98      	ldr	r3, [pc, #608]	@ (80074d8 <_printf_float+0x2c8>)
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	f7f9 fc58 	bl	8000b30 <__aeabi_dcmple>
 8007280:	bb30      	cbnz	r0, 80072d0 <_printf_float+0xc0>
 8007282:	2200      	movs	r2, #0
 8007284:	2300      	movs	r3, #0
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f9 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800728e:	b110      	cbz	r0, 8007296 <_printf_float+0x86>
 8007290:	232d      	movs	r3, #45	@ 0x2d
 8007292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007296:	4a91      	ldr	r2, [pc, #580]	@ (80074dc <_printf_float+0x2cc>)
 8007298:	4b91      	ldr	r3, [pc, #580]	@ (80074e0 <_printf_float+0x2d0>)
 800729a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800729e:	bf94      	ite	ls
 80072a0:	4690      	movls	r8, r2
 80072a2:	4698      	movhi	r8, r3
 80072a4:	2303      	movs	r3, #3
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	f02b 0304 	bic.w	r3, fp, #4
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	9700      	str	r7, [sp, #0]
 80072b4:	4633      	mov	r3, r6
 80072b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f9d2 	bl	8007664 <_printf_common>
 80072c0:	3001      	adds	r0, #1
 80072c2:	f040 808d 	bne.w	80073e0 <_printf_float+0x1d0>
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	b00d      	add	sp, #52	@ 0x34
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	4649      	mov	r1, r9
 80072d8:	f7f9 fc48 	bl	8000b6c <__aeabi_dcmpun>
 80072dc:	b140      	cbz	r0, 80072f0 <_printf_float+0xe0>
 80072de:	464b      	mov	r3, r9
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfbc      	itt	lt
 80072e4:	232d      	movlt	r3, #45	@ 0x2d
 80072e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072ea:	4a7e      	ldr	r2, [pc, #504]	@ (80074e4 <_printf_float+0x2d4>)
 80072ec:	4b7e      	ldr	r3, [pc, #504]	@ (80074e8 <_printf_float+0x2d8>)
 80072ee:	e7d4      	b.n	800729a <_printf_float+0x8a>
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80072f6:	9206      	str	r2, [sp, #24]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	d13b      	bne.n	8007374 <_printf_float+0x164>
 80072fc:	2306      	movs	r3, #6
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007304:	2300      	movs	r3, #0
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	9303      	str	r3, [sp, #12]
 800730a:	ab0a      	add	r3, sp, #40	@ 0x28
 800730c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007310:	ab09      	add	r3, sp, #36	@ 0x24
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	ec49 8b10 	vmov	d0, r8, r9
 800731a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800731e:	4628      	mov	r0, r5
 8007320:	f7ff fed6 	bl	80070d0 <__cvt>
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007328:	2b47      	cmp	r3, #71	@ 0x47
 800732a:	4680      	mov	r8, r0
 800732c:	d129      	bne.n	8007382 <_printf_float+0x172>
 800732e:	1cc8      	adds	r0, r1, #3
 8007330:	db02      	blt.n	8007338 <_printf_float+0x128>
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	4299      	cmp	r1, r3
 8007336:	dd41      	ble.n	80073bc <_printf_float+0x1ac>
 8007338:	f1aa 0a02 	sub.w	sl, sl, #2
 800733c:	fa5f fa8a 	uxtb.w	sl, sl
 8007340:	3901      	subs	r1, #1
 8007342:	4652      	mov	r2, sl
 8007344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007348:	9109      	str	r1, [sp, #36]	@ 0x24
 800734a:	f7ff ff26 	bl	800719a <__exponent>
 800734e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007350:	1813      	adds	r3, r2, r0
 8007352:	2a01      	cmp	r2, #1
 8007354:	4681      	mov	r9, r0
 8007356:	6123      	str	r3, [r4, #16]
 8007358:	dc02      	bgt.n	8007360 <_printf_float+0x150>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	07d2      	lsls	r2, r2, #31
 800735e:	d501      	bpl.n	8007364 <_printf_float+0x154>
 8007360:	3301      	adds	r3, #1
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0a2      	beq.n	80072b2 <_printf_float+0xa2>
 800736c:	232d      	movs	r3, #45	@ 0x2d
 800736e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007372:	e79e      	b.n	80072b2 <_printf_float+0xa2>
 8007374:	9a06      	ldr	r2, [sp, #24]
 8007376:	2a47      	cmp	r2, #71	@ 0x47
 8007378:	d1c2      	bne.n	8007300 <_printf_float+0xf0>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1c0      	bne.n	8007300 <_printf_float+0xf0>
 800737e:	2301      	movs	r3, #1
 8007380:	e7bd      	b.n	80072fe <_printf_float+0xee>
 8007382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007386:	d9db      	bls.n	8007340 <_printf_float+0x130>
 8007388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800738c:	d118      	bne.n	80073c0 <_printf_float+0x1b0>
 800738e:	2900      	cmp	r1, #0
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	dd0b      	ble.n	80073ac <_printf_float+0x19c>
 8007394:	6121      	str	r1, [r4, #16]
 8007396:	b913      	cbnz	r3, 800739e <_printf_float+0x18e>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	07d0      	lsls	r0, r2, #31
 800739c:	d502      	bpl.n	80073a4 <_printf_float+0x194>
 800739e:	3301      	adds	r3, #1
 80073a0:	440b      	add	r3, r1
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	e7db      	b.n	8007364 <_printf_float+0x154>
 80073ac:	b913      	cbnz	r3, 80073b4 <_printf_float+0x1a4>
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	07d2      	lsls	r2, r2, #31
 80073b2:	d501      	bpl.n	80073b8 <_printf_float+0x1a8>
 80073b4:	3302      	adds	r3, #2
 80073b6:	e7f4      	b.n	80073a2 <_printf_float+0x192>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e7f2      	b.n	80073a2 <_printf_float+0x192>
 80073bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073c2:	4299      	cmp	r1, r3
 80073c4:	db05      	blt.n	80073d2 <_printf_float+0x1c2>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	6121      	str	r1, [r4, #16]
 80073ca:	07d8      	lsls	r0, r3, #31
 80073cc:	d5ea      	bpl.n	80073a4 <_printf_float+0x194>
 80073ce:	1c4b      	adds	r3, r1, #1
 80073d0:	e7e7      	b.n	80073a2 <_printf_float+0x192>
 80073d2:	2900      	cmp	r1, #0
 80073d4:	bfd4      	ite	le
 80073d6:	f1c1 0202 	rsble	r2, r1, #2
 80073da:	2201      	movgt	r2, #1
 80073dc:	4413      	add	r3, r2
 80073de:	e7e0      	b.n	80073a2 <_printf_float+0x192>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	055a      	lsls	r2, r3, #21
 80073e4:	d407      	bmi.n	80073f6 <_printf_float+0x1e6>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	4642      	mov	r2, r8
 80073ea:	4631      	mov	r1, r6
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b8      	blx	r7
 80073f0:	3001      	adds	r0, #1
 80073f2:	d12b      	bne.n	800744c <_printf_float+0x23c>
 80073f4:	e767      	b.n	80072c6 <_printf_float+0xb6>
 80073f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073fa:	f240 80dd 	bls.w	80075b8 <_printf_float+0x3a8>
 80073fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007402:	2200      	movs	r2, #0
 8007404:	2300      	movs	r3, #0
 8007406:	f7f9 fb7f 	bl	8000b08 <__aeabi_dcmpeq>
 800740a:	2800      	cmp	r0, #0
 800740c:	d033      	beq.n	8007476 <_printf_float+0x266>
 800740e:	4a37      	ldr	r2, [pc, #220]	@ (80074ec <_printf_float+0x2dc>)
 8007410:	2301      	movs	r3, #1
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f af54 	beq.w	80072c6 <_printf_float+0xb6>
 800741e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007422:	4543      	cmp	r3, r8
 8007424:	db02      	blt.n	800742c <_printf_float+0x21c>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	07d8      	lsls	r0, r3, #31
 800742a:	d50f      	bpl.n	800744c <_printf_float+0x23c>
 800742c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	f43f af45 	beq.w	80072c6 <_printf_float+0xb6>
 800743c:	f04f 0900 	mov.w	r9, #0
 8007440:	f108 38ff 	add.w	r8, r8, #4294967295
 8007444:	f104 0a1a 	add.w	sl, r4, #26
 8007448:	45c8      	cmp	r8, r9
 800744a:	dc09      	bgt.n	8007460 <_printf_float+0x250>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	079b      	lsls	r3, r3, #30
 8007450:	f100 8103 	bmi.w	800765a <_printf_float+0x44a>
 8007454:	68e0      	ldr	r0, [r4, #12]
 8007456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007458:	4298      	cmp	r0, r3
 800745a:	bfb8      	it	lt
 800745c:	4618      	movlt	r0, r3
 800745e:	e734      	b.n	80072ca <_printf_float+0xba>
 8007460:	2301      	movs	r3, #1
 8007462:	4652      	mov	r2, sl
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f af2b 	beq.w	80072c6 <_printf_float+0xb6>
 8007470:	f109 0901 	add.w	r9, r9, #1
 8007474:	e7e8      	b.n	8007448 <_printf_float+0x238>
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	dc39      	bgt.n	80074f0 <_printf_float+0x2e0>
 800747c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ec <_printf_float+0x2dc>)
 800747e:	2301      	movs	r3, #1
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	f43f af1d 	beq.w	80072c6 <_printf_float+0xb6>
 800748c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007490:	ea59 0303 	orrs.w	r3, r9, r3
 8007494:	d102      	bne.n	800749c <_printf_float+0x28c>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	07d9      	lsls	r1, r3, #31
 800749a:	d5d7      	bpl.n	800744c <_printf_float+0x23c>
 800749c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f af0d 	beq.w	80072c6 <_printf_float+0xb6>
 80074ac:	f04f 0a00 	mov.w	sl, #0
 80074b0:	f104 0b1a 	add.w	fp, r4, #26
 80074b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b6:	425b      	negs	r3, r3
 80074b8:	4553      	cmp	r3, sl
 80074ba:	dc01      	bgt.n	80074c0 <_printf_float+0x2b0>
 80074bc:	464b      	mov	r3, r9
 80074be:	e793      	b.n	80073e8 <_printf_float+0x1d8>
 80074c0:	2301      	movs	r3, #1
 80074c2:	465a      	mov	r2, fp
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	f43f aefb 	beq.w	80072c6 <_printf_float+0xb6>
 80074d0:	f10a 0a01 	add.w	sl, sl, #1
 80074d4:	e7ee      	b.n	80074b4 <_printf_float+0x2a4>
 80074d6:	bf00      	nop
 80074d8:	7fefffff 	.word	0x7fefffff
 80074dc:	0800ceac 	.word	0x0800ceac
 80074e0:	0800ceb0 	.word	0x0800ceb0
 80074e4:	0800ceb4 	.word	0x0800ceb4
 80074e8:	0800ceb8 	.word	0x0800ceb8
 80074ec:	0800cebc 	.word	0x0800cebc
 80074f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074f6:	4553      	cmp	r3, sl
 80074f8:	bfa8      	it	ge
 80074fa:	4653      	movge	r3, sl
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	4699      	mov	r9, r3
 8007500:	dc36      	bgt.n	8007570 <_printf_float+0x360>
 8007502:	f04f 0b00 	mov.w	fp, #0
 8007506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800750a:	f104 021a 	add.w	r2, r4, #26
 800750e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	eba3 0309 	sub.w	r3, r3, r9
 8007516:	455b      	cmp	r3, fp
 8007518:	dc31      	bgt.n	800757e <_printf_float+0x36e>
 800751a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751c:	459a      	cmp	sl, r3
 800751e:	dc3a      	bgt.n	8007596 <_printf_float+0x386>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	07da      	lsls	r2, r3, #31
 8007524:	d437      	bmi.n	8007596 <_printf_float+0x386>
 8007526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007528:	ebaa 0903 	sub.w	r9, sl, r3
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	ebaa 0303 	sub.w	r3, sl, r3
 8007532:	4599      	cmp	r9, r3
 8007534:	bfa8      	it	ge
 8007536:	4699      	movge	r9, r3
 8007538:	f1b9 0f00 	cmp.w	r9, #0
 800753c:	dc33      	bgt.n	80075a6 <_printf_float+0x396>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007546:	f104 0b1a 	add.w	fp, r4, #26
 800754a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754c:	ebaa 0303 	sub.w	r3, sl, r3
 8007550:	eba3 0309 	sub.w	r3, r3, r9
 8007554:	4543      	cmp	r3, r8
 8007556:	f77f af79 	ble.w	800744c <_printf_float+0x23c>
 800755a:	2301      	movs	r3, #1
 800755c:	465a      	mov	r2, fp
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f aeae 	beq.w	80072c6 <_printf_float+0xb6>
 800756a:	f108 0801 	add.w	r8, r8, #1
 800756e:	e7ec      	b.n	800754a <_printf_float+0x33a>
 8007570:	4642      	mov	r2, r8
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	d1c2      	bne.n	8007502 <_printf_float+0x2f2>
 800757c:	e6a3      	b.n	80072c6 <_printf_float+0xb6>
 800757e:	2301      	movs	r3, #1
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	9206      	str	r2, [sp, #24]
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f ae9c 	beq.w	80072c6 <_printf_float+0xb6>
 800758e:	9a06      	ldr	r2, [sp, #24]
 8007590:	f10b 0b01 	add.w	fp, fp, #1
 8007594:	e7bb      	b.n	800750e <_printf_float+0x2fe>
 8007596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	d1c0      	bne.n	8007526 <_printf_float+0x316>
 80075a4:	e68f      	b.n	80072c6 <_printf_float+0xb6>
 80075a6:	9a06      	ldr	r2, [sp, #24]
 80075a8:	464b      	mov	r3, r9
 80075aa:	4442      	add	r2, r8
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	d1c3      	bne.n	800753e <_printf_float+0x32e>
 80075b6:	e686      	b.n	80072c6 <_printf_float+0xb6>
 80075b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075bc:	f1ba 0f01 	cmp.w	sl, #1
 80075c0:	dc01      	bgt.n	80075c6 <_printf_float+0x3b6>
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d536      	bpl.n	8007634 <_printf_float+0x424>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4642      	mov	r2, r8
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f ae78 	beq.w	80072c6 <_printf_float+0xb6>
 80075d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae70 	beq.w	80072c6 <_printf_float+0xb6>
 80075e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075f2:	f7f9 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80075f6:	b9c0      	cbnz	r0, 800762a <_printf_float+0x41a>
 80075f8:	4653      	mov	r3, sl
 80075fa:	f108 0201 	add.w	r2, r8, #1
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	d10c      	bne.n	8007622 <_printf_float+0x412>
 8007608:	e65d      	b.n	80072c6 <_printf_float+0xb6>
 800760a:	2301      	movs	r3, #1
 800760c:	465a      	mov	r2, fp
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f ae56 	beq.w	80072c6 <_printf_float+0xb6>
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	45d0      	cmp	r8, sl
 8007620:	dbf3      	blt.n	800760a <_printf_float+0x3fa>
 8007622:	464b      	mov	r3, r9
 8007624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007628:	e6df      	b.n	80073ea <_printf_float+0x1da>
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	f104 0b1a 	add.w	fp, r4, #26
 8007632:	e7f4      	b.n	800761e <_printf_float+0x40e>
 8007634:	2301      	movs	r3, #1
 8007636:	4642      	mov	r2, r8
 8007638:	e7e1      	b.n	80075fe <_printf_float+0x3ee>
 800763a:	2301      	movs	r3, #1
 800763c:	464a      	mov	r2, r9
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	f43f ae3e 	beq.w	80072c6 <_printf_float+0xb6>
 800764a:	f108 0801 	add.w	r8, r8, #1
 800764e:	68e3      	ldr	r3, [r4, #12]
 8007650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007652:	1a5b      	subs	r3, r3, r1
 8007654:	4543      	cmp	r3, r8
 8007656:	dcf0      	bgt.n	800763a <_printf_float+0x42a>
 8007658:	e6fc      	b.n	8007454 <_printf_float+0x244>
 800765a:	f04f 0800 	mov.w	r8, #0
 800765e:	f104 0919 	add.w	r9, r4, #25
 8007662:	e7f4      	b.n	800764e <_printf_float+0x43e>

08007664 <_printf_common>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	4616      	mov	r6, r2
 800766a:	4698      	mov	r8, r3
 800766c:	688a      	ldr	r2, [r1, #8]
 800766e:	690b      	ldr	r3, [r1, #16]
 8007670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007674:	4293      	cmp	r3, r2
 8007676:	bfb8      	it	lt
 8007678:	4613      	movlt	r3, r2
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007680:	4607      	mov	r7, r0
 8007682:	460c      	mov	r4, r1
 8007684:	b10a      	cbz	r2, 800768a <_printf_common+0x26>
 8007686:	3301      	adds	r3, #1
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	0699      	lsls	r1, r3, #26
 800768e:	bf42      	ittt	mi
 8007690:	6833      	ldrmi	r3, [r6, #0]
 8007692:	3302      	addmi	r3, #2
 8007694:	6033      	strmi	r3, [r6, #0]
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	f015 0506 	ands.w	r5, r5, #6
 800769c:	d106      	bne.n	80076ac <_printf_common+0x48>
 800769e:	f104 0a19 	add.w	sl, r4, #25
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	6832      	ldr	r2, [r6, #0]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dc26      	bgt.n	80076fa <_printf_common+0x96>
 80076ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076b0:	6822      	ldr	r2, [r4, #0]
 80076b2:	3b00      	subs	r3, #0
 80076b4:	bf18      	it	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	0692      	lsls	r2, r2, #26
 80076ba:	d42b      	bmi.n	8007714 <_printf_common+0xb0>
 80076bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076c0:	4641      	mov	r1, r8
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c8      	blx	r9
 80076c6:	3001      	adds	r0, #1
 80076c8:	d01e      	beq.n	8007708 <_printf_common+0xa4>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	f003 0306 	and.w	r3, r3, #6
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	bf02      	ittt	eq
 80076d6:	68e5      	ldreq	r5, [r4, #12]
 80076d8:	6833      	ldreq	r3, [r6, #0]
 80076da:	1aed      	subeq	r5, r5, r3
 80076dc:	68a3      	ldr	r3, [r4, #8]
 80076de:	bf0c      	ite	eq
 80076e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e4:	2500      	movne	r5, #0
 80076e6:	4293      	cmp	r3, r2
 80076e8:	bfc4      	itt	gt
 80076ea:	1a9b      	subgt	r3, r3, r2
 80076ec:	18ed      	addgt	r5, r5, r3
 80076ee:	2600      	movs	r6, #0
 80076f0:	341a      	adds	r4, #26
 80076f2:	42b5      	cmp	r5, r6
 80076f4:	d11a      	bne.n	800772c <_printf_common+0xc8>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e008      	b.n	800770c <_printf_common+0xa8>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4641      	mov	r1, r8
 8007700:	4638      	mov	r0, r7
 8007702:	47c8      	blx	r9
 8007704:	3001      	adds	r0, #1
 8007706:	d103      	bne.n	8007710 <_printf_common+0xac>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	3501      	adds	r5, #1
 8007712:	e7c6      	b.n	80076a2 <_printf_common+0x3e>
 8007714:	18e1      	adds	r1, r4, r3
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	2030      	movs	r0, #48	@ 0x30
 800771a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800771e:	4422      	add	r2, r4
 8007720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007728:	3302      	adds	r3, #2
 800772a:	e7c7      	b.n	80076bc <_printf_common+0x58>
 800772c:	2301      	movs	r3, #1
 800772e:	4622      	mov	r2, r4
 8007730:	4641      	mov	r1, r8
 8007732:	4638      	mov	r0, r7
 8007734:	47c8      	blx	r9
 8007736:	3001      	adds	r0, #1
 8007738:	d0e6      	beq.n	8007708 <_printf_common+0xa4>
 800773a:	3601      	adds	r6, #1
 800773c:	e7d9      	b.n	80076f2 <_printf_common+0x8e>
	...

08007740 <_printf_i>:
 8007740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	7e0f      	ldrb	r7, [r1, #24]
 8007746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007748:	2f78      	cmp	r7, #120	@ 0x78
 800774a:	4691      	mov	r9, r2
 800774c:	4680      	mov	r8, r0
 800774e:	460c      	mov	r4, r1
 8007750:	469a      	mov	sl, r3
 8007752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007756:	d807      	bhi.n	8007768 <_printf_i+0x28>
 8007758:	2f62      	cmp	r7, #98	@ 0x62
 800775a:	d80a      	bhi.n	8007772 <_printf_i+0x32>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d2 	beq.w	8007906 <_printf_i+0x1c6>
 8007762:	2f58      	cmp	r7, #88	@ 0x58
 8007764:	f000 80b9 	beq.w	80078da <_printf_i+0x19a>
 8007768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800776c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007770:	e03a      	b.n	80077e8 <_printf_i+0xa8>
 8007772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007776:	2b15      	cmp	r3, #21
 8007778:	d8f6      	bhi.n	8007768 <_printf_i+0x28>
 800777a:	a101      	add	r1, pc, #4	@ (adr r1, 8007780 <_printf_i+0x40>)
 800777c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077ed 	.word	0x080077ed
 8007788:	08007769 	.word	0x08007769
 800778c:	08007769 	.word	0x08007769
 8007790:	08007769 	.word	0x08007769
 8007794:	08007769 	.word	0x08007769
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007769 	.word	0x08007769
 80077a0:	08007769 	.word	0x08007769
 80077a4:	08007769 	.word	0x08007769
 80077a8:	08007769 	.word	0x08007769
 80077ac:	080078ed 	.word	0x080078ed
 80077b0:	08007817 	.word	0x08007817
 80077b4:	080078a7 	.word	0x080078a7
 80077b8:	08007769 	.word	0x08007769
 80077bc:	08007769 	.word	0x08007769
 80077c0:	0800790f 	.word	0x0800790f
 80077c4:	08007769 	.word	0x08007769
 80077c8:	08007817 	.word	0x08007817
 80077cc:	08007769 	.word	0x08007769
 80077d0:	08007769 	.word	0x08007769
 80077d4:	080078af 	.word	0x080078af
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6032      	str	r2, [r6, #0]
 80077e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077e8:	2301      	movs	r3, #1
 80077ea:	e09d      	b.n	8007928 <_printf_i+0x1e8>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1d19      	adds	r1, r3, #4
 80077f2:	6031      	str	r1, [r6, #0]
 80077f4:	0606      	lsls	r6, r0, #24
 80077f6:	d501      	bpl.n	80077fc <_printf_i+0xbc>
 80077f8:	681d      	ldr	r5, [r3, #0]
 80077fa:	e003      	b.n	8007804 <_printf_i+0xc4>
 80077fc:	0645      	lsls	r5, r0, #25
 80077fe:	d5fb      	bpl.n	80077f8 <_printf_i+0xb8>
 8007800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007804:	2d00      	cmp	r5, #0
 8007806:	da03      	bge.n	8007810 <_printf_i+0xd0>
 8007808:	232d      	movs	r3, #45	@ 0x2d
 800780a:	426d      	negs	r5, r5
 800780c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007810:	4859      	ldr	r0, [pc, #356]	@ (8007978 <_printf_i+0x238>)
 8007812:	230a      	movs	r3, #10
 8007814:	e011      	b.n	800783a <_printf_i+0xfa>
 8007816:	6821      	ldr	r1, [r4, #0]
 8007818:	6833      	ldr	r3, [r6, #0]
 800781a:	0608      	lsls	r0, r1, #24
 800781c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007820:	d402      	bmi.n	8007828 <_printf_i+0xe8>
 8007822:	0649      	lsls	r1, r1, #25
 8007824:	bf48      	it	mi
 8007826:	b2ad      	uxthmi	r5, r5
 8007828:	2f6f      	cmp	r7, #111	@ 0x6f
 800782a:	4853      	ldr	r0, [pc, #332]	@ (8007978 <_printf_i+0x238>)
 800782c:	6033      	str	r3, [r6, #0]
 800782e:	bf14      	ite	ne
 8007830:	230a      	movne	r3, #10
 8007832:	2308      	moveq	r3, #8
 8007834:	2100      	movs	r1, #0
 8007836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800783a:	6866      	ldr	r6, [r4, #4]
 800783c:	60a6      	str	r6, [r4, #8]
 800783e:	2e00      	cmp	r6, #0
 8007840:	bfa2      	ittt	ge
 8007842:	6821      	ldrge	r1, [r4, #0]
 8007844:	f021 0104 	bicge.w	r1, r1, #4
 8007848:	6021      	strge	r1, [r4, #0]
 800784a:	b90d      	cbnz	r5, 8007850 <_printf_i+0x110>
 800784c:	2e00      	cmp	r6, #0
 800784e:	d04b      	beq.n	80078e8 <_printf_i+0x1a8>
 8007850:	4616      	mov	r6, r2
 8007852:	fbb5 f1f3 	udiv	r1, r5, r3
 8007856:	fb03 5711 	mls	r7, r3, r1, r5
 800785a:	5dc7      	ldrb	r7, [r0, r7]
 800785c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007860:	462f      	mov	r7, r5
 8007862:	42bb      	cmp	r3, r7
 8007864:	460d      	mov	r5, r1
 8007866:	d9f4      	bls.n	8007852 <_printf_i+0x112>
 8007868:	2b08      	cmp	r3, #8
 800786a:	d10b      	bne.n	8007884 <_printf_i+0x144>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	07df      	lsls	r7, r3, #31
 8007870:	d508      	bpl.n	8007884 <_printf_i+0x144>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	6861      	ldr	r1, [r4, #4]
 8007876:	4299      	cmp	r1, r3
 8007878:	bfde      	ittt	le
 800787a:	2330      	movle	r3, #48	@ 0x30
 800787c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007884:	1b92      	subs	r2, r2, r6
 8007886:	6122      	str	r2, [r4, #16]
 8007888:	f8cd a000 	str.w	sl, [sp]
 800788c:	464b      	mov	r3, r9
 800788e:	aa03      	add	r2, sp, #12
 8007890:	4621      	mov	r1, r4
 8007892:	4640      	mov	r0, r8
 8007894:	f7ff fee6 	bl	8007664 <_printf_common>
 8007898:	3001      	adds	r0, #1
 800789a:	d14a      	bne.n	8007932 <_printf_i+0x1f2>
 800789c:	f04f 30ff 	mov.w	r0, #4294967295
 80078a0:	b004      	add	sp, #16
 80078a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	f043 0320 	orr.w	r3, r3, #32
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	4833      	ldr	r0, [pc, #204]	@ (800797c <_printf_i+0x23c>)
 80078b0:	2778      	movs	r7, #120	@ 0x78
 80078b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	6831      	ldr	r1, [r6, #0]
 80078ba:	061f      	lsls	r7, r3, #24
 80078bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80078c0:	d402      	bmi.n	80078c8 <_printf_i+0x188>
 80078c2:	065f      	lsls	r7, r3, #25
 80078c4:	bf48      	it	mi
 80078c6:	b2ad      	uxthmi	r5, r5
 80078c8:	6031      	str	r1, [r6, #0]
 80078ca:	07d9      	lsls	r1, r3, #31
 80078cc:	bf44      	itt	mi
 80078ce:	f043 0320 	orrmi.w	r3, r3, #32
 80078d2:	6023      	strmi	r3, [r4, #0]
 80078d4:	b11d      	cbz	r5, 80078de <_printf_i+0x19e>
 80078d6:	2310      	movs	r3, #16
 80078d8:	e7ac      	b.n	8007834 <_printf_i+0xf4>
 80078da:	4827      	ldr	r0, [pc, #156]	@ (8007978 <_printf_i+0x238>)
 80078dc:	e7e9      	b.n	80078b2 <_printf_i+0x172>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f023 0320 	bic.w	r3, r3, #32
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	e7f6      	b.n	80078d6 <_printf_i+0x196>
 80078e8:	4616      	mov	r6, r2
 80078ea:	e7bd      	b.n	8007868 <_printf_i+0x128>
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	6961      	ldr	r1, [r4, #20]
 80078f2:	1d18      	adds	r0, r3, #4
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	062e      	lsls	r6, r5, #24
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	d501      	bpl.n	8007900 <_printf_i+0x1c0>
 80078fc:	6019      	str	r1, [r3, #0]
 80078fe:	e002      	b.n	8007906 <_printf_i+0x1c6>
 8007900:	0668      	lsls	r0, r5, #25
 8007902:	d5fb      	bpl.n	80078fc <_printf_i+0x1bc>
 8007904:	8019      	strh	r1, [r3, #0]
 8007906:	2300      	movs	r3, #0
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	4616      	mov	r6, r2
 800790c:	e7bc      	b.n	8007888 <_printf_i+0x148>
 800790e:	6833      	ldr	r3, [r6, #0]
 8007910:	1d1a      	adds	r2, r3, #4
 8007912:	6032      	str	r2, [r6, #0]
 8007914:	681e      	ldr	r6, [r3, #0]
 8007916:	6862      	ldr	r2, [r4, #4]
 8007918:	2100      	movs	r1, #0
 800791a:	4630      	mov	r0, r6
 800791c:	f7f8 fc78 	bl	8000210 <memchr>
 8007920:	b108      	cbz	r0, 8007926 <_printf_i+0x1e6>
 8007922:	1b80      	subs	r0, r0, r6
 8007924:	6060      	str	r0, [r4, #4]
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	2300      	movs	r3, #0
 800792c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007930:	e7aa      	b.n	8007888 <_printf_i+0x148>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	4632      	mov	r2, r6
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	47d0      	blx	sl
 800793c:	3001      	adds	r0, #1
 800793e:	d0ad      	beq.n	800789c <_printf_i+0x15c>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	079b      	lsls	r3, r3, #30
 8007944:	d413      	bmi.n	800796e <_printf_i+0x22e>
 8007946:	68e0      	ldr	r0, [r4, #12]
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	4298      	cmp	r0, r3
 800794c:	bfb8      	it	lt
 800794e:	4618      	movlt	r0, r3
 8007950:	e7a6      	b.n	80078a0 <_printf_i+0x160>
 8007952:	2301      	movs	r3, #1
 8007954:	4632      	mov	r2, r6
 8007956:	4649      	mov	r1, r9
 8007958:	4640      	mov	r0, r8
 800795a:	47d0      	blx	sl
 800795c:	3001      	adds	r0, #1
 800795e:	d09d      	beq.n	800789c <_printf_i+0x15c>
 8007960:	3501      	adds	r5, #1
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	9903      	ldr	r1, [sp, #12]
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	42ab      	cmp	r3, r5
 800796a:	dcf2      	bgt.n	8007952 <_printf_i+0x212>
 800796c:	e7eb      	b.n	8007946 <_printf_i+0x206>
 800796e:	2500      	movs	r5, #0
 8007970:	f104 0619 	add.w	r6, r4, #25
 8007974:	e7f5      	b.n	8007962 <_printf_i+0x222>
 8007976:	bf00      	nop
 8007978:	0800cebe 	.word	0x0800cebe
 800797c:	0800cecf 	.word	0x0800cecf

08007980 <_scanf_float>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	b087      	sub	sp, #28
 8007986:	4617      	mov	r7, r2
 8007988:	9303      	str	r3, [sp, #12]
 800798a:	688b      	ldr	r3, [r1, #8]
 800798c:	1e5a      	subs	r2, r3, #1
 800798e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007992:	bf81      	itttt	hi
 8007994:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007998:	eb03 0b05 	addhi.w	fp, r3, r5
 800799c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80079a0:	608b      	strhi	r3, [r1, #8]
 80079a2:	680b      	ldr	r3, [r1, #0]
 80079a4:	460a      	mov	r2, r1
 80079a6:	f04f 0500 	mov.w	r5, #0
 80079aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80079ae:	f842 3b1c 	str.w	r3, [r2], #28
 80079b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079b6:	4680      	mov	r8, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	bf98      	it	ls
 80079bc:	f04f 0b00 	movls.w	fp, #0
 80079c0:	9201      	str	r2, [sp, #4]
 80079c2:	4616      	mov	r6, r2
 80079c4:	46aa      	mov	sl, r5
 80079c6:	46a9      	mov	r9, r5
 80079c8:	9502      	str	r5, [sp, #8]
 80079ca:	68a2      	ldr	r2, [r4, #8]
 80079cc:	b152      	cbz	r2, 80079e4 <_scanf_float+0x64>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80079d4:	d864      	bhi.n	8007aa0 <_scanf_float+0x120>
 80079d6:	2b40      	cmp	r3, #64	@ 0x40
 80079d8:	d83c      	bhi.n	8007a54 <_scanf_float+0xd4>
 80079da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80079de:	b2c8      	uxtb	r0, r1
 80079e0:	280e      	cmp	r0, #14
 80079e2:	d93a      	bls.n	8007a5a <_scanf_float+0xda>
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	d003      	beq.n	80079f2 <_scanf_float+0x72>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079f6:	f1ba 0f01 	cmp.w	sl, #1
 80079fa:	f200 8117 	bhi.w	8007c2c <_scanf_float+0x2ac>
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	429e      	cmp	r6, r3
 8007a02:	f200 8108 	bhi.w	8007c16 <_scanf_float+0x296>
 8007a06:	2001      	movs	r0, #1
 8007a08:	b007      	add	sp, #28
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007a12:	2a0d      	cmp	r2, #13
 8007a14:	d8e6      	bhi.n	80079e4 <_scanf_float+0x64>
 8007a16:	a101      	add	r1, pc, #4	@ (adr r1, 8007a1c <_scanf_float+0x9c>)
 8007a18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a1c:	08007b63 	.word	0x08007b63
 8007a20:	080079e5 	.word	0x080079e5
 8007a24:	080079e5 	.word	0x080079e5
 8007a28:	080079e5 	.word	0x080079e5
 8007a2c:	08007bc3 	.word	0x08007bc3
 8007a30:	08007b9b 	.word	0x08007b9b
 8007a34:	080079e5 	.word	0x080079e5
 8007a38:	080079e5 	.word	0x080079e5
 8007a3c:	08007b71 	.word	0x08007b71
 8007a40:	080079e5 	.word	0x080079e5
 8007a44:	080079e5 	.word	0x080079e5
 8007a48:	080079e5 	.word	0x080079e5
 8007a4c:	080079e5 	.word	0x080079e5
 8007a50:	08007b29 	.word	0x08007b29
 8007a54:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007a58:	e7db      	b.n	8007a12 <_scanf_float+0x92>
 8007a5a:	290e      	cmp	r1, #14
 8007a5c:	d8c2      	bhi.n	80079e4 <_scanf_float+0x64>
 8007a5e:	a001      	add	r0, pc, #4	@ (adr r0, 8007a64 <_scanf_float+0xe4>)
 8007a60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a64:	08007b19 	.word	0x08007b19
 8007a68:	080079e5 	.word	0x080079e5
 8007a6c:	08007b19 	.word	0x08007b19
 8007a70:	08007baf 	.word	0x08007baf
 8007a74:	080079e5 	.word	0x080079e5
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007aff 	.word	0x08007aff
 8007a80:	08007aff 	.word	0x08007aff
 8007a84:	08007aff 	.word	0x08007aff
 8007a88:	08007aff 	.word	0x08007aff
 8007a8c:	08007aff 	.word	0x08007aff
 8007a90:	08007aff 	.word	0x08007aff
 8007a94:	08007aff 	.word	0x08007aff
 8007a98:	08007aff 	.word	0x08007aff
 8007a9c:	08007aff 	.word	0x08007aff
 8007aa0:	2b6e      	cmp	r3, #110	@ 0x6e
 8007aa2:	d809      	bhi.n	8007ab8 <_scanf_float+0x138>
 8007aa4:	2b60      	cmp	r3, #96	@ 0x60
 8007aa6:	d8b2      	bhi.n	8007a0e <_scanf_float+0x8e>
 8007aa8:	2b54      	cmp	r3, #84	@ 0x54
 8007aaa:	d07b      	beq.n	8007ba4 <_scanf_float+0x224>
 8007aac:	2b59      	cmp	r3, #89	@ 0x59
 8007aae:	d199      	bne.n	80079e4 <_scanf_float+0x64>
 8007ab0:	2d07      	cmp	r5, #7
 8007ab2:	d197      	bne.n	80079e4 <_scanf_float+0x64>
 8007ab4:	2508      	movs	r5, #8
 8007ab6:	e02c      	b.n	8007b12 <_scanf_float+0x192>
 8007ab8:	2b74      	cmp	r3, #116	@ 0x74
 8007aba:	d073      	beq.n	8007ba4 <_scanf_float+0x224>
 8007abc:	2b79      	cmp	r3, #121	@ 0x79
 8007abe:	e7f6      	b.n	8007aae <_scanf_float+0x12e>
 8007ac0:	6821      	ldr	r1, [r4, #0]
 8007ac2:	05c8      	lsls	r0, r1, #23
 8007ac4:	d51b      	bpl.n	8007afe <_scanf_float+0x17e>
 8007ac6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007aca:	6021      	str	r1, [r4, #0]
 8007acc:	f109 0901 	add.w	r9, r9, #1
 8007ad0:	f1bb 0f00 	cmp.w	fp, #0
 8007ad4:	d003      	beq.n	8007ade <_scanf_float+0x15e>
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007adc:	60a2      	str	r2, [r4, #8]
 8007ade:	68a3      	ldr	r3, [r4, #8]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	60a3      	str	r3, [r4, #8]
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	f340 8087 	ble.w	8007c04 <_scanf_float+0x284>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	e765      	b.n	80079ca <_scanf_float+0x4a>
 8007afe:	eb1a 0105 	adds.w	r1, sl, r5
 8007b02:	f47f af6f 	bne.w	80079e4 <_scanf_float+0x64>
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	460d      	mov	r5, r1
 8007b10:	468a      	mov	sl, r1
 8007b12:	f806 3b01 	strb.w	r3, [r6], #1
 8007b16:	e7e2      	b.n	8007ade <_scanf_float+0x15e>
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	0610      	lsls	r0, r2, #24
 8007b1c:	f57f af62 	bpl.w	80079e4 <_scanf_float+0x64>
 8007b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	e7f4      	b.n	8007b12 <_scanf_float+0x192>
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	d10e      	bne.n	8007b4c <_scanf_float+0x1cc>
 8007b2e:	f1b9 0f00 	cmp.w	r9, #0
 8007b32:	d10e      	bne.n	8007b52 <_scanf_float+0x1d2>
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b3a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b3e:	d108      	bne.n	8007b52 <_scanf_float+0x1d2>
 8007b40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	f04f 0a01 	mov.w	sl, #1
 8007b4a:	e7e2      	b.n	8007b12 <_scanf_float+0x192>
 8007b4c:	f1ba 0f02 	cmp.w	sl, #2
 8007b50:	d055      	beq.n	8007bfe <_scanf_float+0x27e>
 8007b52:	2d01      	cmp	r5, #1
 8007b54:	d002      	beq.n	8007b5c <_scanf_float+0x1dc>
 8007b56:	2d04      	cmp	r5, #4
 8007b58:	f47f af44 	bne.w	80079e4 <_scanf_float+0x64>
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	b2ed      	uxtb	r5, r5
 8007b60:	e7d7      	b.n	8007b12 <_scanf_float+0x192>
 8007b62:	f1ba 0f01 	cmp.w	sl, #1
 8007b66:	f47f af3d 	bne.w	80079e4 <_scanf_float+0x64>
 8007b6a:	f04f 0a02 	mov.w	sl, #2
 8007b6e:	e7d0      	b.n	8007b12 <_scanf_float+0x192>
 8007b70:	b97d      	cbnz	r5, 8007b92 <_scanf_float+0x212>
 8007b72:	f1b9 0f00 	cmp.w	r9, #0
 8007b76:	f47f af38 	bne.w	80079ea <_scanf_float+0x6a>
 8007b7a:	6822      	ldr	r2, [r4, #0]
 8007b7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b84:	f040 8108 	bne.w	8007d98 <_scanf_float+0x418>
 8007b88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	2501      	movs	r5, #1
 8007b90:	e7bf      	b.n	8007b12 <_scanf_float+0x192>
 8007b92:	2d03      	cmp	r5, #3
 8007b94:	d0e2      	beq.n	8007b5c <_scanf_float+0x1dc>
 8007b96:	2d05      	cmp	r5, #5
 8007b98:	e7de      	b.n	8007b58 <_scanf_float+0x1d8>
 8007b9a:	2d02      	cmp	r5, #2
 8007b9c:	f47f af22 	bne.w	80079e4 <_scanf_float+0x64>
 8007ba0:	2503      	movs	r5, #3
 8007ba2:	e7b6      	b.n	8007b12 <_scanf_float+0x192>
 8007ba4:	2d06      	cmp	r5, #6
 8007ba6:	f47f af1d 	bne.w	80079e4 <_scanf_float+0x64>
 8007baa:	2507      	movs	r5, #7
 8007bac:	e7b1      	b.n	8007b12 <_scanf_float+0x192>
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	0591      	lsls	r1, r2, #22
 8007bb2:	f57f af17 	bpl.w	80079e4 <_scanf_float+0x64>
 8007bb6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007bba:	6022      	str	r2, [r4, #0]
 8007bbc:	f8cd 9008 	str.w	r9, [sp, #8]
 8007bc0:	e7a7      	b.n	8007b12 <_scanf_float+0x192>
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007bc8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007bcc:	d006      	beq.n	8007bdc <_scanf_float+0x25c>
 8007bce:	0550      	lsls	r0, r2, #21
 8007bd0:	f57f af08 	bpl.w	80079e4 <_scanf_float+0x64>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	f000 80de 	beq.w	8007d98 <_scanf_float+0x418>
 8007bdc:	0591      	lsls	r1, r2, #22
 8007bde:	bf58      	it	pl
 8007be0:	9902      	ldrpl	r1, [sp, #8]
 8007be2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007be6:	bf58      	it	pl
 8007be8:	eba9 0101 	subpl.w	r1, r9, r1
 8007bec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007bf0:	bf58      	it	pl
 8007bf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	f04f 0900 	mov.w	r9, #0
 8007bfc:	e789      	b.n	8007b12 <_scanf_float+0x192>
 8007bfe:	f04f 0a03 	mov.w	sl, #3
 8007c02:	e786      	b.n	8007b12 <_scanf_float+0x192>
 8007c04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007c08:	4639      	mov	r1, r7
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4798      	blx	r3
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f aedb 	beq.w	80079ca <_scanf_float+0x4a>
 8007c14:	e6e6      	b.n	80079e4 <_scanf_float+0x64>
 8007c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c1e:	463a      	mov	r2, r7
 8007c20:	4640      	mov	r0, r8
 8007c22:	4798      	blx	r3
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	e6e8      	b.n	80079fe <_scanf_float+0x7e>
 8007c2c:	1e6b      	subs	r3, r5, #1
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	d824      	bhi.n	8007c7c <_scanf_float+0x2fc>
 8007c32:	2d02      	cmp	r5, #2
 8007c34:	d836      	bhi.n	8007ca4 <_scanf_float+0x324>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	f67f aee4 	bls.w	8007a06 <_scanf_float+0x86>
 8007c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c46:	463a      	mov	r2, r7
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4798      	blx	r3
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	e7f0      	b.n	8007c36 <_scanf_float+0x2b6>
 8007c54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007c5c:	463a      	mov	r2, r7
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4798      	blx	r3
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	6123      	str	r3, [r4, #16]
 8007c68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c6c:	fa5f fa8a 	uxtb.w	sl, sl
 8007c70:	f1ba 0f02 	cmp.w	sl, #2
 8007c74:	d1ee      	bne.n	8007c54 <_scanf_float+0x2d4>
 8007c76:	3d03      	subs	r5, #3
 8007c78:	b2ed      	uxtb	r5, r5
 8007c7a:	1b76      	subs	r6, r6, r5
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	05da      	lsls	r2, r3, #23
 8007c80:	d530      	bpl.n	8007ce4 <_scanf_float+0x364>
 8007c82:	055b      	lsls	r3, r3, #21
 8007c84:	d511      	bpl.n	8007caa <_scanf_float+0x32a>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	429e      	cmp	r6, r3
 8007c8a:	f67f aebc 	bls.w	8007a06 <_scanf_float+0x86>
 8007c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c96:	463a      	mov	r2, r7
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4798      	blx	r3
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	e7f0      	b.n	8007c86 <_scanf_float+0x306>
 8007ca4:	46aa      	mov	sl, r5
 8007ca6:	46b3      	mov	fp, r6
 8007ca8:	e7de      	b.n	8007c68 <_scanf_float+0x2e8>
 8007caa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	2965      	cmp	r1, #101	@ 0x65
 8007cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	d00c      	beq.n	8007cd8 <_scanf_float+0x358>
 8007cbe:	2945      	cmp	r1, #69	@ 0x45
 8007cc0:	d00a      	beq.n	8007cd8 <_scanf_float+0x358>
 8007cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4798      	blx	r3
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	1eb5      	subs	r5, r6, #2
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cdc:	463a      	mov	r2, r7
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4798      	blx	r3
 8007ce2:	462e      	mov	r6, r5
 8007ce4:	6822      	ldr	r2, [r4, #0]
 8007ce6:	f012 0210 	ands.w	r2, r2, #16
 8007cea:	d001      	beq.n	8007cf0 <_scanf_float+0x370>
 8007cec:	2000      	movs	r0, #0
 8007cee:	e68b      	b.n	8007a08 <_scanf_float+0x88>
 8007cf0:	7032      	strb	r2, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cfc:	d11c      	bne.n	8007d38 <_scanf_float+0x3b8>
 8007cfe:	9b02      	ldr	r3, [sp, #8]
 8007d00:	454b      	cmp	r3, r9
 8007d02:	eba3 0209 	sub.w	r2, r3, r9
 8007d06:	d123      	bne.n	8007d50 <_scanf_float+0x3d0>
 8007d08:	9901      	ldr	r1, [sp, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f002 fc53 	bl	800a5b8 <_strtod_r>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	6821      	ldr	r1, [r4, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f011 0f02 	tst.w	r1, #2
 8007d1c:	ec57 6b10 	vmov	r6, r7, d0
 8007d20:	f103 0204 	add.w	r2, r3, #4
 8007d24:	d01f      	beq.n	8007d66 <_scanf_float+0x3e6>
 8007d26:	9903      	ldr	r1, [sp, #12]
 8007d28:	600a      	str	r2, [r1, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	e9c3 6700 	strd	r6, r7, [r3]
 8007d30:	68e3      	ldr	r3, [r4, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60e3      	str	r3, [r4, #12]
 8007d36:	e7d9      	b.n	8007cec <_scanf_float+0x36c>
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0e4      	beq.n	8007d08 <_scanf_float+0x388>
 8007d3e:	9905      	ldr	r1, [sp, #20]
 8007d40:	230a      	movs	r3, #10
 8007d42:	3101      	adds	r1, #1
 8007d44:	4640      	mov	r0, r8
 8007d46:	f002 fcb7 	bl	800a6b8 <_strtol_r>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	9e05      	ldr	r6, [sp, #20]
 8007d4e:	1ac2      	subs	r2, r0, r3
 8007d50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007d54:	429e      	cmp	r6, r3
 8007d56:	bf28      	it	cs
 8007d58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007d5c:	4910      	ldr	r1, [pc, #64]	@ (8007da0 <_scanf_float+0x420>)
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f918 	bl	8007f94 <siprintf>
 8007d64:	e7d0      	b.n	8007d08 <_scanf_float+0x388>
 8007d66:	f011 0f04 	tst.w	r1, #4
 8007d6a:	9903      	ldr	r1, [sp, #12]
 8007d6c:	600a      	str	r2, [r1, #0]
 8007d6e:	d1dc      	bne.n	8007d2a <_scanf_float+0x3aa>
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	4632      	mov	r2, r6
 8007d74:	463b      	mov	r3, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fef7 	bl	8000b6c <__aeabi_dcmpun>
 8007d7e:	b128      	cbz	r0, 8007d8c <_scanf_float+0x40c>
 8007d80:	4808      	ldr	r0, [pc, #32]	@ (8007da4 <_scanf_float+0x424>)
 8007d82:	f000 fa13 	bl	80081ac <nanf>
 8007d86:	ed85 0a00 	vstr	s0, [r5]
 8007d8a:	e7d1      	b.n	8007d30 <_scanf_float+0x3b0>
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	4639      	mov	r1, r7
 8007d90:	f7f8 ff4a 	bl	8000c28 <__aeabi_d2f>
 8007d94:	6028      	str	r0, [r5, #0]
 8007d96:	e7cb      	b.n	8007d30 <_scanf_float+0x3b0>
 8007d98:	f04f 0900 	mov.w	r9, #0
 8007d9c:	e629      	b.n	80079f2 <_scanf_float+0x72>
 8007d9e:	bf00      	nop
 8007da0:	0800cee0 	.word	0x0800cee0
 8007da4:	0800d275 	.word	0x0800d275

08007da8 <std>:
 8007da8:	2300      	movs	r3, #0
 8007daa:	b510      	push	{r4, lr}
 8007dac:	4604      	mov	r4, r0
 8007dae:	e9c0 3300 	strd	r3, r3, [r0]
 8007db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db6:	6083      	str	r3, [r0, #8]
 8007db8:	8181      	strh	r1, [r0, #12]
 8007dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007dbc:	81c2      	strh	r2, [r0, #14]
 8007dbe:	6183      	str	r3, [r0, #24]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	305c      	adds	r0, #92	@ 0x5c
 8007dc6:	f000 f962 	bl	800808e <memset>
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <std+0x58>)
 8007dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <std+0x5c>)
 8007dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <std+0x60>)
 8007dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e0c <std+0x64>)
 8007dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <std+0x68>)
 8007ddc:	6224      	str	r4, [r4, #32]
 8007dde:	429c      	cmp	r4, r3
 8007de0:	d006      	beq.n	8007df0 <std+0x48>
 8007de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007de6:	4294      	cmp	r4, r2
 8007de8:	d002      	beq.n	8007df0 <std+0x48>
 8007dea:	33d0      	adds	r3, #208	@ 0xd0
 8007dec:	429c      	cmp	r4, r3
 8007dee:	d105      	bne.n	8007dfc <std+0x54>
 8007df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f000 b9c6 	b.w	8008188 <__retarget_lock_init_recursive>
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	bf00      	nop
 8007e00:	08007fd5 	.word	0x08007fd5
 8007e04:	08007ff7 	.word	0x08007ff7
 8007e08:	0800802f 	.word	0x0800802f
 8007e0c:	08008053 	.word	0x08008053
 8007e10:	20000874 	.word	0x20000874

08007e14 <stdio_exit_handler>:
 8007e14:	4a02      	ldr	r2, [pc, #8]	@ (8007e20 <stdio_exit_handler+0xc>)
 8007e16:	4903      	ldr	r1, [pc, #12]	@ (8007e24 <stdio_exit_handler+0x10>)
 8007e18:	4803      	ldr	r0, [pc, #12]	@ (8007e28 <stdio_exit_handler+0x14>)
 8007e1a:	f000 b869 	b.w	8007ef0 <_fwalk_sglue>
 8007e1e:	bf00      	nop
 8007e20:	2000007c 	.word	0x2000007c
 8007e24:	0800aa75 	.word	0x0800aa75
 8007e28:	2000008c 	.word	0x2000008c

08007e2c <cleanup_stdio>:
 8007e2c:	6841      	ldr	r1, [r0, #4]
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e60 <cleanup_stdio+0x34>)
 8007e30:	4299      	cmp	r1, r3
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	d001      	beq.n	8007e3c <cleanup_stdio+0x10>
 8007e38:	f002 fe1c 	bl	800aa74 <_fflush_r>
 8007e3c:	68a1      	ldr	r1, [r4, #8]
 8007e3e:	4b09      	ldr	r3, [pc, #36]	@ (8007e64 <cleanup_stdio+0x38>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	d002      	beq.n	8007e4a <cleanup_stdio+0x1e>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f002 fe15 	bl	800aa74 <_fflush_r>
 8007e4a:	68e1      	ldr	r1, [r4, #12]
 8007e4c:	4b06      	ldr	r3, [pc, #24]	@ (8007e68 <cleanup_stdio+0x3c>)
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	d004      	beq.n	8007e5c <cleanup_stdio+0x30>
 8007e52:	4620      	mov	r0, r4
 8007e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e58:	f002 be0c 	b.w	800aa74 <_fflush_r>
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000874 	.word	0x20000874
 8007e64:	200008dc 	.word	0x200008dc
 8007e68:	20000944 	.word	0x20000944

08007e6c <global_stdio_init.part.0>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e9c <global_stdio_init.part.0+0x30>)
 8007e70:	4c0b      	ldr	r4, [pc, #44]	@ (8007ea0 <global_stdio_init.part.0+0x34>)
 8007e72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea4 <global_stdio_init.part.0+0x38>)
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	4620      	mov	r0, r4
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2104      	movs	r1, #4
 8007e7c:	f7ff ff94 	bl	8007da8 <std>
 8007e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e84:	2201      	movs	r2, #1
 8007e86:	2109      	movs	r1, #9
 8007e88:	f7ff ff8e 	bl	8007da8 <std>
 8007e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e90:	2202      	movs	r2, #2
 8007e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e96:	2112      	movs	r1, #18
 8007e98:	f7ff bf86 	b.w	8007da8 <std>
 8007e9c:	200009ac 	.word	0x200009ac
 8007ea0:	20000874 	.word	0x20000874
 8007ea4:	08007e15 	.word	0x08007e15

08007ea8 <__sfp_lock_acquire>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	@ (8007eb0 <__sfp_lock_acquire+0x8>)
 8007eaa:	f000 b96e 	b.w	800818a <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200009b5 	.word	0x200009b5

08007eb4 <__sfp_lock_release>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	@ (8007ebc <__sfp_lock_release+0x8>)
 8007eb6:	f000 b969 	b.w	800818c <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	200009b5 	.word	0x200009b5

08007ec0 <__sinit>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	f7ff fff0 	bl	8007ea8 <__sfp_lock_acquire>
 8007ec8:	6a23      	ldr	r3, [r4, #32]
 8007eca:	b11b      	cbz	r3, 8007ed4 <__sinit+0x14>
 8007ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed0:	f7ff bff0 	b.w	8007eb4 <__sfp_lock_release>
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <__sinit+0x28>)
 8007ed6:	6223      	str	r3, [r4, #32]
 8007ed8:	4b04      	ldr	r3, [pc, #16]	@ (8007eec <__sinit+0x2c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f5      	bne.n	8007ecc <__sinit+0xc>
 8007ee0:	f7ff ffc4 	bl	8007e6c <global_stdio_init.part.0>
 8007ee4:	e7f2      	b.n	8007ecc <__sinit+0xc>
 8007ee6:	bf00      	nop
 8007ee8:	08007e2d 	.word	0x08007e2d
 8007eec:	200009ac 	.word	0x200009ac

08007ef0 <_fwalk_sglue>:
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	4688      	mov	r8, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	2600      	movs	r6, #0
 8007efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f00:	f1b9 0901 	subs.w	r9, r9, #1
 8007f04:	d505      	bpl.n	8007f12 <_fwalk_sglue+0x22>
 8007f06:	6824      	ldr	r4, [r4, #0]
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	d1f7      	bne.n	8007efc <_fwalk_sglue+0xc>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d907      	bls.n	8007f28 <_fwalk_sglue+0x38>
 8007f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	d003      	beq.n	8007f28 <_fwalk_sglue+0x38>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c0      	blx	r8
 8007f26:	4306      	orrs	r6, r0
 8007f28:	3568      	adds	r5, #104	@ 0x68
 8007f2a:	e7e9      	b.n	8007f00 <_fwalk_sglue+0x10>

08007f2c <sniprintf>:
 8007f2c:	b40c      	push	{r2, r3}
 8007f2e:	b530      	push	{r4, r5, lr}
 8007f30:	4b17      	ldr	r3, [pc, #92]	@ (8007f90 <sniprintf+0x64>)
 8007f32:	1e0c      	subs	r4, r1, #0
 8007f34:	681d      	ldr	r5, [r3, #0]
 8007f36:	b09d      	sub	sp, #116	@ 0x74
 8007f38:	da08      	bge.n	8007f4c <sniprintf+0x20>
 8007f3a:	238b      	movs	r3, #139	@ 0x8b
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f42:	b01d      	add	sp, #116	@ 0x74
 8007f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f48:	b002      	add	sp, #8
 8007f4a:	4770      	bx	lr
 8007f4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f54:	bf14      	ite	ne
 8007f56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f5a:	4623      	moveq	r3, r4
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f64:	9002      	str	r0, [sp, #8]
 8007f66:	9006      	str	r0, [sp, #24]
 8007f68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f6e:	ab21      	add	r3, sp, #132	@ 0x84
 8007f70:	a902      	add	r1, sp, #8
 8007f72:	4628      	mov	r0, r5
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	f002 fbfd 	bl	800a774 <_svfiprintf_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	bfbc      	itt	lt
 8007f7e:	238b      	movlt	r3, #139	@ 0x8b
 8007f80:	602b      	strlt	r3, [r5, #0]
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	d0dd      	beq.n	8007f42 <sniprintf+0x16>
 8007f86:	9b02      	ldr	r3, [sp, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e7d9      	b.n	8007f42 <sniprintf+0x16>
 8007f8e:	bf00      	nop
 8007f90:	20000088 	.word	0x20000088

08007f94 <siprintf>:
 8007f94:	b40e      	push	{r1, r2, r3}
 8007f96:	b500      	push	{lr}
 8007f98:	b09c      	sub	sp, #112	@ 0x70
 8007f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f9c:	9002      	str	r0, [sp, #8]
 8007f9e:	9006      	str	r0, [sp, #24]
 8007fa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fa4:	4809      	ldr	r0, [pc, #36]	@ (8007fcc <siprintf+0x38>)
 8007fa6:	9107      	str	r1, [sp, #28]
 8007fa8:	9104      	str	r1, [sp, #16]
 8007faa:	4909      	ldr	r1, [pc, #36]	@ (8007fd0 <siprintf+0x3c>)
 8007fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	a902      	add	r1, sp, #8
 8007fb8:	f002 fbdc 	bl	800a774 <_svfiprintf_r>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	b01c      	add	sp, #112	@ 0x70
 8007fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc8:	b003      	add	sp, #12
 8007fca:	4770      	bx	lr
 8007fcc:	20000088 	.word	0x20000088
 8007fd0:	ffff0208 	.word	0xffff0208

08007fd4 <__sread>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	f000 f886 	bl	80080ec <_read_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	bfab      	itete	ge
 8007fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fe8:	181b      	addge	r3, r3, r0
 8007fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fee:	bfac      	ite	ge
 8007ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ff2:	81a3      	strhlt	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__swrite>:
 8007ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	898b      	ldrh	r3, [r1, #12]
 8007ffe:	05db      	lsls	r3, r3, #23
 8008000:	4605      	mov	r5, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4616      	mov	r6, r2
 8008006:	d505      	bpl.n	8008014 <__swrite+0x1e>
 8008008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800c:	2302      	movs	r3, #2
 800800e:	2200      	movs	r2, #0
 8008010:	f000 f85a 	bl	80080c8 <_lseek_r>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4628      	mov	r0, r5
 8008026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	f000 b871 	b.w	8008110 <_write_r>

0800802e <__sseek>:
 800802e:	b510      	push	{r4, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008036:	f000 f847 	bl	80080c8 <_lseek_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	bf15      	itete	ne
 8008040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800804a:	81a3      	strheq	r3, [r4, #12]
 800804c:	bf18      	it	ne
 800804e:	81a3      	strhne	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__sclose>:
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 b827 	b.w	80080a8 <_close_r>

0800805a <memmove>:
 800805a:	4288      	cmp	r0, r1
 800805c:	b510      	push	{r4, lr}
 800805e:	eb01 0402 	add.w	r4, r1, r2
 8008062:	d902      	bls.n	800806a <memmove+0x10>
 8008064:	4284      	cmp	r4, r0
 8008066:	4623      	mov	r3, r4
 8008068:	d807      	bhi.n	800807a <memmove+0x20>
 800806a:	1e43      	subs	r3, r0, #1
 800806c:	42a1      	cmp	r1, r4
 800806e:	d008      	beq.n	8008082 <memmove+0x28>
 8008070:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008074:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008078:	e7f8      	b.n	800806c <memmove+0x12>
 800807a:	4402      	add	r2, r0
 800807c:	4601      	mov	r1, r0
 800807e:	428a      	cmp	r2, r1
 8008080:	d100      	bne.n	8008084 <memmove+0x2a>
 8008082:	bd10      	pop	{r4, pc}
 8008084:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008088:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800808c:	e7f7      	b.n	800807e <memmove+0x24>

0800808e <memset>:
 800808e:	4402      	add	r2, r0
 8008090:	4603      	mov	r3, r0
 8008092:	4293      	cmp	r3, r2
 8008094:	d100      	bne.n	8008098 <memset+0xa>
 8008096:	4770      	bx	lr
 8008098:	f803 1b01 	strb.w	r1, [r3], #1
 800809c:	e7f9      	b.n	8008092 <memset+0x4>
	...

080080a0 <_localeconv_r>:
 80080a0:	4800      	ldr	r0, [pc, #0]	@ (80080a4 <_localeconv_r+0x4>)
 80080a2:	4770      	bx	lr
 80080a4:	200001c8 	.word	0x200001c8

080080a8 <_close_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	@ (80080c4 <_close_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa ff42 	bl	8002f3c <_close>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_close_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_close_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	200009b0 	.word	0x200009b0

080080c8 <_lseek_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	@ (80080e8 <_lseek_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7fa ff57 	bl	8002f8a <_lseek>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_lseek_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_lseek_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	200009b0 	.word	0x200009b0

080080ec <_read_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	@ (800810c <_read_r+0x20>)
 80080f0:	4604      	mov	r4, r0
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7fa fee5 	bl	8002eca <_read>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_read_r+0x1e>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_read_r+0x1e>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200009b0 	.word	0x200009b0

08008110 <_write_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d07      	ldr	r5, [pc, #28]	@ (8008130 <_write_r+0x20>)
 8008114:	4604      	mov	r4, r0
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	2200      	movs	r2, #0
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7fa fef0 	bl	8002f04 <_write>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_write_r+0x1e>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	b103      	cbz	r3, 800812e <_write_r+0x1e>
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	200009b0 	.word	0x200009b0

08008134 <__errno>:
 8008134:	4b01      	ldr	r3, [pc, #4]	@ (800813c <__errno+0x8>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	20000088 	.word	0x20000088

08008140 <__libc_init_array>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4d0d      	ldr	r5, [pc, #52]	@ (8008178 <__libc_init_array+0x38>)
 8008144:	4c0d      	ldr	r4, [pc, #52]	@ (800817c <__libc_init_array+0x3c>)
 8008146:	1b64      	subs	r4, r4, r5
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	2600      	movs	r6, #0
 800814c:	42a6      	cmp	r6, r4
 800814e:	d109      	bne.n	8008164 <__libc_init_array+0x24>
 8008150:	4d0b      	ldr	r5, [pc, #44]	@ (8008180 <__libc_init_array+0x40>)
 8008152:	4c0c      	ldr	r4, [pc, #48]	@ (8008184 <__libc_init_array+0x44>)
 8008154:	f003 fe44 	bl	800bde0 <_init>
 8008158:	1b64      	subs	r4, r4, r5
 800815a:	10a4      	asrs	r4, r4, #2
 800815c:	2600      	movs	r6, #0
 800815e:	42a6      	cmp	r6, r4
 8008160:	d105      	bne.n	800816e <__libc_init_array+0x2e>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f855 3b04 	ldr.w	r3, [r5], #4
 8008168:	4798      	blx	r3
 800816a:	3601      	adds	r6, #1
 800816c:	e7ee      	b.n	800814c <__libc_init_array+0xc>
 800816e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008172:	4798      	blx	r3
 8008174:	3601      	adds	r6, #1
 8008176:	e7f2      	b.n	800815e <__libc_init_array+0x1e>
 8008178:	0800d320 	.word	0x0800d320
 800817c:	0800d320 	.word	0x0800d320
 8008180:	0800d320 	.word	0x0800d320
 8008184:	0800d324 	.word	0x0800d324

08008188 <__retarget_lock_init_recursive>:
 8008188:	4770      	bx	lr

0800818a <__retarget_lock_acquire_recursive>:
 800818a:	4770      	bx	lr

0800818c <__retarget_lock_release_recursive>:
 800818c:	4770      	bx	lr

0800818e <memcpy>:
 800818e:	440a      	add	r2, r1
 8008190:	4291      	cmp	r1, r2
 8008192:	f100 33ff 	add.w	r3, r0, #4294967295
 8008196:	d100      	bne.n	800819a <memcpy+0xc>
 8008198:	4770      	bx	lr
 800819a:	b510      	push	{r4, lr}
 800819c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a4:	4291      	cmp	r1, r2
 80081a6:	d1f9      	bne.n	800819c <memcpy+0xe>
 80081a8:	bd10      	pop	{r4, pc}
	...

080081ac <nanf>:
 80081ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80081b4 <nanf+0x8>
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	7fc00000 	.word	0x7fc00000

080081b8 <quorem>:
 80081b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	6903      	ldr	r3, [r0, #16]
 80081be:	690c      	ldr	r4, [r1, #16]
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	4607      	mov	r7, r0
 80081c4:	db7e      	blt.n	80082c4 <quorem+0x10c>
 80081c6:	3c01      	subs	r4, #1
 80081c8:	f101 0814 	add.w	r8, r1, #20
 80081cc:	00a3      	lsls	r3, r4, #2
 80081ce:	f100 0514 	add.w	r5, r0, #20
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e2:	3301      	adds	r3, #1
 80081e4:	429a      	cmp	r2, r3
 80081e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80081ee:	d32e      	bcc.n	800824e <quorem+0x96>
 80081f0:	f04f 0a00 	mov.w	sl, #0
 80081f4:	46c4      	mov	ip, r8
 80081f6:	46ae      	mov	lr, r5
 80081f8:	46d3      	mov	fp, sl
 80081fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081fe:	b298      	uxth	r0, r3
 8008200:	fb06 a000 	mla	r0, r6, r0, sl
 8008204:	0c02      	lsrs	r2, r0, #16
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	fb06 2303 	mla	r3, r6, r3, r2
 800820c:	f8de 2000 	ldr.w	r2, [lr]
 8008210:	b280      	uxth	r0, r0
 8008212:	b292      	uxth	r2, r2
 8008214:	1a12      	subs	r2, r2, r0
 8008216:	445a      	add	r2, fp
 8008218:	f8de 0000 	ldr.w	r0, [lr]
 800821c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008220:	b29b      	uxth	r3, r3
 8008222:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008226:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800822a:	b292      	uxth	r2, r2
 800822c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008230:	45e1      	cmp	r9, ip
 8008232:	f84e 2b04 	str.w	r2, [lr], #4
 8008236:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800823a:	d2de      	bcs.n	80081fa <quorem+0x42>
 800823c:	9b00      	ldr	r3, [sp, #0]
 800823e:	58eb      	ldr	r3, [r5, r3]
 8008240:	b92b      	cbnz	r3, 800824e <quorem+0x96>
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	3b04      	subs	r3, #4
 8008246:	429d      	cmp	r5, r3
 8008248:	461a      	mov	r2, r3
 800824a:	d32f      	bcc.n	80082ac <quorem+0xf4>
 800824c:	613c      	str	r4, [r7, #16]
 800824e:	4638      	mov	r0, r7
 8008250:	f001 f9c2 	bl	80095d8 <__mcmp>
 8008254:	2800      	cmp	r0, #0
 8008256:	db25      	blt.n	80082a4 <quorem+0xec>
 8008258:	4629      	mov	r1, r5
 800825a:	2000      	movs	r0, #0
 800825c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008260:	f8d1 c000 	ldr.w	ip, [r1]
 8008264:	fa1f fe82 	uxth.w	lr, r2
 8008268:	fa1f f38c 	uxth.w	r3, ip
 800826c:	eba3 030e 	sub.w	r3, r3, lr
 8008270:	4403      	add	r3, r0
 8008272:	0c12      	lsrs	r2, r2, #16
 8008274:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008278:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008282:	45c1      	cmp	r9, r8
 8008284:	f841 3b04 	str.w	r3, [r1], #4
 8008288:	ea4f 4022 	mov.w	r0, r2, asr #16
 800828c:	d2e6      	bcs.n	800825c <quorem+0xa4>
 800828e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008296:	b922      	cbnz	r2, 80082a2 <quorem+0xea>
 8008298:	3b04      	subs	r3, #4
 800829a:	429d      	cmp	r5, r3
 800829c:	461a      	mov	r2, r3
 800829e:	d30b      	bcc.n	80082b8 <quorem+0x100>
 80082a0:	613c      	str	r4, [r7, #16]
 80082a2:	3601      	adds	r6, #1
 80082a4:	4630      	mov	r0, r6
 80082a6:	b003      	add	sp, #12
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	3b04      	subs	r3, #4
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	d1cb      	bne.n	800824c <quorem+0x94>
 80082b4:	3c01      	subs	r4, #1
 80082b6:	e7c6      	b.n	8008246 <quorem+0x8e>
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	3b04      	subs	r3, #4
 80082bc:	2a00      	cmp	r2, #0
 80082be:	d1ef      	bne.n	80082a0 <quorem+0xe8>
 80082c0:	3c01      	subs	r4, #1
 80082c2:	e7ea      	b.n	800829a <quorem+0xe2>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7ee      	b.n	80082a6 <quorem+0xee>

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	69c7      	ldr	r7, [r0, #28]
 80082ce:	b099      	sub	sp, #100	@ 0x64
 80082d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80082d4:	ec55 4b10 	vmov	r4, r5, d0
 80082d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80082da:	9109      	str	r1, [sp, #36]	@ 0x24
 80082dc:	4683      	mov	fp, r0
 80082de:	920e      	str	r2, [sp, #56]	@ 0x38
 80082e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082e2:	b97f      	cbnz	r7, 8008304 <_dtoa_r+0x3c>
 80082e4:	2010      	movs	r0, #16
 80082e6:	f000 fdfd 	bl	8008ee4 <malloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80082f0:	b920      	cbnz	r0, 80082fc <_dtoa_r+0x34>
 80082f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008590 <_dtoa_r+0x2c8>)
 80082f4:	21ef      	movs	r1, #239	@ 0xef
 80082f6:	48a7      	ldr	r0, [pc, #668]	@ (8008594 <_dtoa_r+0x2cc>)
 80082f8:	f002 fc0e 	bl	800ab18 <__assert_func>
 80082fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008300:	6007      	str	r7, [r0, #0]
 8008302:	60c7      	str	r7, [r0, #12]
 8008304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	b159      	cbz	r1, 8008324 <_dtoa_r+0x5c>
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	604a      	str	r2, [r1, #4]
 8008310:	2301      	movs	r3, #1
 8008312:	4093      	lsls	r3, r2
 8008314:	608b      	str	r3, [r1, #8]
 8008316:	4658      	mov	r0, fp
 8008318:	f000 feda 	bl	80090d0 <_Bfree>
 800831c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	1e2b      	subs	r3, r5, #0
 8008326:	bfb9      	ittee	lt
 8008328:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800832c:	9303      	strlt	r3, [sp, #12]
 800832e:	2300      	movge	r3, #0
 8008330:	6033      	strge	r3, [r6, #0]
 8008332:	9f03      	ldr	r7, [sp, #12]
 8008334:	4b98      	ldr	r3, [pc, #608]	@ (8008598 <_dtoa_r+0x2d0>)
 8008336:	bfbc      	itt	lt
 8008338:	2201      	movlt	r2, #1
 800833a:	6032      	strlt	r2, [r6, #0]
 800833c:	43bb      	bics	r3, r7
 800833e:	d112      	bne.n	8008366 <_dtoa_r+0x9e>
 8008340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008342:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800834c:	4323      	orrs	r3, r4
 800834e:	f000 854d 	beq.w	8008dec <_dtoa_r+0xb24>
 8008352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008354:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80085ac <_dtoa_r+0x2e4>
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 854f 	beq.w	8008dfc <_dtoa_r+0xb34>
 800835e:	f10a 0303 	add.w	r3, sl, #3
 8008362:	f000 bd49 	b.w	8008df8 <_dtoa_r+0xb30>
 8008366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800836a:	2200      	movs	r2, #0
 800836c:	ec51 0b17 	vmov	r0, r1, d7
 8008370:	2300      	movs	r3, #0
 8008372:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008376:	f7f8 fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 800837a:	4680      	mov	r8, r0
 800837c:	b158      	cbz	r0, 8008396 <_dtoa_r+0xce>
 800837e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008380:	2301      	movs	r3, #1
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008386:	b113      	cbz	r3, 800838e <_dtoa_r+0xc6>
 8008388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800838a:	4b84      	ldr	r3, [pc, #528]	@ (800859c <_dtoa_r+0x2d4>)
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80085b0 <_dtoa_r+0x2e8>
 8008392:	f000 bd33 	b.w	8008dfc <_dtoa_r+0xb34>
 8008396:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800839a:	aa16      	add	r2, sp, #88	@ 0x58
 800839c:	a917      	add	r1, sp, #92	@ 0x5c
 800839e:	4658      	mov	r0, fp
 80083a0:	f001 fa3a 	bl	8009818 <__d2b>
 80083a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80083a8:	4681      	mov	r9, r0
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	d077      	beq.n	800849e <_dtoa_r+0x1d6>
 80083ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80083b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80083c8:	4619      	mov	r1, r3
 80083ca:	2200      	movs	r2, #0
 80083cc:	4b74      	ldr	r3, [pc, #464]	@ (80085a0 <_dtoa_r+0x2d8>)
 80083ce:	f7f7 ff7b 	bl	80002c8 <__aeabi_dsub>
 80083d2:	a369      	add	r3, pc, #420	@ (adr r3, 8008578 <_dtoa_r+0x2b0>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f8 f92e 	bl	8000638 <__aeabi_dmul>
 80083dc:	a368      	add	r3, pc, #416	@ (adr r3, 8008580 <_dtoa_r+0x2b8>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7f7 ff73 	bl	80002cc <__adddf3>
 80083e6:	4604      	mov	r4, r0
 80083e8:	4630      	mov	r0, r6
 80083ea:	460d      	mov	r5, r1
 80083ec:	f7f8 f8ba 	bl	8000564 <__aeabi_i2d>
 80083f0:	a365      	add	r3, pc, #404	@ (adr r3, 8008588 <_dtoa_r+0x2c0>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f7f8 f91f 	bl	8000638 <__aeabi_dmul>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f7 ff63 	bl	80002cc <__adddf3>
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	f7f8 fbc5 	bl	8000b98 <__aeabi_d2iz>
 800840e:	2200      	movs	r2, #0
 8008410:	4607      	mov	r7, r0
 8008412:	2300      	movs	r3, #0
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f8 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800841c:	b140      	cbz	r0, 8008430 <_dtoa_r+0x168>
 800841e:	4638      	mov	r0, r7
 8008420:	f7f8 f8a0 	bl	8000564 <__aeabi_i2d>
 8008424:	4622      	mov	r2, r4
 8008426:	462b      	mov	r3, r5
 8008428:	f7f8 fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800842c:	b900      	cbnz	r0, 8008430 <_dtoa_r+0x168>
 800842e:	3f01      	subs	r7, #1
 8008430:	2f16      	cmp	r7, #22
 8008432:	d851      	bhi.n	80084d8 <_dtoa_r+0x210>
 8008434:	4b5b      	ldr	r3, [pc, #364]	@ (80085a4 <_dtoa_r+0x2dc>)
 8008436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008442:	f7f8 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	d048      	beq.n	80084dc <_dtoa_r+0x214>
 800844a:	3f01      	subs	r7, #1
 800844c:	2300      	movs	r3, #0
 800844e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008452:	1b9b      	subs	r3, r3, r6
 8008454:	1e5a      	subs	r2, r3, #1
 8008456:	bf44      	itt	mi
 8008458:	f1c3 0801 	rsbmi	r8, r3, #1
 800845c:	2300      	movmi	r3, #0
 800845e:	9208      	str	r2, [sp, #32]
 8008460:	bf54      	ite	pl
 8008462:	f04f 0800 	movpl.w	r8, #0
 8008466:	9308      	strmi	r3, [sp, #32]
 8008468:	2f00      	cmp	r7, #0
 800846a:	db39      	blt.n	80084e0 <_dtoa_r+0x218>
 800846c:	9b08      	ldr	r3, [sp, #32]
 800846e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008470:	443b      	add	r3, r7
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	930a      	str	r3, [sp, #40]	@ 0x28
 8008478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847a:	2b09      	cmp	r3, #9
 800847c:	d864      	bhi.n	8008548 <_dtoa_r+0x280>
 800847e:	2b05      	cmp	r3, #5
 8008480:	bfc4      	itt	gt
 8008482:	3b04      	subgt	r3, #4
 8008484:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008488:	f1a3 0302 	sub.w	r3, r3, #2
 800848c:	bfcc      	ite	gt
 800848e:	2400      	movgt	r4, #0
 8008490:	2401      	movle	r4, #1
 8008492:	2b03      	cmp	r3, #3
 8008494:	d863      	bhi.n	800855e <_dtoa_r+0x296>
 8008496:	e8df f003 	tbb	[pc, r3]
 800849a:	372a      	.short	0x372a
 800849c:	5535      	.short	0x5535
 800849e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80084a2:	441e      	add	r6, r3
 80084a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	bfc1      	itttt	gt
 80084ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80084b0:	409f      	lslgt	r7, r3
 80084b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084ba:	bfd6      	itet	le
 80084bc:	f1c3 0320 	rsble	r3, r3, #32
 80084c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80084c4:	fa04 f003 	lslle.w	r0, r4, r3
 80084c8:	f7f8 f83c 	bl	8000544 <__aeabi_ui2d>
 80084cc:	2201      	movs	r2, #1
 80084ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80084d2:	3e01      	subs	r6, #1
 80084d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80084d6:	e777      	b.n	80083c8 <_dtoa_r+0x100>
 80084d8:	2301      	movs	r3, #1
 80084da:	e7b8      	b.n	800844e <_dtoa_r+0x186>
 80084dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80084de:	e7b7      	b.n	8008450 <_dtoa_r+0x188>
 80084e0:	427b      	negs	r3, r7
 80084e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80084e4:	2300      	movs	r3, #0
 80084e6:	eba8 0807 	sub.w	r8, r8, r7
 80084ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084ec:	e7c4      	b.n	8008478 <_dtoa_r+0x1b0>
 80084ee:	2300      	movs	r3, #0
 80084f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc35      	bgt.n	8008564 <_dtoa_r+0x29c>
 80084f8:	2301      	movs	r3, #1
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	461a      	mov	r2, r3
 8008500:	920e      	str	r2, [sp, #56]	@ 0x38
 8008502:	e00b      	b.n	800851c <_dtoa_r+0x254>
 8008504:	2301      	movs	r3, #1
 8008506:	e7f3      	b.n	80084f0 <_dtoa_r+0x228>
 8008508:	2300      	movs	r3, #0
 800850a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800850c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800850e:	18fb      	adds	r3, r7, r3
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	2b01      	cmp	r3, #1
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	bfb8      	it	lt
 800851a:	2301      	movlt	r3, #1
 800851c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008520:	2100      	movs	r1, #0
 8008522:	2204      	movs	r2, #4
 8008524:	f102 0514 	add.w	r5, r2, #20
 8008528:	429d      	cmp	r5, r3
 800852a:	d91f      	bls.n	800856c <_dtoa_r+0x2a4>
 800852c:	6041      	str	r1, [r0, #4]
 800852e:	4658      	mov	r0, fp
 8008530:	f000 fd8e 	bl	8009050 <_Balloc>
 8008534:	4682      	mov	sl, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d13c      	bne.n	80085b4 <_dtoa_r+0x2ec>
 800853a:	4b1b      	ldr	r3, [pc, #108]	@ (80085a8 <_dtoa_r+0x2e0>)
 800853c:	4602      	mov	r2, r0
 800853e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008542:	e6d8      	b.n	80082f6 <_dtoa_r+0x2e>
 8008544:	2301      	movs	r3, #1
 8008546:	e7e0      	b.n	800850a <_dtoa_r+0x242>
 8008548:	2401      	movs	r4, #1
 800854a:	2300      	movs	r3, #0
 800854c:	9309      	str	r3, [sp, #36]	@ 0x24
 800854e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	9307      	str	r3, [sp, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	2312      	movs	r3, #18
 800855c:	e7d0      	b.n	8008500 <_dtoa_r+0x238>
 800855e:	2301      	movs	r3, #1
 8008560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008562:	e7f5      	b.n	8008550 <_dtoa_r+0x288>
 8008564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	e7d7      	b.n	800851c <_dtoa_r+0x254>
 800856c:	3101      	adds	r1, #1
 800856e:	0052      	lsls	r2, r2, #1
 8008570:	e7d8      	b.n	8008524 <_dtoa_r+0x25c>
 8008572:	bf00      	nop
 8008574:	f3af 8000 	nop.w
 8008578:	636f4361 	.word	0x636f4361
 800857c:	3fd287a7 	.word	0x3fd287a7
 8008580:	8b60c8b3 	.word	0x8b60c8b3
 8008584:	3fc68a28 	.word	0x3fc68a28
 8008588:	509f79fb 	.word	0x509f79fb
 800858c:	3fd34413 	.word	0x3fd34413
 8008590:	0800cef2 	.word	0x0800cef2
 8008594:	0800cf09 	.word	0x0800cf09
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	0800cebd 	.word	0x0800cebd
 80085a0:	3ff80000 	.word	0x3ff80000
 80085a4:	0800d000 	.word	0x0800d000
 80085a8:	0800cf61 	.word	0x0800cf61
 80085ac:	0800ceee 	.word	0x0800ceee
 80085b0:	0800cebc 	.word	0x0800cebc
 80085b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085b8:	6018      	str	r0, [r3, #0]
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	2b0e      	cmp	r3, #14
 80085be:	f200 80a4 	bhi.w	800870a <_dtoa_r+0x442>
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	f000 80a1 	beq.w	800870a <_dtoa_r+0x442>
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	dd33      	ble.n	8008634 <_dtoa_r+0x36c>
 80085cc:	4bad      	ldr	r3, [pc, #692]	@ (8008884 <_dtoa_r+0x5bc>)
 80085ce:	f007 020f 	and.w	r2, r7, #15
 80085d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d6:	ed93 7b00 	vldr	d7, [r3]
 80085da:	05f8      	lsls	r0, r7, #23
 80085dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80085e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085e4:	d516      	bpl.n	8008614 <_dtoa_r+0x34c>
 80085e6:	4ba8      	ldr	r3, [pc, #672]	@ (8008888 <_dtoa_r+0x5c0>)
 80085e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085f0:	f7f8 f94c 	bl	800088c <__aeabi_ddiv>
 80085f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f8:	f004 040f 	and.w	r4, r4, #15
 80085fc:	2603      	movs	r6, #3
 80085fe:	4da2      	ldr	r5, [pc, #648]	@ (8008888 <_dtoa_r+0x5c0>)
 8008600:	b954      	cbnz	r4, 8008618 <_dtoa_r+0x350>
 8008602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860a:	f7f8 f93f 	bl	800088c <__aeabi_ddiv>
 800860e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008612:	e028      	b.n	8008666 <_dtoa_r+0x39e>
 8008614:	2602      	movs	r6, #2
 8008616:	e7f2      	b.n	80085fe <_dtoa_r+0x336>
 8008618:	07e1      	lsls	r1, r4, #31
 800861a:	d508      	bpl.n	800862e <_dtoa_r+0x366>
 800861c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008620:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008624:	f7f8 f808 	bl	8000638 <__aeabi_dmul>
 8008628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800862c:	3601      	adds	r6, #1
 800862e:	1064      	asrs	r4, r4, #1
 8008630:	3508      	adds	r5, #8
 8008632:	e7e5      	b.n	8008600 <_dtoa_r+0x338>
 8008634:	f000 80d2 	beq.w	80087dc <_dtoa_r+0x514>
 8008638:	427c      	negs	r4, r7
 800863a:	4b92      	ldr	r3, [pc, #584]	@ (8008884 <_dtoa_r+0x5bc>)
 800863c:	4d92      	ldr	r5, [pc, #584]	@ (8008888 <_dtoa_r+0x5c0>)
 800863e:	f004 020f 	and.w	r2, r4, #15
 8008642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800864e:	f7f7 fff3 	bl	8000638 <__aeabi_dmul>
 8008652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008656:	1124      	asrs	r4, r4, #4
 8008658:	2300      	movs	r3, #0
 800865a:	2602      	movs	r6, #2
 800865c:	2c00      	cmp	r4, #0
 800865e:	f040 80b2 	bne.w	80087c6 <_dtoa_r+0x4fe>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1d3      	bne.n	800860e <_dtoa_r+0x346>
 8008666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008668:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 80b7 	beq.w	80087e0 <_dtoa_r+0x518>
 8008672:	4b86      	ldr	r3, [pc, #536]	@ (800888c <_dtoa_r+0x5c4>)
 8008674:	2200      	movs	r2, #0
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	f000 80ae 	beq.w	80087e0 <_dtoa_r+0x518>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80aa 	beq.w	80087e0 <_dtoa_r+0x518>
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dd37      	ble.n	8008702 <_dtoa_r+0x43a>
 8008692:	1e7b      	subs	r3, r7, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	4620      	mov	r0, r4
 8008698:	4b7d      	ldr	r3, [pc, #500]	@ (8008890 <_dtoa_r+0x5c8>)
 800869a:	2200      	movs	r2, #0
 800869c:	4629      	mov	r1, r5
 800869e:	f7f7 ffcb 	bl	8000638 <__aeabi_dmul>
 80086a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a6:	9c00      	ldr	r4, [sp, #0]
 80086a8:	3601      	adds	r6, #1
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7f7 ff5a 	bl	8000564 <__aeabi_i2d>
 80086b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086b4:	f7f7 ffc0 	bl	8000638 <__aeabi_dmul>
 80086b8:	4b76      	ldr	r3, [pc, #472]	@ (8008894 <_dtoa_r+0x5cc>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	f7f7 fe06 	bl	80002cc <__adddf3>
 80086c0:	4605      	mov	r5, r0
 80086c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	f040 808d 	bne.w	80087e6 <_dtoa_r+0x51e>
 80086cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d0:	4b71      	ldr	r3, [pc, #452]	@ (8008898 <_dtoa_r+0x5d0>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	f7f7 fdf8 	bl	80002c8 <__aeabi_dsub>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086e0:	462a      	mov	r2, r5
 80086e2:	4633      	mov	r3, r6
 80086e4:	f7f8 fa38 	bl	8000b58 <__aeabi_dcmpgt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f040 828b 	bne.w	8008c04 <_dtoa_r+0x93c>
 80086ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f2:	462a      	mov	r2, r5
 80086f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086f8:	f7f8 fa10 	bl	8000b1c <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f040 8128 	bne.w	8008952 <_dtoa_r+0x68a>
 8008702:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008706:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800870a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f2c0 815a 	blt.w	80089c6 <_dtoa_r+0x6fe>
 8008712:	2f0e      	cmp	r7, #14
 8008714:	f300 8157 	bgt.w	80089c6 <_dtoa_r+0x6fe>
 8008718:	4b5a      	ldr	r3, [pc, #360]	@ (8008884 <_dtoa_r+0x5bc>)
 800871a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800871e:	ed93 7b00 	vldr	d7, [r3]
 8008722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	ed8d 7b00 	vstr	d7, [sp]
 800872a:	da03      	bge.n	8008734 <_dtoa_r+0x46c>
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	f340 8101 	ble.w	8008936 <_dtoa_r+0x66e>
 8008734:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008738:	4656      	mov	r6, sl
 800873a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f8 f8a3 	bl	800088c <__aeabi_ddiv>
 8008746:	f7f8 fa27 	bl	8000b98 <__aeabi_d2iz>
 800874a:	4680      	mov	r8, r0
 800874c:	f7f7 ff0a 	bl	8000564 <__aeabi_i2d>
 8008750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008754:	f7f7 ff70 	bl	8000638 <__aeabi_dmul>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008764:	f7f7 fdb0 	bl	80002c8 <__aeabi_dsub>
 8008768:	f806 4b01 	strb.w	r4, [r6], #1
 800876c:	9d07      	ldr	r5, [sp, #28]
 800876e:	eba6 040a 	sub.w	r4, r6, sl
 8008772:	42a5      	cmp	r5, r4
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	f040 8117 	bne.w	80089aa <_dtoa_r+0x6e2>
 800877c:	f7f7 fda6 	bl	80002cc <__adddf3>
 8008780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008784:	4604      	mov	r4, r0
 8008786:	460d      	mov	r5, r1
 8008788:	f7f8 f9e6 	bl	8000b58 <__aeabi_dcmpgt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 80f9 	bne.w	8008984 <_dtoa_r+0x6bc>
 8008792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f8 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800879e:	b118      	cbz	r0, 80087a8 <_dtoa_r+0x4e0>
 80087a0:	f018 0f01 	tst.w	r8, #1
 80087a4:	f040 80ee 	bne.w	8008984 <_dtoa_r+0x6bc>
 80087a8:	4649      	mov	r1, r9
 80087aa:	4658      	mov	r0, fp
 80087ac:	f000 fc90 	bl	80090d0 <_Bfree>
 80087b0:	2300      	movs	r3, #0
 80087b2:	7033      	strb	r3, [r6, #0]
 80087b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087b6:	3701      	adds	r7, #1
 80087b8:	601f      	str	r7, [r3, #0]
 80087ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 831d 	beq.w	8008dfc <_dtoa_r+0xb34>
 80087c2:	601e      	str	r6, [r3, #0]
 80087c4:	e31a      	b.n	8008dfc <_dtoa_r+0xb34>
 80087c6:	07e2      	lsls	r2, r4, #31
 80087c8:	d505      	bpl.n	80087d6 <_dtoa_r+0x50e>
 80087ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087ce:	f7f7 ff33 	bl	8000638 <__aeabi_dmul>
 80087d2:	3601      	adds	r6, #1
 80087d4:	2301      	movs	r3, #1
 80087d6:	1064      	asrs	r4, r4, #1
 80087d8:	3508      	adds	r5, #8
 80087da:	e73f      	b.n	800865c <_dtoa_r+0x394>
 80087dc:	2602      	movs	r6, #2
 80087de:	e742      	b.n	8008666 <_dtoa_r+0x39e>
 80087e0:	9c07      	ldr	r4, [sp, #28]
 80087e2:	9704      	str	r7, [sp, #16]
 80087e4:	e761      	b.n	80086aa <_dtoa_r+0x3e2>
 80087e6:	4b27      	ldr	r3, [pc, #156]	@ (8008884 <_dtoa_r+0x5bc>)
 80087e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087f2:	4454      	add	r4, sl
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d053      	beq.n	80088a0 <_dtoa_r+0x5d8>
 80087f8:	4928      	ldr	r1, [pc, #160]	@ (800889c <_dtoa_r+0x5d4>)
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7f8 f846 	bl	800088c <__aeabi_ddiv>
 8008800:	4633      	mov	r3, r6
 8008802:	462a      	mov	r2, r5
 8008804:	f7f7 fd60 	bl	80002c8 <__aeabi_dsub>
 8008808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800880c:	4656      	mov	r6, sl
 800880e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008812:	f7f8 f9c1 	bl	8000b98 <__aeabi_d2iz>
 8008816:	4605      	mov	r5, r0
 8008818:	f7f7 fea4 	bl	8000564 <__aeabi_i2d>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008824:	f7f7 fd50 	bl	80002c8 <__aeabi_dsub>
 8008828:	3530      	adds	r5, #48	@ 0x30
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008832:	f806 5b01 	strb.w	r5, [r6], #1
 8008836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800883a:	f7f8 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	d171      	bne.n	8008926 <_dtoa_r+0x65e>
 8008842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008846:	4911      	ldr	r1, [pc, #68]	@ (800888c <_dtoa_r+0x5c4>)
 8008848:	2000      	movs	r0, #0
 800884a:	f7f7 fd3d 	bl	80002c8 <__aeabi_dsub>
 800884e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008852:	f7f8 f963 	bl	8000b1c <__aeabi_dcmplt>
 8008856:	2800      	cmp	r0, #0
 8008858:	f040 8095 	bne.w	8008986 <_dtoa_r+0x6be>
 800885c:	42a6      	cmp	r6, r4
 800885e:	f43f af50 	beq.w	8008702 <_dtoa_r+0x43a>
 8008862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008866:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <_dtoa_r+0x5c8>)
 8008868:	2200      	movs	r2, #0
 800886a:	f7f7 fee5 	bl	8000638 <__aeabi_dmul>
 800886e:	4b08      	ldr	r3, [pc, #32]	@ (8008890 <_dtoa_r+0x5c8>)
 8008870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008874:	2200      	movs	r2, #0
 8008876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800887a:	f7f7 fedd 	bl	8000638 <__aeabi_dmul>
 800887e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008882:	e7c4      	b.n	800880e <_dtoa_r+0x546>
 8008884:	0800d000 	.word	0x0800d000
 8008888:	0800cfd8 	.word	0x0800cfd8
 800888c:	3ff00000 	.word	0x3ff00000
 8008890:	40240000 	.word	0x40240000
 8008894:	401c0000 	.word	0x401c0000
 8008898:	40140000 	.word	0x40140000
 800889c:	3fe00000 	.word	0x3fe00000
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7f7 fec8 	bl	8000638 <__aeabi_dmul>
 80088a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80088ae:	4656      	mov	r6, sl
 80088b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b4:	f7f8 f970 	bl	8000b98 <__aeabi_d2iz>
 80088b8:	4605      	mov	r5, r0
 80088ba:	f7f7 fe53 	bl	8000564 <__aeabi_i2d>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c6:	f7f7 fcff 	bl	80002c8 <__aeabi_dsub>
 80088ca:	3530      	adds	r5, #48	@ 0x30
 80088cc:	f806 5b01 	strb.w	r5, [r6], #1
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	42a6      	cmp	r6, r4
 80088d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	d124      	bne.n	800892a <_dtoa_r+0x662>
 80088e0:	4bac      	ldr	r3, [pc, #688]	@ (8008b94 <_dtoa_r+0x8cc>)
 80088e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088e6:	f7f7 fcf1 	bl	80002cc <__adddf3>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088f2:	f7f8 f931 	bl	8000b58 <__aeabi_dcmpgt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d145      	bne.n	8008986 <_dtoa_r+0x6be>
 80088fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088fe:	49a5      	ldr	r1, [pc, #660]	@ (8008b94 <_dtoa_r+0x8cc>)
 8008900:	2000      	movs	r0, #0
 8008902:	f7f7 fce1 	bl	80002c8 <__aeabi_dsub>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890e:	f7f8 f905 	bl	8000b1c <__aeabi_dcmplt>
 8008912:	2800      	cmp	r0, #0
 8008914:	f43f aef5 	beq.w	8008702 <_dtoa_r+0x43a>
 8008918:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800891a:	1e73      	subs	r3, r6, #1
 800891c:	9315      	str	r3, [sp, #84]	@ 0x54
 800891e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008922:	2b30      	cmp	r3, #48	@ 0x30
 8008924:	d0f8      	beq.n	8008918 <_dtoa_r+0x650>
 8008926:	9f04      	ldr	r7, [sp, #16]
 8008928:	e73e      	b.n	80087a8 <_dtoa_r+0x4e0>
 800892a:	4b9b      	ldr	r3, [pc, #620]	@ (8008b98 <_dtoa_r+0x8d0>)
 800892c:	f7f7 fe84 	bl	8000638 <__aeabi_dmul>
 8008930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008934:	e7bc      	b.n	80088b0 <_dtoa_r+0x5e8>
 8008936:	d10c      	bne.n	8008952 <_dtoa_r+0x68a>
 8008938:	4b98      	ldr	r3, [pc, #608]	@ (8008b9c <_dtoa_r+0x8d4>)
 800893a:	2200      	movs	r2, #0
 800893c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008940:	f7f7 fe7a 	bl	8000638 <__aeabi_dmul>
 8008944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008948:	f7f8 f8fc 	bl	8000b44 <__aeabi_dcmpge>
 800894c:	2800      	cmp	r0, #0
 800894e:	f000 8157 	beq.w	8008c00 <_dtoa_r+0x938>
 8008952:	2400      	movs	r4, #0
 8008954:	4625      	mov	r5, r4
 8008956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008958:	43db      	mvns	r3, r3
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	4656      	mov	r6, sl
 800895e:	2700      	movs	r7, #0
 8008960:	4621      	mov	r1, r4
 8008962:	4658      	mov	r0, fp
 8008964:	f000 fbb4 	bl	80090d0 <_Bfree>
 8008968:	2d00      	cmp	r5, #0
 800896a:	d0dc      	beq.n	8008926 <_dtoa_r+0x65e>
 800896c:	b12f      	cbz	r7, 800897a <_dtoa_r+0x6b2>
 800896e:	42af      	cmp	r7, r5
 8008970:	d003      	beq.n	800897a <_dtoa_r+0x6b2>
 8008972:	4639      	mov	r1, r7
 8008974:	4658      	mov	r0, fp
 8008976:	f000 fbab 	bl	80090d0 <_Bfree>
 800897a:	4629      	mov	r1, r5
 800897c:	4658      	mov	r0, fp
 800897e:	f000 fba7 	bl	80090d0 <_Bfree>
 8008982:	e7d0      	b.n	8008926 <_dtoa_r+0x65e>
 8008984:	9704      	str	r7, [sp, #16]
 8008986:	4633      	mov	r3, r6
 8008988:	461e      	mov	r6, r3
 800898a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800898e:	2a39      	cmp	r2, #57	@ 0x39
 8008990:	d107      	bne.n	80089a2 <_dtoa_r+0x6da>
 8008992:	459a      	cmp	sl, r3
 8008994:	d1f8      	bne.n	8008988 <_dtoa_r+0x6c0>
 8008996:	9a04      	ldr	r2, [sp, #16]
 8008998:	3201      	adds	r2, #1
 800899a:	9204      	str	r2, [sp, #16]
 800899c:	2230      	movs	r2, #48	@ 0x30
 800899e:	f88a 2000 	strb.w	r2, [sl]
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	3201      	adds	r2, #1
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	e7bd      	b.n	8008926 <_dtoa_r+0x65e>
 80089aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008b98 <_dtoa_r+0x8d0>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	f7f7 fe43 	bl	8000638 <__aeabi_dmul>
 80089b2:	2200      	movs	r2, #0
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	460d      	mov	r5, r1
 80089ba:	f7f8 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80089be:	2800      	cmp	r0, #0
 80089c0:	f43f aebb 	beq.w	800873a <_dtoa_r+0x472>
 80089c4:	e6f0      	b.n	80087a8 <_dtoa_r+0x4e0>
 80089c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	f000 80db 	beq.w	8008b84 <_dtoa_r+0x8bc>
 80089ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089d0:	2a01      	cmp	r2, #1
 80089d2:	f300 80bf 	bgt.w	8008b54 <_dtoa_r+0x88c>
 80089d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80089d8:	2a00      	cmp	r2, #0
 80089da:	f000 80b7 	beq.w	8008b4c <_dtoa_r+0x884>
 80089de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089e4:	4646      	mov	r6, r8
 80089e6:	9a08      	ldr	r2, [sp, #32]
 80089e8:	2101      	movs	r1, #1
 80089ea:	441a      	add	r2, r3
 80089ec:	4658      	mov	r0, fp
 80089ee:	4498      	add	r8, r3
 80089f0:	9208      	str	r2, [sp, #32]
 80089f2:	f000 fc6b 	bl	80092cc <__i2b>
 80089f6:	4605      	mov	r5, r0
 80089f8:	b15e      	cbz	r6, 8008a12 <_dtoa_r+0x74a>
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd08      	ble.n	8008a12 <_dtoa_r+0x74a>
 8008a00:	42b3      	cmp	r3, r6
 8008a02:	9a08      	ldr	r2, [sp, #32]
 8008a04:	bfa8      	it	ge
 8008a06:	4633      	movge	r3, r6
 8008a08:	eba8 0803 	sub.w	r8, r8, r3
 8008a0c:	1af6      	subs	r6, r6, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	9308      	str	r3, [sp, #32]
 8008a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a14:	b1f3      	cbz	r3, 8008a54 <_dtoa_r+0x78c>
 8008a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 80b7 	beq.w	8008b8c <_dtoa_r+0x8c4>
 8008a1e:	b18c      	cbz	r4, 8008a44 <_dtoa_r+0x77c>
 8008a20:	4629      	mov	r1, r5
 8008a22:	4622      	mov	r2, r4
 8008a24:	4658      	mov	r0, fp
 8008a26:	f000 fd11 	bl	800944c <__pow5mult>
 8008a2a:	464a      	mov	r2, r9
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4605      	mov	r5, r0
 8008a30:	4658      	mov	r0, fp
 8008a32:	f000 fc61 	bl	80092f8 <__multiply>
 8008a36:	4649      	mov	r1, r9
 8008a38:	9004      	str	r0, [sp, #16]
 8008a3a:	4658      	mov	r0, fp
 8008a3c:	f000 fb48 	bl	80090d0 <_Bfree>
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	4699      	mov	r9, r3
 8008a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a46:	1b1a      	subs	r2, r3, r4
 8008a48:	d004      	beq.n	8008a54 <_dtoa_r+0x78c>
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4658      	mov	r0, fp
 8008a4e:	f000 fcfd 	bl	800944c <__pow5mult>
 8008a52:	4681      	mov	r9, r0
 8008a54:	2101      	movs	r1, #1
 8008a56:	4658      	mov	r0, fp
 8008a58:	f000 fc38 	bl	80092cc <__i2b>
 8008a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a5e:	4604      	mov	r4, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 81cf 	beq.w	8008e04 <_dtoa_r+0xb3c>
 8008a66:	461a      	mov	r2, r3
 8008a68:	4601      	mov	r1, r0
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 fcee 	bl	800944c <__pow5mult>
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	4604      	mov	r4, r0
 8008a76:	f300 8095 	bgt.w	8008ba4 <_dtoa_r+0x8dc>
 8008a7a:	9b02      	ldr	r3, [sp, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 8087 	bne.w	8008b90 <_dtoa_r+0x8c8>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 8089 	bne.w	8008ba0 <_dtoa_r+0x8d8>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a94:	0d1b      	lsrs	r3, r3, #20
 8008a96:	051b      	lsls	r3, r3, #20
 8008a98:	b12b      	cbz	r3, 8008aa6 <_dtoa_r+0x7de>
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	f108 0801 	add.w	r8, r8, #1
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 81b0 	beq.w	8008e10 <_dtoa_r+0xb48>
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ab6:	6918      	ldr	r0, [r3, #16]
 8008ab8:	f000 fbbc 	bl	8009234 <__hi0bits>
 8008abc:	f1c0 0020 	rsb	r0, r0, #32
 8008ac0:	9b08      	ldr	r3, [sp, #32]
 8008ac2:	4418      	add	r0, r3
 8008ac4:	f010 001f 	ands.w	r0, r0, #31
 8008ac8:	d077      	beq.n	8008bba <_dtoa_r+0x8f2>
 8008aca:	f1c0 0320 	rsb	r3, r0, #32
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	dd6b      	ble.n	8008baa <_dtoa_r+0x8e2>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	f1c0 001c 	rsb	r0, r0, #28
 8008ad8:	4403      	add	r3, r0
 8008ada:	4480      	add	r8, r0
 8008adc:	4406      	add	r6, r0
 8008ade:	9308      	str	r3, [sp, #32]
 8008ae0:	f1b8 0f00 	cmp.w	r8, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x82a>
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4658      	mov	r0, fp
 8008aec:	f000 fd08 	bl	8009500 <__lshift>
 8008af0:	4681      	mov	r9, r0
 8008af2:	9b08      	ldr	r3, [sp, #32]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd05      	ble.n	8008b04 <_dtoa_r+0x83c>
 8008af8:	4621      	mov	r1, r4
 8008afa:	461a      	mov	r2, r3
 8008afc:	4658      	mov	r0, fp
 8008afe:	f000 fcff 	bl	8009500 <__lshift>
 8008b02:	4604      	mov	r4, r0
 8008b04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d059      	beq.n	8008bbe <_dtoa_r+0x8f6>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	f000 fd63 	bl	80095d8 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da53      	bge.n	8008bbe <_dtoa_r+0x8f6>
 8008b16:	1e7b      	subs	r3, r7, #1
 8008b18:	9304      	str	r3, [sp, #16]
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	220a      	movs	r2, #10
 8008b20:	4658      	mov	r0, fp
 8008b22:	f000 faf7 	bl	8009114 <__multadd>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b28:	4681      	mov	r9, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8172 	beq.w	8008e14 <_dtoa_r+0xb4c>
 8008b30:	2300      	movs	r3, #0
 8008b32:	4629      	mov	r1, r5
 8008b34:	220a      	movs	r2, #10
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 faec 	bl	8009114 <__multadd>
 8008b3c:	9b00      	ldr	r3, [sp, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	4605      	mov	r5, r0
 8008b42:	dc67      	bgt.n	8008c14 <_dtoa_r+0x94c>
 8008b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc41      	bgt.n	8008bce <_dtoa_r+0x906>
 8008b4a:	e063      	b.n	8008c14 <_dtoa_r+0x94c>
 8008b4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b52:	e746      	b.n	80089e2 <_dtoa_r+0x71a>
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	1e5c      	subs	r4, r3, #1
 8008b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5a:	42a3      	cmp	r3, r4
 8008b5c:	bfbf      	itttt	lt
 8008b5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008b62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b64:	1ae3      	sublt	r3, r4, r3
 8008b66:	bfb4      	ite	lt
 8008b68:	18d2      	addlt	r2, r2, r3
 8008b6a:	1b1c      	subge	r4, r3, r4
 8008b6c:	9b07      	ldr	r3, [sp, #28]
 8008b6e:	bfbc      	itt	lt
 8008b70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008b72:	2400      	movlt	r4, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb5      	itete	lt
 8008b78:	eba8 0603 	sublt.w	r6, r8, r3
 8008b7c:	9b07      	ldrge	r3, [sp, #28]
 8008b7e:	2300      	movlt	r3, #0
 8008b80:	4646      	movge	r6, r8
 8008b82:	e730      	b.n	80089e6 <_dtoa_r+0x71e>
 8008b84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b88:	4646      	mov	r6, r8
 8008b8a:	e735      	b.n	80089f8 <_dtoa_r+0x730>
 8008b8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b8e:	e75c      	b.n	8008a4a <_dtoa_r+0x782>
 8008b90:	2300      	movs	r3, #0
 8008b92:	e788      	b.n	8008aa6 <_dtoa_r+0x7de>
 8008b94:	3fe00000 	.word	0x3fe00000
 8008b98:	40240000 	.word	0x40240000
 8008b9c:	40140000 	.word	0x40140000
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	e780      	b.n	8008aa6 <_dtoa_r+0x7de>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ba8:	e782      	b.n	8008ab0 <_dtoa_r+0x7e8>
 8008baa:	d099      	beq.n	8008ae0 <_dtoa_r+0x818>
 8008bac:	9a08      	ldr	r2, [sp, #32]
 8008bae:	331c      	adds	r3, #28
 8008bb0:	441a      	add	r2, r3
 8008bb2:	4498      	add	r8, r3
 8008bb4:	441e      	add	r6, r3
 8008bb6:	9208      	str	r2, [sp, #32]
 8008bb8:	e792      	b.n	8008ae0 <_dtoa_r+0x818>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	e7f6      	b.n	8008bac <_dtoa_r+0x8e4>
 8008bbe:	9b07      	ldr	r3, [sp, #28]
 8008bc0:	9704      	str	r7, [sp, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dc20      	bgt.n	8008c08 <_dtoa_r+0x940>
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	dd1e      	ble.n	8008c0c <_dtoa_r+0x944>
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f47f aec0 	bne.w	8008956 <_dtoa_r+0x68e>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	2205      	movs	r2, #5
 8008bda:	4658      	mov	r0, fp
 8008bdc:	f000 fa9a 	bl	8009114 <__multadd>
 8008be0:	4601      	mov	r1, r0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4648      	mov	r0, r9
 8008be6:	f000 fcf7 	bl	80095d8 <__mcmp>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f77f aeb3 	ble.w	8008956 <_dtoa_r+0x68e>
 8008bf0:	4656      	mov	r6, sl
 8008bf2:	2331      	movs	r3, #49	@ 0x31
 8008bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	e6ae      	b.n	800895e <_dtoa_r+0x696>
 8008c00:	9c07      	ldr	r4, [sp, #28]
 8008c02:	9704      	str	r7, [sp, #16]
 8008c04:	4625      	mov	r5, r4
 8008c06:	e7f3      	b.n	8008bf0 <_dtoa_r+0x928>
 8008c08:	9b07      	ldr	r3, [sp, #28]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8104 	beq.w	8008e1c <_dtoa_r+0xb54>
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	dd05      	ble.n	8008c24 <_dtoa_r+0x95c>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4632      	mov	r2, r6
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f000 fc6f 	bl	8009500 <__lshift>
 8008c22:	4605      	mov	r5, r0
 8008c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d05a      	beq.n	8008ce0 <_dtoa_r+0xa18>
 8008c2a:	6869      	ldr	r1, [r5, #4]
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	f000 fa0f 	bl	8009050 <_Balloc>
 8008c32:	4606      	mov	r6, r0
 8008c34:	b928      	cbnz	r0, 8008c42 <_dtoa_r+0x97a>
 8008c36:	4b84      	ldr	r3, [pc, #528]	@ (8008e48 <_dtoa_r+0xb80>)
 8008c38:	4602      	mov	r2, r0
 8008c3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c3e:	f7ff bb5a 	b.w	80082f6 <_dtoa_r+0x2e>
 8008c42:	692a      	ldr	r2, [r5, #16]
 8008c44:	3202      	adds	r2, #2
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	f105 010c 	add.w	r1, r5, #12
 8008c4c:	300c      	adds	r0, #12
 8008c4e:	f7ff fa9e 	bl	800818e <memcpy>
 8008c52:	2201      	movs	r2, #1
 8008c54:	4631      	mov	r1, r6
 8008c56:	4658      	mov	r0, fp
 8008c58:	f000 fc52 	bl	8009500 <__lshift>
 8008c5c:	f10a 0301 	add.w	r3, sl, #1
 8008c60:	9307      	str	r3, [sp, #28]
 8008c62:	9b00      	ldr	r3, [sp, #0]
 8008c64:	4453      	add	r3, sl
 8008c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	462f      	mov	r7, r5
 8008c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c72:	4605      	mov	r5, r0
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	4621      	mov	r1, r4
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	4648      	mov	r0, r9
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	f7ff fa9b 	bl	80081b8 <quorem>
 8008c82:	4639      	mov	r1, r7
 8008c84:	9002      	str	r0, [sp, #8]
 8008c86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c8a:	4648      	mov	r0, r9
 8008c8c:	f000 fca4 	bl	80095d8 <__mcmp>
 8008c90:	462a      	mov	r2, r5
 8008c92:	9008      	str	r0, [sp, #32]
 8008c94:	4621      	mov	r1, r4
 8008c96:	4658      	mov	r0, fp
 8008c98:	f000 fcba 	bl	8009610 <__mdiff>
 8008c9c:	68c2      	ldr	r2, [r0, #12]
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	bb02      	cbnz	r2, 8008ce4 <_dtoa_r+0xa1c>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fc97 	bl	80095d8 <__mcmp>
 8008caa:	4602      	mov	r2, r0
 8008cac:	4631      	mov	r1, r6
 8008cae:	4658      	mov	r0, fp
 8008cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cb2:	f000 fa0d 	bl	80090d0 <_Bfree>
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cba:	9e07      	ldr	r6, [sp, #28]
 8008cbc:	ea43 0102 	orr.w	r1, r3, r2
 8008cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cc2:	4319      	orrs	r1, r3
 8008cc4:	d110      	bne.n	8008ce8 <_dtoa_r+0xa20>
 8008cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cca:	d029      	beq.n	8008d20 <_dtoa_r+0xa58>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd02      	ble.n	8008cd8 <_dtoa_r+0xa10>
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	f883 8000 	strb.w	r8, [r3]
 8008cde:	e63f      	b.n	8008960 <_dtoa_r+0x698>
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	e7bb      	b.n	8008c5c <_dtoa_r+0x994>
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	e7e1      	b.n	8008cac <_dtoa_r+0x9e4>
 8008ce8:	9b08      	ldr	r3, [sp, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	db04      	blt.n	8008cf8 <_dtoa_r+0xa30>
 8008cee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cf4:	430b      	orrs	r3, r1
 8008cf6:	d120      	bne.n	8008d3a <_dtoa_r+0xa72>
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	dded      	ble.n	8008cd8 <_dtoa_r+0xa10>
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4658      	mov	r0, fp
 8008d02:	f000 fbfd 	bl	8009500 <__lshift>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4681      	mov	r9, r0
 8008d0a:	f000 fc65 	bl	80095d8 <__mcmp>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	dc03      	bgt.n	8008d1a <_dtoa_r+0xa52>
 8008d12:	d1e1      	bne.n	8008cd8 <_dtoa_r+0xa10>
 8008d14:	f018 0f01 	tst.w	r8, #1
 8008d18:	d0de      	beq.n	8008cd8 <_dtoa_r+0xa10>
 8008d1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d1e:	d1d8      	bne.n	8008cd2 <_dtoa_r+0xa0a>
 8008d20:	9a00      	ldr	r2, [sp, #0]
 8008d22:	2339      	movs	r3, #57	@ 0x39
 8008d24:	7013      	strb	r3, [r2, #0]
 8008d26:	4633      	mov	r3, r6
 8008d28:	461e      	mov	r6, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d30:	2a39      	cmp	r2, #57	@ 0x39
 8008d32:	d052      	beq.n	8008dda <_dtoa_r+0xb12>
 8008d34:	3201      	adds	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	e612      	b.n	8008960 <_dtoa_r+0x698>
 8008d3a:	2a00      	cmp	r2, #0
 8008d3c:	dd07      	ble.n	8008d4e <_dtoa_r+0xa86>
 8008d3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d42:	d0ed      	beq.n	8008d20 <_dtoa_r+0xa58>
 8008d44:	9a00      	ldr	r2, [sp, #0]
 8008d46:	f108 0301 	add.w	r3, r8, #1
 8008d4a:	7013      	strb	r3, [r2, #0]
 8008d4c:	e608      	b.n	8008960 <_dtoa_r+0x698>
 8008d4e:	9b07      	ldr	r3, [sp, #28]
 8008d50:	9a07      	ldr	r2, [sp, #28]
 8008d52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d028      	beq.n	8008dae <_dtoa_r+0xae6>
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	2300      	movs	r3, #0
 8008d60:	220a      	movs	r2, #10
 8008d62:	4658      	mov	r0, fp
 8008d64:	f000 f9d6 	bl	8009114 <__multadd>
 8008d68:	42af      	cmp	r7, r5
 8008d6a:	4681      	mov	r9, r0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	f04f 020a 	mov.w	r2, #10
 8008d74:	4639      	mov	r1, r7
 8008d76:	4658      	mov	r0, fp
 8008d78:	d107      	bne.n	8008d8a <_dtoa_r+0xac2>
 8008d7a:	f000 f9cb 	bl	8009114 <__multadd>
 8008d7e:	4607      	mov	r7, r0
 8008d80:	4605      	mov	r5, r0
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	3301      	adds	r3, #1
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	e774      	b.n	8008c74 <_dtoa_r+0x9ac>
 8008d8a:	f000 f9c3 	bl	8009114 <__multadd>
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4607      	mov	r7, r0
 8008d92:	2300      	movs	r3, #0
 8008d94:	220a      	movs	r2, #10
 8008d96:	4658      	mov	r0, fp
 8008d98:	f000 f9bc 	bl	8009114 <__multadd>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	e7f0      	b.n	8008d82 <_dtoa_r+0xaba>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bfcc      	ite	gt
 8008da6:	461e      	movgt	r6, r3
 8008da8:	2601      	movle	r6, #1
 8008daa:	4456      	add	r6, sl
 8008dac:	2700      	movs	r7, #0
 8008dae:	4649      	mov	r1, r9
 8008db0:	2201      	movs	r2, #1
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 fba4 	bl	8009500 <__lshift>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4681      	mov	r9, r0
 8008dbc:	f000 fc0c 	bl	80095d8 <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	dcb0      	bgt.n	8008d26 <_dtoa_r+0xa5e>
 8008dc4:	d102      	bne.n	8008dcc <_dtoa_r+0xb04>
 8008dc6:	f018 0f01 	tst.w	r8, #1
 8008dca:	d1ac      	bne.n	8008d26 <_dtoa_r+0xa5e>
 8008dcc:	4633      	mov	r3, r6
 8008dce:	461e      	mov	r6, r3
 8008dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd4:	2a30      	cmp	r2, #48	@ 0x30
 8008dd6:	d0fa      	beq.n	8008dce <_dtoa_r+0xb06>
 8008dd8:	e5c2      	b.n	8008960 <_dtoa_r+0x698>
 8008dda:	459a      	cmp	sl, r3
 8008ddc:	d1a4      	bne.n	8008d28 <_dtoa_r+0xa60>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	3301      	adds	r3, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	2331      	movs	r3, #49	@ 0x31
 8008de6:	f88a 3000 	strb.w	r3, [sl]
 8008dea:	e5b9      	b.n	8008960 <_dtoa_r+0x698>
 8008dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e4c <_dtoa_r+0xb84>
 8008df2:	b11b      	cbz	r3, 8008dfc <_dtoa_r+0xb34>
 8008df4:	f10a 0308 	add.w	r3, sl, #8
 8008df8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	b019      	add	sp, #100	@ 0x64
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	f77f ae37 	ble.w	8008a7a <_dtoa_r+0x7b2>
 8008e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e10:	2001      	movs	r0, #1
 8008e12:	e655      	b.n	8008ac0 <_dtoa_r+0x7f8>
 8008e14:	9b00      	ldr	r3, [sp, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f77f aed6 	ble.w	8008bc8 <_dtoa_r+0x900>
 8008e1c:	4656      	mov	r6, sl
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4648      	mov	r0, r9
 8008e22:	f7ff f9c9 	bl	80081b8 <quorem>
 8008e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e2a:	f806 8b01 	strb.w	r8, [r6], #1
 8008e2e:	9b00      	ldr	r3, [sp, #0]
 8008e30:	eba6 020a 	sub.w	r2, r6, sl
 8008e34:	4293      	cmp	r3, r2
 8008e36:	ddb3      	ble.n	8008da0 <_dtoa_r+0xad8>
 8008e38:	4649      	mov	r1, r9
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f000 f968 	bl	8009114 <__multadd>
 8008e44:	4681      	mov	r9, r0
 8008e46:	e7ea      	b.n	8008e1e <_dtoa_r+0xb56>
 8008e48:	0800cf61 	.word	0x0800cf61
 8008e4c:	0800cee5 	.word	0x0800cee5

08008e50 <_free_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4605      	mov	r5, r0
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d041      	beq.n	8008edc <_free_r+0x8c>
 8008e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5c:	1f0c      	subs	r4, r1, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	18e4      	addlt	r4, r4, r3
 8008e64:	f000 f8e8 	bl	8009038 <__malloc_lock>
 8008e68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <_free_r+0x90>)
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	b933      	cbnz	r3, 8008e7c <_free_r+0x2c>
 8008e6e:	6063      	str	r3, [r4, #4]
 8008e70:	6014      	str	r4, [r2, #0]
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e78:	f000 b8e4 	b.w	8009044 <__malloc_unlock>
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d908      	bls.n	8008e92 <_free_r+0x42>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	1821      	adds	r1, r4, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	bf01      	itttt	eq
 8008e88:	6819      	ldreq	r1, [r3, #0]
 8008e8a:	685b      	ldreq	r3, [r3, #4]
 8008e8c:	1809      	addeq	r1, r1, r0
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	e7ed      	b.n	8008e6e <_free_r+0x1e>
 8008e92:	461a      	mov	r2, r3
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b10b      	cbz	r3, 8008e9c <_free_r+0x4c>
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	d9fa      	bls.n	8008e92 <_free_r+0x42>
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	1850      	adds	r0, r2, r1
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d10b      	bne.n	8008ebc <_free_r+0x6c>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	4401      	add	r1, r0
 8008ea8:	1850      	adds	r0, r2, r1
 8008eaa:	4283      	cmp	r3, r0
 8008eac:	6011      	str	r1, [r2, #0]
 8008eae:	d1e0      	bne.n	8008e72 <_free_r+0x22>
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	4408      	add	r0, r1
 8008eb8:	6010      	str	r0, [r2, #0]
 8008eba:	e7da      	b.n	8008e72 <_free_r+0x22>
 8008ebc:	d902      	bls.n	8008ec4 <_free_r+0x74>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	e7d6      	b.n	8008e72 <_free_r+0x22>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	1821      	adds	r1, r4, r0
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	bf04      	itt	eq
 8008ecc:	6819      	ldreq	r1, [r3, #0]
 8008ece:	685b      	ldreq	r3, [r3, #4]
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	bf04      	itt	eq
 8008ed4:	1809      	addeq	r1, r1, r0
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	6054      	str	r4, [r2, #4]
 8008eda:	e7ca      	b.n	8008e72 <_free_r+0x22>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	200009bc 	.word	0x200009bc

08008ee4 <malloc>:
 8008ee4:	4b02      	ldr	r3, [pc, #8]	@ (8008ef0 <malloc+0xc>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f000 b825 	b.w	8008f38 <_malloc_r>
 8008eee:	bf00      	nop
 8008ef0:	20000088 	.word	0x20000088

08008ef4 <sbrk_aligned>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f34 <sbrk_aligned+0x40>)
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6831      	ldr	r1, [r6, #0]
 8008efc:	4605      	mov	r5, r0
 8008efe:	b911      	cbnz	r1, 8008f06 <sbrk_aligned+0x12>
 8008f00:	f001 fdf2 	bl	800aae8 <_sbrk_r>
 8008f04:	6030      	str	r0, [r6, #0]
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f001 fded 	bl	800aae8 <_sbrk_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d103      	bne.n	8008f1a <sbrk_aligned+0x26>
 8008f12:	f04f 34ff 	mov.w	r4, #4294967295
 8008f16:	4620      	mov	r0, r4
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d0f8      	beq.n	8008f16 <sbrk_aligned+0x22>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f001 fdde 	bl	800aae8 <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d1f2      	bne.n	8008f16 <sbrk_aligned+0x22>
 8008f30:	e7ef      	b.n	8008f12 <sbrk_aligned+0x1e>
 8008f32:	bf00      	nop
 8008f34:	200009b8 	.word	0x200009b8

08008f38 <_malloc_r>:
 8008f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	1ccd      	adds	r5, r1, #3
 8008f3e:	f025 0503 	bic.w	r5, r5, #3
 8008f42:	3508      	adds	r5, #8
 8008f44:	2d0c      	cmp	r5, #12
 8008f46:	bf38      	it	cc
 8008f48:	250c      	movcc	r5, #12
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	db01      	blt.n	8008f54 <_malloc_r+0x1c>
 8008f50:	42a9      	cmp	r1, r5
 8008f52:	d904      	bls.n	8008f5e <_malloc_r+0x26>
 8008f54:	230c      	movs	r3, #12
 8008f56:	6033      	str	r3, [r6, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009034 <_malloc_r+0xfc>
 8008f62:	f000 f869 	bl	8009038 <__malloc_lock>
 8008f66:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6a:	461c      	mov	r4, r3
 8008f6c:	bb44      	cbnz	r4, 8008fc0 <_malloc_r+0x88>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ffbf 	bl	8008ef4 <sbrk_aligned>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	4604      	mov	r4, r0
 8008f7a:	d158      	bne.n	800902e <_malloc_r+0xf6>
 8008f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f80:	4627      	mov	r7, r4
 8008f82:	2f00      	cmp	r7, #0
 8008f84:	d143      	bne.n	800900e <_malloc_r+0xd6>
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d04b      	beq.n	8009022 <_malloc_r+0xea>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	eb04 0903 	add.w	r9, r4, r3
 8008f94:	f001 fda8 	bl	800aae8 <_sbrk_r>
 8008f98:	4581      	cmp	r9, r0
 8008f9a:	d142      	bne.n	8009022 <_malloc_r+0xea>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	1a6d      	subs	r5, r5, r1
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffa6 	bl	8008ef4 <sbrk_aligned>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d03a      	beq.n	8009022 <_malloc_r+0xea>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	442b      	add	r3, r5
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	bb62      	cbnz	r2, 8009014 <_malloc_r+0xdc>
 8008fba:	f8c8 7000 	str.w	r7, [r8]
 8008fbe:	e00f      	b.n	8008fe0 <_malloc_r+0xa8>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	1b52      	subs	r2, r2, r5
 8008fc4:	d420      	bmi.n	8009008 <_malloc_r+0xd0>
 8008fc6:	2a0b      	cmp	r2, #11
 8008fc8:	d917      	bls.n	8008ffa <_malloc_r+0xc2>
 8008fca:	1961      	adds	r1, r4, r5
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	6025      	str	r5, [r4, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	6059      	strne	r1, [r3, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	bf08      	it	eq
 8008fd8:	f8c8 1000 	streq.w	r1, [r8]
 8008fdc:	5162      	str	r2, [r4, r5]
 8008fde:	604b      	str	r3, [r1, #4]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f82f 	bl	8009044 <__malloc_unlock>
 8008fe6:	f104 000b 	add.w	r0, r4, #11
 8008fea:	1d23      	adds	r3, r4, #4
 8008fec:	f020 0007 	bic.w	r0, r0, #7
 8008ff0:	1ac2      	subs	r2, r0, r3
 8008ff2:	bf1c      	itt	ne
 8008ff4:	1a1b      	subne	r3, r3, r0
 8008ff6:	50a3      	strne	r3, [r4, r2]
 8008ff8:	e7af      	b.n	8008f5a <_malloc_r+0x22>
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	bf0c      	ite	eq
 8009000:	f8c8 2000 	streq.w	r2, [r8]
 8009004:	605a      	strne	r2, [r3, #4]
 8009006:	e7eb      	b.n	8008fe0 <_malloc_r+0xa8>
 8009008:	4623      	mov	r3, r4
 800900a:	6864      	ldr	r4, [r4, #4]
 800900c:	e7ae      	b.n	8008f6c <_malloc_r+0x34>
 800900e:	463c      	mov	r4, r7
 8009010:	687f      	ldr	r7, [r7, #4]
 8009012:	e7b6      	b.n	8008f82 <_malloc_r+0x4a>
 8009014:	461a      	mov	r2, r3
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	42a3      	cmp	r3, r4
 800901a:	d1fb      	bne.n	8009014 <_malloc_r+0xdc>
 800901c:	2300      	movs	r3, #0
 800901e:	6053      	str	r3, [r2, #4]
 8009020:	e7de      	b.n	8008fe0 <_malloc_r+0xa8>
 8009022:	230c      	movs	r3, #12
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	4630      	mov	r0, r6
 8009028:	f000 f80c 	bl	8009044 <__malloc_unlock>
 800902c:	e794      	b.n	8008f58 <_malloc_r+0x20>
 800902e:	6005      	str	r5, [r0, #0]
 8009030:	e7d6      	b.n	8008fe0 <_malloc_r+0xa8>
 8009032:	bf00      	nop
 8009034:	200009bc 	.word	0x200009bc

08009038 <__malloc_lock>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__malloc_lock+0x8>)
 800903a:	f7ff b8a6 	b.w	800818a <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	200009b4 	.word	0x200009b4

08009044 <__malloc_unlock>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__malloc_unlock+0x8>)
 8009046:	f7ff b8a1 	b.w	800818c <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	200009b4 	.word	0x200009b4

08009050 <_Balloc>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	69c6      	ldr	r6, [r0, #28]
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	b976      	cbnz	r6, 8009078 <_Balloc+0x28>
 800905a:	2010      	movs	r0, #16
 800905c:	f7ff ff42 	bl	8008ee4 <malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	61e0      	str	r0, [r4, #28]
 8009064:	b920      	cbnz	r0, 8009070 <_Balloc+0x20>
 8009066:	4b18      	ldr	r3, [pc, #96]	@ (80090c8 <_Balloc+0x78>)
 8009068:	4818      	ldr	r0, [pc, #96]	@ (80090cc <_Balloc+0x7c>)
 800906a:	216b      	movs	r1, #107	@ 0x6b
 800906c:	f001 fd54 	bl	800ab18 <__assert_func>
 8009070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009074:	6006      	str	r6, [r0, #0]
 8009076:	60c6      	str	r6, [r0, #12]
 8009078:	69e6      	ldr	r6, [r4, #28]
 800907a:	68f3      	ldr	r3, [r6, #12]
 800907c:	b183      	cbz	r3, 80090a0 <_Balloc+0x50>
 800907e:	69e3      	ldr	r3, [r4, #28]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009086:	b9b8      	cbnz	r0, 80090b8 <_Balloc+0x68>
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f605 	lsl.w	r6, r1, r5
 800908e:	1d72      	adds	r2, r6, #5
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	4620      	mov	r0, r4
 8009094:	f001 fd5e 	bl	800ab54 <_calloc_r>
 8009098:	b160      	cbz	r0, 80090b4 <_Balloc+0x64>
 800909a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800909e:	e00e      	b.n	80090be <_Balloc+0x6e>
 80090a0:	2221      	movs	r2, #33	@ 0x21
 80090a2:	2104      	movs	r1, #4
 80090a4:	4620      	mov	r0, r4
 80090a6:	f001 fd55 	bl	800ab54 <_calloc_r>
 80090aa:	69e3      	ldr	r3, [r4, #28]
 80090ac:	60f0      	str	r0, [r6, #12]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e4      	bne.n	800907e <_Balloc+0x2e>
 80090b4:	2000      	movs	r0, #0
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	6802      	ldr	r2, [r0, #0]
 80090ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090be:	2300      	movs	r3, #0
 80090c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090c4:	e7f7      	b.n	80090b6 <_Balloc+0x66>
 80090c6:	bf00      	nop
 80090c8:	0800cef2 	.word	0x0800cef2
 80090cc:	0800cf72 	.word	0x0800cf72

080090d0 <_Bfree>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	69c6      	ldr	r6, [r0, #28]
 80090d4:	4605      	mov	r5, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	b976      	cbnz	r6, 80090f8 <_Bfree+0x28>
 80090da:	2010      	movs	r0, #16
 80090dc:	f7ff ff02 	bl	8008ee4 <malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	61e8      	str	r0, [r5, #28]
 80090e4:	b920      	cbnz	r0, 80090f0 <_Bfree+0x20>
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <_Bfree+0x3c>)
 80090e8:	4809      	ldr	r0, [pc, #36]	@ (8009110 <_Bfree+0x40>)
 80090ea:	218f      	movs	r1, #143	@ 0x8f
 80090ec:	f001 fd14 	bl	800ab18 <__assert_func>
 80090f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090f4:	6006      	str	r6, [r0, #0]
 80090f6:	60c6      	str	r6, [r0, #12]
 80090f8:	b13c      	cbz	r4, 800910a <_Bfree+0x3a>
 80090fa:	69eb      	ldr	r3, [r5, #28]
 80090fc:	6862      	ldr	r2, [r4, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009104:	6021      	str	r1, [r4, #0]
 8009106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	0800cef2 	.word	0x0800cef2
 8009110:	0800cf72 	.word	0x0800cf72

08009114 <__multadd>:
 8009114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	690d      	ldr	r5, [r1, #16]
 800911a:	4607      	mov	r7, r0
 800911c:	460c      	mov	r4, r1
 800911e:	461e      	mov	r6, r3
 8009120:	f101 0c14 	add.w	ip, r1, #20
 8009124:	2000      	movs	r0, #0
 8009126:	f8dc 3000 	ldr.w	r3, [ip]
 800912a:	b299      	uxth	r1, r3
 800912c:	fb02 6101 	mla	r1, r2, r1, r6
 8009130:	0c1e      	lsrs	r6, r3, #16
 8009132:	0c0b      	lsrs	r3, r1, #16
 8009134:	fb02 3306 	mla	r3, r2, r6, r3
 8009138:	b289      	uxth	r1, r1
 800913a:	3001      	adds	r0, #1
 800913c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009140:	4285      	cmp	r5, r0
 8009142:	f84c 1b04 	str.w	r1, [ip], #4
 8009146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800914a:	dcec      	bgt.n	8009126 <__multadd+0x12>
 800914c:	b30e      	cbz	r6, 8009192 <__multadd+0x7e>
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	42ab      	cmp	r3, r5
 8009152:	dc19      	bgt.n	8009188 <__multadd+0x74>
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4638      	mov	r0, r7
 8009158:	3101      	adds	r1, #1
 800915a:	f7ff ff79 	bl	8009050 <_Balloc>
 800915e:	4680      	mov	r8, r0
 8009160:	b928      	cbnz	r0, 800916e <__multadd+0x5a>
 8009162:	4602      	mov	r2, r0
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <__multadd+0x84>)
 8009166:	480d      	ldr	r0, [pc, #52]	@ (800919c <__multadd+0x88>)
 8009168:	21ba      	movs	r1, #186	@ 0xba
 800916a:	f001 fcd5 	bl	800ab18 <__assert_func>
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	3202      	adds	r2, #2
 8009172:	f104 010c 	add.w	r1, r4, #12
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	300c      	adds	r0, #12
 800917a:	f7ff f808 	bl	800818e <memcpy>
 800917e:	4621      	mov	r1, r4
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ffa5 	bl	80090d0 <_Bfree>
 8009186:	4644      	mov	r4, r8
 8009188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800918c:	3501      	adds	r5, #1
 800918e:	615e      	str	r6, [r3, #20]
 8009190:	6125      	str	r5, [r4, #16]
 8009192:	4620      	mov	r0, r4
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	0800cf61 	.word	0x0800cf61
 800919c:	0800cf72 	.word	0x0800cf72

080091a0 <__s2b>:
 80091a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a4:	460c      	mov	r4, r1
 80091a6:	4615      	mov	r5, r2
 80091a8:	461f      	mov	r7, r3
 80091aa:	2209      	movs	r2, #9
 80091ac:	3308      	adds	r3, #8
 80091ae:	4606      	mov	r6, r0
 80091b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b4:	2100      	movs	r1, #0
 80091b6:	2201      	movs	r2, #1
 80091b8:	429a      	cmp	r2, r3
 80091ba:	db09      	blt.n	80091d0 <__s2b+0x30>
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff ff47 	bl	8009050 <_Balloc>
 80091c2:	b940      	cbnz	r0, 80091d6 <__s2b+0x36>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b19      	ldr	r3, [pc, #100]	@ (800922c <__s2b+0x8c>)
 80091c8:	4819      	ldr	r0, [pc, #100]	@ (8009230 <__s2b+0x90>)
 80091ca:	21d3      	movs	r1, #211	@ 0xd3
 80091cc:	f001 fca4 	bl	800ab18 <__assert_func>
 80091d0:	0052      	lsls	r2, r2, #1
 80091d2:	3101      	adds	r1, #1
 80091d4:	e7f0      	b.n	80091b8 <__s2b+0x18>
 80091d6:	9b08      	ldr	r3, [sp, #32]
 80091d8:	6143      	str	r3, [r0, #20]
 80091da:	2d09      	cmp	r5, #9
 80091dc:	f04f 0301 	mov.w	r3, #1
 80091e0:	6103      	str	r3, [r0, #16]
 80091e2:	dd16      	ble.n	8009212 <__s2b+0x72>
 80091e4:	f104 0909 	add.w	r9, r4, #9
 80091e8:	46c8      	mov	r8, r9
 80091ea:	442c      	add	r4, r5
 80091ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091f0:	4601      	mov	r1, r0
 80091f2:	3b30      	subs	r3, #48	@ 0x30
 80091f4:	220a      	movs	r2, #10
 80091f6:	4630      	mov	r0, r6
 80091f8:	f7ff ff8c 	bl	8009114 <__multadd>
 80091fc:	45a0      	cmp	r8, r4
 80091fe:	d1f5      	bne.n	80091ec <__s2b+0x4c>
 8009200:	f1a5 0408 	sub.w	r4, r5, #8
 8009204:	444c      	add	r4, r9
 8009206:	1b2d      	subs	r5, r5, r4
 8009208:	1963      	adds	r3, r4, r5
 800920a:	42bb      	cmp	r3, r7
 800920c:	db04      	blt.n	8009218 <__s2b+0x78>
 800920e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009212:	340a      	adds	r4, #10
 8009214:	2509      	movs	r5, #9
 8009216:	e7f6      	b.n	8009206 <__s2b+0x66>
 8009218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800921c:	4601      	mov	r1, r0
 800921e:	3b30      	subs	r3, #48	@ 0x30
 8009220:	220a      	movs	r2, #10
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ff76 	bl	8009114 <__multadd>
 8009228:	e7ee      	b.n	8009208 <__s2b+0x68>
 800922a:	bf00      	nop
 800922c:	0800cf61 	.word	0x0800cf61
 8009230:	0800cf72 	.word	0x0800cf72

08009234 <__hi0bits>:
 8009234:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009238:	4603      	mov	r3, r0
 800923a:	bf36      	itet	cc
 800923c:	0403      	lslcc	r3, r0, #16
 800923e:	2000      	movcs	r0, #0
 8009240:	2010      	movcc	r0, #16
 8009242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009246:	bf3c      	itt	cc
 8009248:	021b      	lslcc	r3, r3, #8
 800924a:	3008      	addcc	r0, #8
 800924c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009250:	bf3c      	itt	cc
 8009252:	011b      	lslcc	r3, r3, #4
 8009254:	3004      	addcc	r0, #4
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800925a:	bf3c      	itt	cc
 800925c:	009b      	lslcc	r3, r3, #2
 800925e:	3002      	addcc	r0, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	db05      	blt.n	8009270 <__hi0bits+0x3c>
 8009264:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009268:	f100 0001 	add.w	r0, r0, #1
 800926c:	bf08      	it	eq
 800926e:	2020      	moveq	r0, #32
 8009270:	4770      	bx	lr

08009272 <__lo0bits>:
 8009272:	6803      	ldr	r3, [r0, #0]
 8009274:	4602      	mov	r2, r0
 8009276:	f013 0007 	ands.w	r0, r3, #7
 800927a:	d00b      	beq.n	8009294 <__lo0bits+0x22>
 800927c:	07d9      	lsls	r1, r3, #31
 800927e:	d421      	bmi.n	80092c4 <__lo0bits+0x52>
 8009280:	0798      	lsls	r0, r3, #30
 8009282:	bf49      	itett	mi
 8009284:	085b      	lsrmi	r3, r3, #1
 8009286:	089b      	lsrpl	r3, r3, #2
 8009288:	2001      	movmi	r0, #1
 800928a:	6013      	strmi	r3, [r2, #0]
 800928c:	bf5c      	itt	pl
 800928e:	6013      	strpl	r3, [r2, #0]
 8009290:	2002      	movpl	r0, #2
 8009292:	4770      	bx	lr
 8009294:	b299      	uxth	r1, r3
 8009296:	b909      	cbnz	r1, 800929c <__lo0bits+0x2a>
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	2010      	movs	r0, #16
 800929c:	b2d9      	uxtb	r1, r3
 800929e:	b909      	cbnz	r1, 80092a4 <__lo0bits+0x32>
 80092a0:	3008      	adds	r0, #8
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	0719      	lsls	r1, r3, #28
 80092a6:	bf04      	itt	eq
 80092a8:	091b      	lsreq	r3, r3, #4
 80092aa:	3004      	addeq	r0, #4
 80092ac:	0799      	lsls	r1, r3, #30
 80092ae:	bf04      	itt	eq
 80092b0:	089b      	lsreq	r3, r3, #2
 80092b2:	3002      	addeq	r0, #2
 80092b4:	07d9      	lsls	r1, r3, #31
 80092b6:	d403      	bmi.n	80092c0 <__lo0bits+0x4e>
 80092b8:	085b      	lsrs	r3, r3, #1
 80092ba:	f100 0001 	add.w	r0, r0, #1
 80092be:	d003      	beq.n	80092c8 <__lo0bits+0x56>
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	4770      	bx	lr
 80092c4:	2000      	movs	r0, #0
 80092c6:	4770      	bx	lr
 80092c8:	2020      	movs	r0, #32
 80092ca:	4770      	bx	lr

080092cc <__i2b>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	460c      	mov	r4, r1
 80092d0:	2101      	movs	r1, #1
 80092d2:	f7ff febd 	bl	8009050 <_Balloc>
 80092d6:	4602      	mov	r2, r0
 80092d8:	b928      	cbnz	r0, 80092e6 <__i2b+0x1a>
 80092da:	4b05      	ldr	r3, [pc, #20]	@ (80092f0 <__i2b+0x24>)
 80092dc:	4805      	ldr	r0, [pc, #20]	@ (80092f4 <__i2b+0x28>)
 80092de:	f240 1145 	movw	r1, #325	@ 0x145
 80092e2:	f001 fc19 	bl	800ab18 <__assert_func>
 80092e6:	2301      	movs	r3, #1
 80092e8:	6144      	str	r4, [r0, #20]
 80092ea:	6103      	str	r3, [r0, #16]
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	0800cf61 	.word	0x0800cf61
 80092f4:	0800cf72 	.word	0x0800cf72

080092f8 <__multiply>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4614      	mov	r4, r2
 80092fe:	690a      	ldr	r2, [r1, #16]
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	429a      	cmp	r2, r3
 8009304:	bfa8      	it	ge
 8009306:	4623      	movge	r3, r4
 8009308:	460f      	mov	r7, r1
 800930a:	bfa4      	itt	ge
 800930c:	460c      	movge	r4, r1
 800930e:	461f      	movge	r7, r3
 8009310:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009314:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	6861      	ldr	r1, [r4, #4]
 800931c:	eb0a 0609 	add.w	r6, sl, r9
 8009320:	42b3      	cmp	r3, r6
 8009322:	b085      	sub	sp, #20
 8009324:	bfb8      	it	lt
 8009326:	3101      	addlt	r1, #1
 8009328:	f7ff fe92 	bl	8009050 <_Balloc>
 800932c:	b930      	cbnz	r0, 800933c <__multiply+0x44>
 800932e:	4602      	mov	r2, r0
 8009330:	4b44      	ldr	r3, [pc, #272]	@ (8009444 <__multiply+0x14c>)
 8009332:	4845      	ldr	r0, [pc, #276]	@ (8009448 <__multiply+0x150>)
 8009334:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009338:	f001 fbee 	bl	800ab18 <__assert_func>
 800933c:	f100 0514 	add.w	r5, r0, #20
 8009340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009344:	462b      	mov	r3, r5
 8009346:	2200      	movs	r2, #0
 8009348:	4543      	cmp	r3, r8
 800934a:	d321      	bcc.n	8009390 <__multiply+0x98>
 800934c:	f107 0114 	add.w	r1, r7, #20
 8009350:	f104 0214 	add.w	r2, r4, #20
 8009354:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009358:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800935c:	9302      	str	r3, [sp, #8]
 800935e:	1b13      	subs	r3, r2, r4
 8009360:	3b15      	subs	r3, #21
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	3304      	adds	r3, #4
 8009368:	f104 0715 	add.w	r7, r4, #21
 800936c:	42ba      	cmp	r2, r7
 800936e:	bf38      	it	cc
 8009370:	2304      	movcc	r3, #4
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	9103      	str	r1, [sp, #12]
 8009378:	428b      	cmp	r3, r1
 800937a:	d80c      	bhi.n	8009396 <__multiply+0x9e>
 800937c:	2e00      	cmp	r6, #0
 800937e:	dd03      	ble.n	8009388 <__multiply+0x90>
 8009380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009384:	2b00      	cmp	r3, #0
 8009386:	d05b      	beq.n	8009440 <__multiply+0x148>
 8009388:	6106      	str	r6, [r0, #16]
 800938a:	b005      	add	sp, #20
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	f843 2b04 	str.w	r2, [r3], #4
 8009394:	e7d8      	b.n	8009348 <__multiply+0x50>
 8009396:	f8b1 a000 	ldrh.w	sl, [r1]
 800939a:	f1ba 0f00 	cmp.w	sl, #0
 800939e:	d024      	beq.n	80093ea <__multiply+0xf2>
 80093a0:	f104 0e14 	add.w	lr, r4, #20
 80093a4:	46a9      	mov	r9, r5
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093ae:	f8d9 3000 	ldr.w	r3, [r9]
 80093b2:	fa1f fb87 	uxth.w	fp, r7
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80093bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093c0:	f8d9 7000 	ldr.w	r7, [r9]
 80093c4:	4463      	add	r3, ip
 80093c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80093ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093d8:	4572      	cmp	r2, lr
 80093da:	f849 3b04 	str.w	r3, [r9], #4
 80093de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093e2:	d8e2      	bhi.n	80093aa <__multiply+0xb2>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	f845 c003 	str.w	ip, [r5, r3]
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093f0:	3104      	adds	r1, #4
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	d021      	beq.n	800943c <__multiply+0x144>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	f104 0c14 	add.w	ip, r4, #20
 80093fe:	46ae      	mov	lr, r5
 8009400:	f04f 0a00 	mov.w	sl, #0
 8009404:	f8bc b000 	ldrh.w	fp, [ip]
 8009408:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800940c:	fb09 770b 	mla	r7, r9, fp, r7
 8009410:	4457      	add	r7, sl
 8009412:	b29b      	uxth	r3, r3
 8009414:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009418:	f84e 3b04 	str.w	r3, [lr], #4
 800941c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009424:	f8be 3000 	ldrh.w	r3, [lr]
 8009428:	fb09 330a 	mla	r3, r9, sl, r3
 800942c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009430:	4562      	cmp	r2, ip
 8009432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009436:	d8e5      	bhi.n	8009404 <__multiply+0x10c>
 8009438:	9f01      	ldr	r7, [sp, #4]
 800943a:	51eb      	str	r3, [r5, r7]
 800943c:	3504      	adds	r5, #4
 800943e:	e799      	b.n	8009374 <__multiply+0x7c>
 8009440:	3e01      	subs	r6, #1
 8009442:	e79b      	b.n	800937c <__multiply+0x84>
 8009444:	0800cf61 	.word	0x0800cf61
 8009448:	0800cf72 	.word	0x0800cf72

0800944c <__pow5mult>:
 800944c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009450:	4615      	mov	r5, r2
 8009452:	f012 0203 	ands.w	r2, r2, #3
 8009456:	4607      	mov	r7, r0
 8009458:	460e      	mov	r6, r1
 800945a:	d007      	beq.n	800946c <__pow5mult+0x20>
 800945c:	4c25      	ldr	r4, [pc, #148]	@ (80094f4 <__pow5mult+0xa8>)
 800945e:	3a01      	subs	r2, #1
 8009460:	2300      	movs	r3, #0
 8009462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009466:	f7ff fe55 	bl	8009114 <__multadd>
 800946a:	4606      	mov	r6, r0
 800946c:	10ad      	asrs	r5, r5, #2
 800946e:	d03d      	beq.n	80094ec <__pow5mult+0xa0>
 8009470:	69fc      	ldr	r4, [r7, #28]
 8009472:	b97c      	cbnz	r4, 8009494 <__pow5mult+0x48>
 8009474:	2010      	movs	r0, #16
 8009476:	f7ff fd35 	bl	8008ee4 <malloc>
 800947a:	4602      	mov	r2, r0
 800947c:	61f8      	str	r0, [r7, #28]
 800947e:	b928      	cbnz	r0, 800948c <__pow5mult+0x40>
 8009480:	4b1d      	ldr	r3, [pc, #116]	@ (80094f8 <__pow5mult+0xac>)
 8009482:	481e      	ldr	r0, [pc, #120]	@ (80094fc <__pow5mult+0xb0>)
 8009484:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009488:	f001 fb46 	bl	800ab18 <__assert_func>
 800948c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009490:	6004      	str	r4, [r0, #0]
 8009492:	60c4      	str	r4, [r0, #12]
 8009494:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800949c:	b94c      	cbnz	r4, 80094b2 <__pow5mult+0x66>
 800949e:	f240 2171 	movw	r1, #625	@ 0x271
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff ff12 	bl	80092cc <__i2b>
 80094a8:	2300      	movs	r3, #0
 80094aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ae:	4604      	mov	r4, r0
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	f04f 0900 	mov.w	r9, #0
 80094b6:	07eb      	lsls	r3, r5, #31
 80094b8:	d50a      	bpl.n	80094d0 <__pow5mult+0x84>
 80094ba:	4631      	mov	r1, r6
 80094bc:	4622      	mov	r2, r4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ff1a 	bl	80092f8 <__multiply>
 80094c4:	4631      	mov	r1, r6
 80094c6:	4680      	mov	r8, r0
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff fe01 	bl	80090d0 <_Bfree>
 80094ce:	4646      	mov	r6, r8
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	d00b      	beq.n	80094ec <__pow5mult+0xa0>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	b938      	cbnz	r0, 80094e8 <__pow5mult+0x9c>
 80094d8:	4622      	mov	r2, r4
 80094da:	4621      	mov	r1, r4
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ff0b 	bl	80092f8 <__multiply>
 80094e2:	6020      	str	r0, [r4, #0]
 80094e4:	f8c0 9000 	str.w	r9, [r0]
 80094e8:	4604      	mov	r4, r0
 80094ea:	e7e4      	b.n	80094b6 <__pow5mult+0x6a>
 80094ec:	4630      	mov	r0, r6
 80094ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f2:	bf00      	nop
 80094f4:	0800cfcc 	.word	0x0800cfcc
 80094f8:	0800cef2 	.word	0x0800cef2
 80094fc:	0800cf72 	.word	0x0800cf72

08009500 <__lshift>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	460c      	mov	r4, r1
 8009506:	6849      	ldr	r1, [r1, #4]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	4607      	mov	r7, r0
 8009512:	4691      	mov	r9, r2
 8009514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009518:	f108 0601 	add.w	r6, r8, #1
 800951c:	42b3      	cmp	r3, r6
 800951e:	db0b      	blt.n	8009538 <__lshift+0x38>
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff fd95 	bl	8009050 <_Balloc>
 8009526:	4605      	mov	r5, r0
 8009528:	b948      	cbnz	r0, 800953e <__lshift+0x3e>
 800952a:	4602      	mov	r2, r0
 800952c:	4b28      	ldr	r3, [pc, #160]	@ (80095d0 <__lshift+0xd0>)
 800952e:	4829      	ldr	r0, [pc, #164]	@ (80095d4 <__lshift+0xd4>)
 8009530:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009534:	f001 faf0 	bl	800ab18 <__assert_func>
 8009538:	3101      	adds	r1, #1
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	e7ee      	b.n	800951c <__lshift+0x1c>
 800953e:	2300      	movs	r3, #0
 8009540:	f100 0114 	add.w	r1, r0, #20
 8009544:	f100 0210 	add.w	r2, r0, #16
 8009548:	4618      	mov	r0, r3
 800954a:	4553      	cmp	r3, sl
 800954c:	db33      	blt.n	80095b6 <__lshift+0xb6>
 800954e:	6920      	ldr	r0, [r4, #16]
 8009550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009554:	f104 0314 	add.w	r3, r4, #20
 8009558:	f019 091f 	ands.w	r9, r9, #31
 800955c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009564:	d02b      	beq.n	80095be <__lshift+0xbe>
 8009566:	f1c9 0e20 	rsb	lr, r9, #32
 800956a:	468a      	mov	sl, r1
 800956c:	2200      	movs	r2, #0
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	fa00 f009 	lsl.w	r0, r0, r9
 8009574:	4310      	orrs	r0, r2
 8009576:	f84a 0b04 	str.w	r0, [sl], #4
 800957a:	f853 2b04 	ldr.w	r2, [r3], #4
 800957e:	459c      	cmp	ip, r3
 8009580:	fa22 f20e 	lsr.w	r2, r2, lr
 8009584:	d8f3      	bhi.n	800956e <__lshift+0x6e>
 8009586:	ebac 0304 	sub.w	r3, ip, r4
 800958a:	3b15      	subs	r3, #21
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	3304      	adds	r3, #4
 8009592:	f104 0015 	add.w	r0, r4, #21
 8009596:	4584      	cmp	ip, r0
 8009598:	bf38      	it	cc
 800959a:	2304      	movcc	r3, #4
 800959c:	50ca      	str	r2, [r1, r3]
 800959e:	b10a      	cbz	r2, 80095a4 <__lshift+0xa4>
 80095a0:	f108 0602 	add.w	r6, r8, #2
 80095a4:	3e01      	subs	r6, #1
 80095a6:	4638      	mov	r0, r7
 80095a8:	612e      	str	r6, [r5, #16]
 80095aa:	4621      	mov	r1, r4
 80095ac:	f7ff fd90 	bl	80090d0 <_Bfree>
 80095b0:	4628      	mov	r0, r5
 80095b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ba:	3301      	adds	r3, #1
 80095bc:	e7c5      	b.n	800954a <__lshift+0x4a>
 80095be:	3904      	subs	r1, #4
 80095c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80095c8:	459c      	cmp	ip, r3
 80095ca:	d8f9      	bhi.n	80095c0 <__lshift+0xc0>
 80095cc:	e7ea      	b.n	80095a4 <__lshift+0xa4>
 80095ce:	bf00      	nop
 80095d0:	0800cf61 	.word	0x0800cf61
 80095d4:	0800cf72 	.word	0x0800cf72

080095d8 <__mcmp>:
 80095d8:	690a      	ldr	r2, [r1, #16]
 80095da:	4603      	mov	r3, r0
 80095dc:	6900      	ldr	r0, [r0, #16]
 80095de:	1a80      	subs	r0, r0, r2
 80095e0:	b530      	push	{r4, r5, lr}
 80095e2:	d10e      	bne.n	8009602 <__mcmp+0x2a>
 80095e4:	3314      	adds	r3, #20
 80095e6:	3114      	adds	r1, #20
 80095e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095f8:	4295      	cmp	r5, r2
 80095fa:	d003      	beq.n	8009604 <__mcmp+0x2c>
 80095fc:	d205      	bcs.n	800960a <__mcmp+0x32>
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	bd30      	pop	{r4, r5, pc}
 8009604:	42a3      	cmp	r3, r4
 8009606:	d3f3      	bcc.n	80095f0 <__mcmp+0x18>
 8009608:	e7fb      	b.n	8009602 <__mcmp+0x2a>
 800960a:	2001      	movs	r0, #1
 800960c:	e7f9      	b.n	8009602 <__mcmp+0x2a>
	...

08009610 <__mdiff>:
 8009610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	4689      	mov	r9, r1
 8009616:	4606      	mov	r6, r0
 8009618:	4611      	mov	r1, r2
 800961a:	4648      	mov	r0, r9
 800961c:	4614      	mov	r4, r2
 800961e:	f7ff ffdb 	bl	80095d8 <__mcmp>
 8009622:	1e05      	subs	r5, r0, #0
 8009624:	d112      	bne.n	800964c <__mdiff+0x3c>
 8009626:	4629      	mov	r1, r5
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff fd11 	bl	8009050 <_Balloc>
 800962e:	4602      	mov	r2, r0
 8009630:	b928      	cbnz	r0, 800963e <__mdiff+0x2e>
 8009632:	4b3f      	ldr	r3, [pc, #252]	@ (8009730 <__mdiff+0x120>)
 8009634:	f240 2137 	movw	r1, #567	@ 0x237
 8009638:	483e      	ldr	r0, [pc, #248]	@ (8009734 <__mdiff+0x124>)
 800963a:	f001 fa6d 	bl	800ab18 <__assert_func>
 800963e:	2301      	movs	r3, #1
 8009640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009644:	4610      	mov	r0, r2
 8009646:	b003      	add	sp, #12
 8009648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964c:	bfbc      	itt	lt
 800964e:	464b      	movlt	r3, r9
 8009650:	46a1      	movlt	r9, r4
 8009652:	4630      	mov	r0, r6
 8009654:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009658:	bfba      	itte	lt
 800965a:	461c      	movlt	r4, r3
 800965c:	2501      	movlt	r5, #1
 800965e:	2500      	movge	r5, #0
 8009660:	f7ff fcf6 	bl	8009050 <_Balloc>
 8009664:	4602      	mov	r2, r0
 8009666:	b918      	cbnz	r0, 8009670 <__mdiff+0x60>
 8009668:	4b31      	ldr	r3, [pc, #196]	@ (8009730 <__mdiff+0x120>)
 800966a:	f240 2145 	movw	r1, #581	@ 0x245
 800966e:	e7e3      	b.n	8009638 <__mdiff+0x28>
 8009670:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009674:	6926      	ldr	r6, [r4, #16]
 8009676:	60c5      	str	r5, [r0, #12]
 8009678:	f109 0310 	add.w	r3, r9, #16
 800967c:	f109 0514 	add.w	r5, r9, #20
 8009680:	f104 0e14 	add.w	lr, r4, #20
 8009684:	f100 0b14 	add.w	fp, r0, #20
 8009688:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800968c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	46d9      	mov	r9, fp
 8009694:	f04f 0c00 	mov.w	ip, #0
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800969e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	fa1f f38a 	uxth.w	r3, sl
 80096a8:	4619      	mov	r1, r3
 80096aa:	b283      	uxth	r3, r0
 80096ac:	1acb      	subs	r3, r1, r3
 80096ae:	0c00      	lsrs	r0, r0, #16
 80096b0:	4463      	add	r3, ip
 80096b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096c0:	4576      	cmp	r6, lr
 80096c2:	f849 3b04 	str.w	r3, [r9], #4
 80096c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096ca:	d8e5      	bhi.n	8009698 <__mdiff+0x88>
 80096cc:	1b33      	subs	r3, r6, r4
 80096ce:	3b15      	subs	r3, #21
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	3415      	adds	r4, #21
 80096d6:	3304      	adds	r3, #4
 80096d8:	42a6      	cmp	r6, r4
 80096da:	bf38      	it	cc
 80096dc:	2304      	movcc	r3, #4
 80096de:	441d      	add	r5, r3
 80096e0:	445b      	add	r3, fp
 80096e2:	461e      	mov	r6, r3
 80096e4:	462c      	mov	r4, r5
 80096e6:	4544      	cmp	r4, r8
 80096e8:	d30e      	bcc.n	8009708 <__mdiff+0xf8>
 80096ea:	f108 0103 	add.w	r1, r8, #3
 80096ee:	1b49      	subs	r1, r1, r5
 80096f0:	f021 0103 	bic.w	r1, r1, #3
 80096f4:	3d03      	subs	r5, #3
 80096f6:	45a8      	cmp	r8, r5
 80096f8:	bf38      	it	cc
 80096fa:	2100      	movcc	r1, #0
 80096fc:	440b      	add	r3, r1
 80096fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009702:	b191      	cbz	r1, 800972a <__mdiff+0x11a>
 8009704:	6117      	str	r7, [r2, #16]
 8009706:	e79d      	b.n	8009644 <__mdiff+0x34>
 8009708:	f854 1b04 	ldr.w	r1, [r4], #4
 800970c:	46e6      	mov	lr, ip
 800970e:	0c08      	lsrs	r0, r1, #16
 8009710:	fa1c fc81 	uxtah	ip, ip, r1
 8009714:	4471      	add	r1, lr
 8009716:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800971a:	b289      	uxth	r1, r1
 800971c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009720:	f846 1b04 	str.w	r1, [r6], #4
 8009724:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009728:	e7dd      	b.n	80096e6 <__mdiff+0xd6>
 800972a:	3f01      	subs	r7, #1
 800972c:	e7e7      	b.n	80096fe <__mdiff+0xee>
 800972e:	bf00      	nop
 8009730:	0800cf61 	.word	0x0800cf61
 8009734:	0800cf72 	.word	0x0800cf72

08009738 <__ulp>:
 8009738:	b082      	sub	sp, #8
 800973a:	ed8d 0b00 	vstr	d0, [sp]
 800973e:	9a01      	ldr	r2, [sp, #4]
 8009740:	4b0f      	ldr	r3, [pc, #60]	@ (8009780 <__ulp+0x48>)
 8009742:	4013      	ands	r3, r2
 8009744:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009748:	2b00      	cmp	r3, #0
 800974a:	dc08      	bgt.n	800975e <__ulp+0x26>
 800974c:	425b      	negs	r3, r3
 800974e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009752:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009756:	da04      	bge.n	8009762 <__ulp+0x2a>
 8009758:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800975c:	4113      	asrs	r3, r2
 800975e:	2200      	movs	r2, #0
 8009760:	e008      	b.n	8009774 <__ulp+0x3c>
 8009762:	f1a2 0314 	sub.w	r3, r2, #20
 8009766:	2b1e      	cmp	r3, #30
 8009768:	bfda      	itte	le
 800976a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800976e:	40da      	lsrle	r2, r3
 8009770:	2201      	movgt	r2, #1
 8009772:	2300      	movs	r3, #0
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	ec41 0b10 	vmov	d0, r0, r1
 800977c:	b002      	add	sp, #8
 800977e:	4770      	bx	lr
 8009780:	7ff00000 	.word	0x7ff00000

08009784 <__b2d>:
 8009784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009788:	6906      	ldr	r6, [r0, #16]
 800978a:	f100 0814 	add.w	r8, r0, #20
 800978e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009792:	1f37      	subs	r7, r6, #4
 8009794:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009798:	4610      	mov	r0, r2
 800979a:	f7ff fd4b 	bl	8009234 <__hi0bits>
 800979e:	f1c0 0320 	rsb	r3, r0, #32
 80097a2:	280a      	cmp	r0, #10
 80097a4:	600b      	str	r3, [r1, #0]
 80097a6:	491b      	ldr	r1, [pc, #108]	@ (8009814 <__b2d+0x90>)
 80097a8:	dc15      	bgt.n	80097d6 <__b2d+0x52>
 80097aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80097ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80097b2:	45b8      	cmp	r8, r7
 80097b4:	ea43 0501 	orr.w	r5, r3, r1
 80097b8:	bf34      	ite	cc
 80097ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097be:	2300      	movcs	r3, #0
 80097c0:	3015      	adds	r0, #21
 80097c2:	fa02 f000 	lsl.w	r0, r2, r0
 80097c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80097ca:	4303      	orrs	r3, r0
 80097cc:	461c      	mov	r4, r3
 80097ce:	ec45 4b10 	vmov	d0, r4, r5
 80097d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d6:	45b8      	cmp	r8, r7
 80097d8:	bf3a      	itte	cc
 80097da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097de:	f1a6 0708 	subcc.w	r7, r6, #8
 80097e2:	2300      	movcs	r3, #0
 80097e4:	380b      	subs	r0, #11
 80097e6:	d012      	beq.n	800980e <__b2d+0x8a>
 80097e8:	f1c0 0120 	rsb	r1, r0, #32
 80097ec:	fa23 f401 	lsr.w	r4, r3, r1
 80097f0:	4082      	lsls	r2, r0
 80097f2:	4322      	orrs	r2, r4
 80097f4:	4547      	cmp	r7, r8
 80097f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80097fa:	bf8c      	ite	hi
 80097fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009800:	2200      	movls	r2, #0
 8009802:	4083      	lsls	r3, r0
 8009804:	40ca      	lsrs	r2, r1
 8009806:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800980a:	4313      	orrs	r3, r2
 800980c:	e7de      	b.n	80097cc <__b2d+0x48>
 800980e:	ea42 0501 	orr.w	r5, r2, r1
 8009812:	e7db      	b.n	80097cc <__b2d+0x48>
 8009814:	3ff00000 	.word	0x3ff00000

08009818 <__d2b>:
 8009818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800981c:	460f      	mov	r7, r1
 800981e:	2101      	movs	r1, #1
 8009820:	ec59 8b10 	vmov	r8, r9, d0
 8009824:	4616      	mov	r6, r2
 8009826:	f7ff fc13 	bl	8009050 <_Balloc>
 800982a:	4604      	mov	r4, r0
 800982c:	b930      	cbnz	r0, 800983c <__d2b+0x24>
 800982e:	4602      	mov	r2, r0
 8009830:	4b23      	ldr	r3, [pc, #140]	@ (80098c0 <__d2b+0xa8>)
 8009832:	4824      	ldr	r0, [pc, #144]	@ (80098c4 <__d2b+0xac>)
 8009834:	f240 310f 	movw	r1, #783	@ 0x30f
 8009838:	f001 f96e 	bl	800ab18 <__assert_func>
 800983c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009844:	b10d      	cbz	r5, 800984a <__d2b+0x32>
 8009846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	f1b8 0300 	subs.w	r3, r8, #0
 8009850:	d023      	beq.n	800989a <__d2b+0x82>
 8009852:	4668      	mov	r0, sp
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	f7ff fd0c 	bl	8009272 <__lo0bits>
 800985a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800985e:	b1d0      	cbz	r0, 8009896 <__d2b+0x7e>
 8009860:	f1c0 0320 	rsb	r3, r0, #32
 8009864:	fa02 f303 	lsl.w	r3, r2, r3
 8009868:	430b      	orrs	r3, r1
 800986a:	40c2      	lsrs	r2, r0
 800986c:	6163      	str	r3, [r4, #20]
 800986e:	9201      	str	r2, [sp, #4]
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	61a3      	str	r3, [r4, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	bf0c      	ite	eq
 8009878:	2201      	moveq	r2, #1
 800987a:	2202      	movne	r2, #2
 800987c:	6122      	str	r2, [r4, #16]
 800987e:	b1a5      	cbz	r5, 80098aa <__d2b+0x92>
 8009880:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009884:	4405      	add	r5, r0
 8009886:	603d      	str	r5, [r7, #0]
 8009888:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800988c:	6030      	str	r0, [r6, #0]
 800988e:	4620      	mov	r0, r4
 8009890:	b003      	add	sp, #12
 8009892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009896:	6161      	str	r1, [r4, #20]
 8009898:	e7ea      	b.n	8009870 <__d2b+0x58>
 800989a:	a801      	add	r0, sp, #4
 800989c:	f7ff fce9 	bl	8009272 <__lo0bits>
 80098a0:	9b01      	ldr	r3, [sp, #4]
 80098a2:	6163      	str	r3, [r4, #20]
 80098a4:	3020      	adds	r0, #32
 80098a6:	2201      	movs	r2, #1
 80098a8:	e7e8      	b.n	800987c <__d2b+0x64>
 80098aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098b2:	6038      	str	r0, [r7, #0]
 80098b4:	6918      	ldr	r0, [r3, #16]
 80098b6:	f7ff fcbd 	bl	8009234 <__hi0bits>
 80098ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098be:	e7e5      	b.n	800988c <__d2b+0x74>
 80098c0:	0800cf61 	.word	0x0800cf61
 80098c4:	0800cf72 	.word	0x0800cf72

080098c8 <__ratio>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	b085      	sub	sp, #20
 80098ce:	e9cd 1000 	strd	r1, r0, [sp]
 80098d2:	a902      	add	r1, sp, #8
 80098d4:	f7ff ff56 	bl	8009784 <__b2d>
 80098d8:	9800      	ldr	r0, [sp, #0]
 80098da:	a903      	add	r1, sp, #12
 80098dc:	ec55 4b10 	vmov	r4, r5, d0
 80098e0:	f7ff ff50 	bl	8009784 <__b2d>
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	6919      	ldr	r1, [r3, #16]
 80098e8:	9b00      	ldr	r3, [sp, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	1ac9      	subs	r1, r1, r3
 80098ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	ec5b ab10 	vmov	sl, fp, d0
 80098f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfce      	itee	gt
 8009900:	462a      	movgt	r2, r5
 8009902:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009906:	465a      	movle	r2, fp
 8009908:	462f      	mov	r7, r5
 800990a:	46d9      	mov	r9, fp
 800990c:	bfcc      	ite	gt
 800990e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009912:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009916:	464b      	mov	r3, r9
 8009918:	4652      	mov	r2, sl
 800991a:	4620      	mov	r0, r4
 800991c:	4639      	mov	r1, r7
 800991e:	f7f6 ffb5 	bl	800088c <__aeabi_ddiv>
 8009922:	ec41 0b10 	vmov	d0, r0, r1
 8009926:	b005      	add	sp, #20
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800992c <__copybits>:
 800992c:	3901      	subs	r1, #1
 800992e:	b570      	push	{r4, r5, r6, lr}
 8009930:	1149      	asrs	r1, r1, #5
 8009932:	6914      	ldr	r4, [r2, #16]
 8009934:	3101      	adds	r1, #1
 8009936:	f102 0314 	add.w	r3, r2, #20
 800993a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800993e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009942:	1f05      	subs	r5, r0, #4
 8009944:	42a3      	cmp	r3, r4
 8009946:	d30c      	bcc.n	8009962 <__copybits+0x36>
 8009948:	1aa3      	subs	r3, r4, r2
 800994a:	3b11      	subs	r3, #17
 800994c:	f023 0303 	bic.w	r3, r3, #3
 8009950:	3211      	adds	r2, #17
 8009952:	42a2      	cmp	r2, r4
 8009954:	bf88      	it	hi
 8009956:	2300      	movhi	r3, #0
 8009958:	4418      	add	r0, r3
 800995a:	2300      	movs	r3, #0
 800995c:	4288      	cmp	r0, r1
 800995e:	d305      	bcc.n	800996c <__copybits+0x40>
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	f853 6b04 	ldr.w	r6, [r3], #4
 8009966:	f845 6f04 	str.w	r6, [r5, #4]!
 800996a:	e7eb      	b.n	8009944 <__copybits+0x18>
 800996c:	f840 3b04 	str.w	r3, [r0], #4
 8009970:	e7f4      	b.n	800995c <__copybits+0x30>

08009972 <__any_on>:
 8009972:	f100 0214 	add.w	r2, r0, #20
 8009976:	6900      	ldr	r0, [r0, #16]
 8009978:	114b      	asrs	r3, r1, #5
 800997a:	4298      	cmp	r0, r3
 800997c:	b510      	push	{r4, lr}
 800997e:	db11      	blt.n	80099a4 <__any_on+0x32>
 8009980:	dd0a      	ble.n	8009998 <__any_on+0x26>
 8009982:	f011 011f 	ands.w	r1, r1, #31
 8009986:	d007      	beq.n	8009998 <__any_on+0x26>
 8009988:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800998c:	fa24 f001 	lsr.w	r0, r4, r1
 8009990:	fa00 f101 	lsl.w	r1, r0, r1
 8009994:	428c      	cmp	r4, r1
 8009996:	d10b      	bne.n	80099b0 <__any_on+0x3e>
 8009998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800999c:	4293      	cmp	r3, r2
 800999e:	d803      	bhi.n	80099a8 <__any_on+0x36>
 80099a0:	2000      	movs	r0, #0
 80099a2:	bd10      	pop	{r4, pc}
 80099a4:	4603      	mov	r3, r0
 80099a6:	e7f7      	b.n	8009998 <__any_on+0x26>
 80099a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099ac:	2900      	cmp	r1, #0
 80099ae:	d0f5      	beq.n	800999c <__any_on+0x2a>
 80099b0:	2001      	movs	r0, #1
 80099b2:	e7f6      	b.n	80099a2 <__any_on+0x30>

080099b4 <sulp>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	ec45 4b10 	vmov	d0, r4, r5
 80099be:	4616      	mov	r6, r2
 80099c0:	f7ff feba 	bl	8009738 <__ulp>
 80099c4:	ec51 0b10 	vmov	r0, r1, d0
 80099c8:	b17e      	cbz	r6, 80099ea <sulp+0x36>
 80099ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dd09      	ble.n	80099ea <sulp+0x36>
 80099d6:	051b      	lsls	r3, r3, #20
 80099d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099dc:	2400      	movs	r4, #0
 80099de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099e2:	4622      	mov	r2, r4
 80099e4:	462b      	mov	r3, r5
 80099e6:	f7f6 fe27 	bl	8000638 <__aeabi_dmul>
 80099ea:	ec41 0b10 	vmov	d0, r0, r1
 80099ee:	bd70      	pop	{r4, r5, r6, pc}

080099f0 <_strtod_l>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	b09f      	sub	sp, #124	@ 0x7c
 80099f6:	460c      	mov	r4, r1
 80099f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099fa:	2200      	movs	r2, #0
 80099fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80099fe:	9005      	str	r0, [sp, #20]
 8009a00:	f04f 0a00 	mov.w	sl, #0
 8009a04:	f04f 0b00 	mov.w	fp, #0
 8009a08:	460a      	mov	r2, r1
 8009a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a0c:	7811      	ldrb	r1, [r2, #0]
 8009a0e:	292b      	cmp	r1, #43	@ 0x2b
 8009a10:	d04a      	beq.n	8009aa8 <_strtod_l+0xb8>
 8009a12:	d838      	bhi.n	8009a86 <_strtod_l+0x96>
 8009a14:	290d      	cmp	r1, #13
 8009a16:	d832      	bhi.n	8009a7e <_strtod_l+0x8e>
 8009a18:	2908      	cmp	r1, #8
 8009a1a:	d832      	bhi.n	8009a82 <_strtod_l+0x92>
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	d03b      	beq.n	8009a98 <_strtod_l+0xa8>
 8009a20:	2200      	movs	r2, #0
 8009a22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a26:	782a      	ldrb	r2, [r5, #0]
 8009a28:	2a30      	cmp	r2, #48	@ 0x30
 8009a2a:	f040 80b3 	bne.w	8009b94 <_strtod_l+0x1a4>
 8009a2e:	786a      	ldrb	r2, [r5, #1]
 8009a30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a34:	2a58      	cmp	r2, #88	@ 0x58
 8009a36:	d16e      	bne.n	8009b16 <_strtod_l+0x126>
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4a8e      	ldr	r2, [pc, #568]	@ (8009c7c <_strtod_l+0x28c>)
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a48:	a919      	add	r1, sp, #100	@ 0x64
 8009a4a:	f001 f8ff 	bl	800ac4c <__gethex>
 8009a4e:	f010 060f 	ands.w	r6, r0, #15
 8009a52:	4604      	mov	r4, r0
 8009a54:	d005      	beq.n	8009a62 <_strtod_l+0x72>
 8009a56:	2e06      	cmp	r6, #6
 8009a58:	d128      	bne.n	8009aac <_strtod_l+0xbc>
 8009a5a:	3501      	adds	r5, #1
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f040 858e 	bne.w	800a586 <_strtod_l+0xb96>
 8009a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a6c:	b1cb      	cbz	r3, 8009aa2 <_strtod_l+0xb2>
 8009a6e:	4652      	mov	r2, sl
 8009a70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009a74:	ec43 2b10 	vmov	d0, r2, r3
 8009a78:	b01f      	add	sp, #124	@ 0x7c
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	2920      	cmp	r1, #32
 8009a80:	d1ce      	bne.n	8009a20 <_strtod_l+0x30>
 8009a82:	3201      	adds	r2, #1
 8009a84:	e7c1      	b.n	8009a0a <_strtod_l+0x1a>
 8009a86:	292d      	cmp	r1, #45	@ 0x2d
 8009a88:	d1ca      	bne.n	8009a20 <_strtod_l+0x30>
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a8e:	1c51      	adds	r1, r2, #1
 8009a90:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a92:	7852      	ldrb	r2, [r2, #1]
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	d1c5      	bne.n	8009a24 <_strtod_l+0x34>
 8009a98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 8570 	bne.w	800a582 <_strtod_l+0xb92>
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	e7e5      	b.n	8009a74 <_strtod_l+0x84>
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	e7ef      	b.n	8009a8c <_strtod_l+0x9c>
 8009aac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aae:	b13a      	cbz	r2, 8009ac0 <_strtod_l+0xd0>
 8009ab0:	2135      	movs	r1, #53	@ 0x35
 8009ab2:	a81c      	add	r0, sp, #112	@ 0x70
 8009ab4:	f7ff ff3a 	bl	800992c <__copybits>
 8009ab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009aba:	9805      	ldr	r0, [sp, #20]
 8009abc:	f7ff fb08 	bl	80090d0 <_Bfree>
 8009ac0:	3e01      	subs	r6, #1
 8009ac2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ac4:	2e04      	cmp	r6, #4
 8009ac6:	d806      	bhi.n	8009ad6 <_strtod_l+0xe6>
 8009ac8:	e8df f006 	tbb	[pc, r6]
 8009acc:	201d0314 	.word	0x201d0314
 8009ad0:	14          	.byte	0x14
 8009ad1:	00          	.byte	0x00
 8009ad2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ad6:	05e1      	lsls	r1, r4, #23
 8009ad8:	bf48      	it	mi
 8009ada:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ae2:	0d1b      	lsrs	r3, r3, #20
 8009ae4:	051b      	lsls	r3, r3, #20
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1bb      	bne.n	8009a62 <_strtod_l+0x72>
 8009aea:	f7fe fb23 	bl	8008134 <__errno>
 8009aee:	2322      	movs	r3, #34	@ 0x22
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	e7b6      	b.n	8009a62 <_strtod_l+0x72>
 8009af4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009af8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009afc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b04:	e7e7      	b.n	8009ad6 <_strtod_l+0xe6>
 8009b06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c84 <_strtod_l+0x294>
 8009b0a:	e7e4      	b.n	8009ad6 <_strtod_l+0xe6>
 8009b0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b10:	f04f 3aff 	mov.w	sl, #4294967295
 8009b14:	e7df      	b.n	8009ad6 <_strtod_l+0xe6>
 8009b16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b1c:	785b      	ldrb	r3, [r3, #1]
 8009b1e:	2b30      	cmp	r3, #48	@ 0x30
 8009b20:	d0f9      	beq.n	8009b16 <_strtod_l+0x126>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d09d      	beq.n	8009a62 <_strtod_l+0x72>
 8009b26:	2301      	movs	r3, #1
 8009b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b2e:	2300      	movs	r3, #0
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b34:	461f      	mov	r7, r3
 8009b36:	220a      	movs	r2, #10
 8009b38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b3a:	7805      	ldrb	r5, [r0, #0]
 8009b3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b40:	b2d9      	uxtb	r1, r3
 8009b42:	2909      	cmp	r1, #9
 8009b44:	d928      	bls.n	8009b98 <_strtod_l+0x1a8>
 8009b46:	494e      	ldr	r1, [pc, #312]	@ (8009c80 <_strtod_l+0x290>)
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f000 ffbb 	bl	800aac4 <strncmp>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d032      	beq.n	8009bb8 <_strtod_l+0x1c8>
 8009b52:	2000      	movs	r0, #0
 8009b54:	462a      	mov	r2, r5
 8009b56:	4681      	mov	r9, r0
 8009b58:	463d      	mov	r5, r7
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2a65      	cmp	r2, #101	@ 0x65
 8009b5e:	d001      	beq.n	8009b64 <_strtod_l+0x174>
 8009b60:	2a45      	cmp	r2, #69	@ 0x45
 8009b62:	d114      	bne.n	8009b8e <_strtod_l+0x19e>
 8009b64:	b91d      	cbnz	r5, 8009b6e <_strtod_l+0x17e>
 8009b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b68:	4302      	orrs	r2, r0
 8009b6a:	d095      	beq.n	8009a98 <_strtod_l+0xa8>
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b70:	1c62      	adds	r2, r4, #1
 8009b72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b74:	7862      	ldrb	r2, [r4, #1]
 8009b76:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b78:	d077      	beq.n	8009c6a <_strtod_l+0x27a>
 8009b7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b7c:	d07b      	beq.n	8009c76 <_strtod_l+0x286>
 8009b7e:	f04f 0c00 	mov.w	ip, #0
 8009b82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b86:	2909      	cmp	r1, #9
 8009b88:	f240 8082 	bls.w	8009c90 <_strtod_l+0x2a0>
 8009b8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b8e:	f04f 0800 	mov.w	r8, #0
 8009b92:	e0a2      	b.n	8009cda <_strtod_l+0x2ea>
 8009b94:	2300      	movs	r3, #0
 8009b96:	e7c7      	b.n	8009b28 <_strtod_l+0x138>
 8009b98:	2f08      	cmp	r7, #8
 8009b9a:	bfd5      	itete	le
 8009b9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009b9e:	9908      	ldrgt	r1, [sp, #32]
 8009ba0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ba4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ba8:	f100 0001 	add.w	r0, r0, #1
 8009bac:	bfd4      	ite	le
 8009bae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009bb0:	9308      	strgt	r3, [sp, #32]
 8009bb2:	3701      	adds	r7, #1
 8009bb4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bb6:	e7bf      	b.n	8009b38 <_strtod_l+0x148>
 8009bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bbe:	785a      	ldrb	r2, [r3, #1]
 8009bc0:	b37f      	cbz	r7, 8009c22 <_strtod_l+0x232>
 8009bc2:	4681      	mov	r9, r0
 8009bc4:	463d      	mov	r5, r7
 8009bc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	d912      	bls.n	8009bf4 <_strtod_l+0x204>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7c4      	b.n	8009b5c <_strtod_l+0x16c>
 8009bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd8:	785a      	ldrb	r2, [r3, #1]
 8009bda:	3001      	adds	r0, #1
 8009bdc:	2a30      	cmp	r2, #48	@ 0x30
 8009bde:	d0f8      	beq.n	8009bd2 <_strtod_l+0x1e2>
 8009be0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	f200 84d3 	bhi.w	800a590 <_strtod_l+0xba0>
 8009bea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bec:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bee:	4681      	mov	r9, r0
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	3a30      	subs	r2, #48	@ 0x30
 8009bf6:	f100 0301 	add.w	r3, r0, #1
 8009bfa:	d02a      	beq.n	8009c52 <_strtod_l+0x262>
 8009bfc:	4499      	add	r9, r3
 8009bfe:	eb00 0c05 	add.w	ip, r0, r5
 8009c02:	462b      	mov	r3, r5
 8009c04:	210a      	movs	r1, #10
 8009c06:	4563      	cmp	r3, ip
 8009c08:	d10d      	bne.n	8009c26 <_strtod_l+0x236>
 8009c0a:	1c69      	adds	r1, r5, #1
 8009c0c:	4401      	add	r1, r0
 8009c0e:	4428      	add	r0, r5
 8009c10:	2808      	cmp	r0, #8
 8009c12:	dc16      	bgt.n	8009c42 <_strtod_l+0x252>
 8009c14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c16:	230a      	movs	r3, #10
 8009c18:	fb03 2300 	mla	r3, r3, r0, r2
 8009c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e018      	b.n	8009c54 <_strtod_l+0x264>
 8009c22:	4638      	mov	r0, r7
 8009c24:	e7da      	b.n	8009bdc <_strtod_l+0x1ec>
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	f103 0301 	add.w	r3, r3, #1
 8009c2c:	dc03      	bgt.n	8009c36 <_strtod_l+0x246>
 8009c2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c30:	434e      	muls	r6, r1
 8009c32:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c34:	e7e7      	b.n	8009c06 <_strtod_l+0x216>
 8009c36:	2b10      	cmp	r3, #16
 8009c38:	bfde      	ittt	le
 8009c3a:	9e08      	ldrle	r6, [sp, #32]
 8009c3c:	434e      	mulle	r6, r1
 8009c3e:	9608      	strle	r6, [sp, #32]
 8009c40:	e7e1      	b.n	8009c06 <_strtod_l+0x216>
 8009c42:	280f      	cmp	r0, #15
 8009c44:	dceb      	bgt.n	8009c1e <_strtod_l+0x22e>
 8009c46:	9808      	ldr	r0, [sp, #32]
 8009c48:	230a      	movs	r3, #10
 8009c4a:	fb03 2300 	mla	r3, r3, r0, r2
 8009c4e:	9308      	str	r3, [sp, #32]
 8009c50:	e7e5      	b.n	8009c1e <_strtod_l+0x22e>
 8009c52:	4629      	mov	r1, r5
 8009c54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c56:	1c50      	adds	r0, r2, #1
 8009c58:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c5a:	7852      	ldrb	r2, [r2, #1]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	460d      	mov	r5, r1
 8009c60:	e7b1      	b.n	8009bc6 <_strtod_l+0x1d6>
 8009c62:	f04f 0900 	mov.w	r9, #0
 8009c66:	2301      	movs	r3, #1
 8009c68:	e77d      	b.n	8009b66 <_strtod_l+0x176>
 8009c6a:	f04f 0c00 	mov.w	ip, #0
 8009c6e:	1ca2      	adds	r2, r4, #2
 8009c70:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c72:	78a2      	ldrb	r2, [r4, #2]
 8009c74:	e785      	b.n	8009b82 <_strtod_l+0x192>
 8009c76:	f04f 0c01 	mov.w	ip, #1
 8009c7a:	e7f8      	b.n	8009c6e <_strtod_l+0x27e>
 8009c7c:	0800d0e0 	.word	0x0800d0e0
 8009c80:	0800d0c8 	.word	0x0800d0c8
 8009c84:	7ff00000 	.word	0x7ff00000
 8009c88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c8a:	1c51      	adds	r1, r2, #1
 8009c8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c8e:	7852      	ldrb	r2, [r2, #1]
 8009c90:	2a30      	cmp	r2, #48	@ 0x30
 8009c92:	d0f9      	beq.n	8009c88 <_strtod_l+0x298>
 8009c94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c98:	2908      	cmp	r1, #8
 8009c9a:	f63f af78 	bhi.w	8009b8e <_strtod_l+0x19e>
 8009c9e:	3a30      	subs	r2, #48	@ 0x30
 8009ca0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ca2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ca6:	f04f 080a 	mov.w	r8, #10
 8009caa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cac:	1c56      	adds	r6, r2, #1
 8009cae:	9619      	str	r6, [sp, #100]	@ 0x64
 8009cb0:	7852      	ldrb	r2, [r2, #1]
 8009cb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cb6:	f1be 0f09 	cmp.w	lr, #9
 8009cba:	d939      	bls.n	8009d30 <_strtod_l+0x340>
 8009cbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cbe:	1a76      	subs	r6, r6, r1
 8009cc0:	2e08      	cmp	r6, #8
 8009cc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cc6:	dc03      	bgt.n	8009cd0 <_strtod_l+0x2e0>
 8009cc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cca:	4588      	cmp	r8, r1
 8009ccc:	bfa8      	it	ge
 8009cce:	4688      	movge	r8, r1
 8009cd0:	f1bc 0f00 	cmp.w	ip, #0
 8009cd4:	d001      	beq.n	8009cda <_strtod_l+0x2ea>
 8009cd6:	f1c8 0800 	rsb	r8, r8, #0
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	d14e      	bne.n	8009d7c <_strtod_l+0x38c>
 8009cde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ce0:	4308      	orrs	r0, r1
 8009ce2:	f47f aebe 	bne.w	8009a62 <_strtod_l+0x72>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f47f aed6 	bne.w	8009a98 <_strtod_l+0xa8>
 8009cec:	2a69      	cmp	r2, #105	@ 0x69
 8009cee:	d028      	beq.n	8009d42 <_strtod_l+0x352>
 8009cf0:	dc25      	bgt.n	8009d3e <_strtod_l+0x34e>
 8009cf2:	2a49      	cmp	r2, #73	@ 0x49
 8009cf4:	d025      	beq.n	8009d42 <_strtod_l+0x352>
 8009cf6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009cf8:	f47f aece 	bne.w	8009a98 <_strtod_l+0xa8>
 8009cfc:	499b      	ldr	r1, [pc, #620]	@ (8009f6c <_strtod_l+0x57c>)
 8009cfe:	a819      	add	r0, sp, #100	@ 0x64
 8009d00:	f001 f9c6 	bl	800b090 <__match>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f43f aec7 	beq.w	8009a98 <_strtod_l+0xa8>
 8009d0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b28      	cmp	r3, #40	@ 0x28
 8009d10:	d12e      	bne.n	8009d70 <_strtod_l+0x380>
 8009d12:	4997      	ldr	r1, [pc, #604]	@ (8009f70 <_strtod_l+0x580>)
 8009d14:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d16:	a819      	add	r0, sp, #100	@ 0x64
 8009d18:	f001 f9ce 	bl	800b0b8 <__hexnan>
 8009d1c:	2805      	cmp	r0, #5
 8009d1e:	d127      	bne.n	8009d70 <_strtod_l+0x380>
 8009d20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d2e:	e698      	b.n	8009a62 <_strtod_l+0x72>
 8009d30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d32:	fb08 2101 	mla	r1, r8, r1, r2
 8009d36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d3c:	e7b5      	b.n	8009caa <_strtod_l+0x2ba>
 8009d3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d40:	e7da      	b.n	8009cf8 <_strtod_l+0x308>
 8009d42:	498c      	ldr	r1, [pc, #560]	@ (8009f74 <_strtod_l+0x584>)
 8009d44:	a819      	add	r0, sp, #100	@ 0x64
 8009d46:	f001 f9a3 	bl	800b090 <__match>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f43f aea4 	beq.w	8009a98 <_strtod_l+0xa8>
 8009d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d52:	4989      	ldr	r1, [pc, #548]	@ (8009f78 <_strtod_l+0x588>)
 8009d54:	3b01      	subs	r3, #1
 8009d56:	a819      	add	r0, sp, #100	@ 0x64
 8009d58:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d5a:	f001 f999 	bl	800b090 <__match>
 8009d5e:	b910      	cbnz	r0, 8009d66 <_strtod_l+0x376>
 8009d60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d62:	3301      	adds	r3, #1
 8009d64:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009f88 <_strtod_l+0x598>
 8009d6a:	f04f 0a00 	mov.w	sl, #0
 8009d6e:	e678      	b.n	8009a62 <_strtod_l+0x72>
 8009d70:	4882      	ldr	r0, [pc, #520]	@ (8009f7c <_strtod_l+0x58c>)
 8009d72:	f000 fec9 	bl	800ab08 <nan>
 8009d76:	ec5b ab10 	vmov	sl, fp, d0
 8009d7a:	e672      	b.n	8009a62 <_strtod_l+0x72>
 8009d7c:	eba8 0309 	sub.w	r3, r8, r9
 8009d80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	bf08      	it	eq
 8009d88:	462f      	moveq	r7, r5
 8009d8a:	2d10      	cmp	r5, #16
 8009d8c:	462c      	mov	r4, r5
 8009d8e:	bfa8      	it	ge
 8009d90:	2410      	movge	r4, #16
 8009d92:	f7f6 fbd7 	bl	8000544 <__aeabi_ui2d>
 8009d96:	2d09      	cmp	r5, #9
 8009d98:	4682      	mov	sl, r0
 8009d9a:	468b      	mov	fp, r1
 8009d9c:	dc13      	bgt.n	8009dc6 <_strtod_l+0x3d6>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f43f ae5e 	beq.w	8009a62 <_strtod_l+0x72>
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	dd78      	ble.n	8009e9c <_strtod_l+0x4ac>
 8009daa:	2b16      	cmp	r3, #22
 8009dac:	dc5f      	bgt.n	8009e6e <_strtod_l+0x47e>
 8009dae:	4974      	ldr	r1, [pc, #464]	@ (8009f80 <_strtod_l+0x590>)
 8009db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db8:	4652      	mov	r2, sl
 8009dba:	465b      	mov	r3, fp
 8009dbc:	f7f6 fc3c 	bl	8000638 <__aeabi_dmul>
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	e64d      	b.n	8009a62 <_strtod_l+0x72>
 8009dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8009f80 <_strtod_l+0x590>)
 8009dc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009dd0:	f7f6 fc32 	bl	8000638 <__aeabi_dmul>
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	9808      	ldr	r0, [sp, #32]
 8009dd8:	468b      	mov	fp, r1
 8009dda:	f7f6 fbb3 	bl	8000544 <__aeabi_ui2d>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fa71 	bl	80002cc <__adddf3>
 8009dea:	2d0f      	cmp	r5, #15
 8009dec:	4682      	mov	sl, r0
 8009dee:	468b      	mov	fp, r1
 8009df0:	ddd5      	ble.n	8009d9e <_strtod_l+0x3ae>
 8009df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df4:	1b2c      	subs	r4, r5, r4
 8009df6:	441c      	add	r4, r3
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	f340 8096 	ble.w	8009f2a <_strtod_l+0x53a>
 8009dfe:	f014 030f 	ands.w	r3, r4, #15
 8009e02:	d00a      	beq.n	8009e1a <_strtod_l+0x42a>
 8009e04:	495e      	ldr	r1, [pc, #376]	@ (8009f80 <_strtod_l+0x590>)
 8009e06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e0a:	4652      	mov	r2, sl
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	f7f6 fc11 	bl	8000638 <__aeabi_dmul>
 8009e16:	4682      	mov	sl, r0
 8009e18:	468b      	mov	fp, r1
 8009e1a:	f034 040f 	bics.w	r4, r4, #15
 8009e1e:	d073      	beq.n	8009f08 <_strtod_l+0x518>
 8009e20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e24:	dd48      	ble.n	8009eb8 <_strtod_l+0x4c8>
 8009e26:	2400      	movs	r4, #0
 8009e28:	46a0      	mov	r8, r4
 8009e2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e2c:	46a1      	mov	r9, r4
 8009e2e:	9a05      	ldr	r2, [sp, #20]
 8009e30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009f88 <_strtod_l+0x598>
 8009e34:	2322      	movs	r3, #34	@ 0x22
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f43f ae0f 	beq.w	8009a62 <_strtod_l+0x72>
 8009e44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e46:	9805      	ldr	r0, [sp, #20]
 8009e48:	f7ff f942 	bl	80090d0 <_Bfree>
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7ff f93e 	bl	80090d0 <_Bfree>
 8009e54:	9805      	ldr	r0, [sp, #20]
 8009e56:	4641      	mov	r1, r8
 8009e58:	f7ff f93a 	bl	80090d0 <_Bfree>
 8009e5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e5e:	9805      	ldr	r0, [sp, #20]
 8009e60:	f7ff f936 	bl	80090d0 <_Bfree>
 8009e64:	9805      	ldr	r0, [sp, #20]
 8009e66:	4621      	mov	r1, r4
 8009e68:	f7ff f932 	bl	80090d0 <_Bfree>
 8009e6c:	e5f9      	b.n	8009a62 <_strtod_l+0x72>
 8009e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e74:	4293      	cmp	r3, r2
 8009e76:	dbbc      	blt.n	8009df2 <_strtod_l+0x402>
 8009e78:	4c41      	ldr	r4, [pc, #260]	@ (8009f80 <_strtod_l+0x590>)
 8009e7a:	f1c5 050f 	rsb	r5, r5, #15
 8009e7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8a:	f7f6 fbd5 	bl	8000638 <__aeabi_dmul>
 8009e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e90:	1b5d      	subs	r5, r3, r5
 8009e92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e9a:	e78f      	b.n	8009dbc <_strtod_l+0x3cc>
 8009e9c:	3316      	adds	r3, #22
 8009e9e:	dba8      	blt.n	8009df2 <_strtod_l+0x402>
 8009ea0:	4b37      	ldr	r3, [pc, #220]	@ (8009f80 <_strtod_l+0x590>)
 8009ea2:	eba9 0808 	sub.w	r8, r9, r8
 8009ea6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009eaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009eae:	4650      	mov	r0, sl
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	f7f6 fceb 	bl	800088c <__aeabi_ddiv>
 8009eb6:	e783      	b.n	8009dc0 <_strtod_l+0x3d0>
 8009eb8:	4b32      	ldr	r3, [pc, #200]	@ (8009f84 <_strtod_l+0x594>)
 8009eba:	9308      	str	r3, [sp, #32]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	1124      	asrs	r4, r4, #4
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	461e      	mov	r6, r3
 8009ec6:	2c01      	cmp	r4, #1
 8009ec8:	dc21      	bgt.n	8009f0e <_strtod_l+0x51e>
 8009eca:	b10b      	cbz	r3, 8009ed0 <_strtod_l+0x4e0>
 8009ecc:	4682      	mov	sl, r0
 8009ece:	468b      	mov	fp, r1
 8009ed0:	492c      	ldr	r1, [pc, #176]	@ (8009f84 <_strtod_l+0x594>)
 8009ed2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ed6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee2:	f7f6 fba9 	bl	8000638 <__aeabi_dmul>
 8009ee6:	4b28      	ldr	r3, [pc, #160]	@ (8009f88 <_strtod_l+0x598>)
 8009ee8:	460a      	mov	r2, r1
 8009eea:	400b      	ands	r3, r1
 8009eec:	4927      	ldr	r1, [pc, #156]	@ (8009f8c <_strtod_l+0x59c>)
 8009eee:	428b      	cmp	r3, r1
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	d898      	bhi.n	8009e26 <_strtod_l+0x436>
 8009ef4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	bf86      	itte	hi
 8009efc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009f90 <_strtod_l+0x5a0>
 8009f00:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	e07a      	b.n	800a004 <_strtod_l+0x614>
 8009f0e:	07e2      	lsls	r2, r4, #31
 8009f10:	d505      	bpl.n	8009f1e <_strtod_l+0x52e>
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 fb8e 	bl	8000638 <__aeabi_dmul>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	9a08      	ldr	r2, [sp, #32]
 8009f20:	3208      	adds	r2, #8
 8009f22:	3601      	adds	r6, #1
 8009f24:	1064      	asrs	r4, r4, #1
 8009f26:	9208      	str	r2, [sp, #32]
 8009f28:	e7cd      	b.n	8009ec6 <_strtod_l+0x4d6>
 8009f2a:	d0ed      	beq.n	8009f08 <_strtod_l+0x518>
 8009f2c:	4264      	negs	r4, r4
 8009f2e:	f014 020f 	ands.w	r2, r4, #15
 8009f32:	d00a      	beq.n	8009f4a <_strtod_l+0x55a>
 8009f34:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <_strtod_l+0x590>)
 8009f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 fca3 	bl	800088c <__aeabi_ddiv>
 8009f46:	4682      	mov	sl, r0
 8009f48:	468b      	mov	fp, r1
 8009f4a:	1124      	asrs	r4, r4, #4
 8009f4c:	d0dc      	beq.n	8009f08 <_strtod_l+0x518>
 8009f4e:	2c1f      	cmp	r4, #31
 8009f50:	dd20      	ble.n	8009f94 <_strtod_l+0x5a4>
 8009f52:	2400      	movs	r4, #0
 8009f54:	46a0      	mov	r8, r4
 8009f56:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f58:	46a1      	mov	r9, r4
 8009f5a:	9a05      	ldr	r2, [sp, #20]
 8009f5c:	2322      	movs	r3, #34	@ 0x22
 8009f5e:	f04f 0a00 	mov.w	sl, #0
 8009f62:	f04f 0b00 	mov.w	fp, #0
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e768      	b.n	8009e3c <_strtod_l+0x44c>
 8009f6a:	bf00      	nop
 8009f6c:	0800ceb9 	.word	0x0800ceb9
 8009f70:	0800d0cc 	.word	0x0800d0cc
 8009f74:	0800ceb1 	.word	0x0800ceb1
 8009f78:	0800cee8 	.word	0x0800cee8
 8009f7c:	0800d275 	.word	0x0800d275
 8009f80:	0800d000 	.word	0x0800d000
 8009f84:	0800cfd8 	.word	0x0800cfd8
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	7ca00000 	.word	0x7ca00000
 8009f90:	7fefffff 	.word	0x7fefffff
 8009f94:	f014 0310 	ands.w	r3, r4, #16
 8009f98:	bf18      	it	ne
 8009f9a:	236a      	movne	r3, #106	@ 0x6a
 8009f9c:	4ea9      	ldr	r6, [pc, #676]	@ (800a244 <_strtod_l+0x854>)
 8009f9e:	9308      	str	r3, [sp, #32]
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	07e2      	lsls	r2, r4, #31
 8009fa8:	d504      	bpl.n	8009fb4 <_strtod_l+0x5c4>
 8009faa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fae:	f7f6 fb43 	bl	8000638 <__aeabi_dmul>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	1064      	asrs	r4, r4, #1
 8009fb6:	f106 0608 	add.w	r6, r6, #8
 8009fba:	d1f4      	bne.n	8009fa6 <_strtod_l+0x5b6>
 8009fbc:	b10b      	cbz	r3, 8009fc2 <_strtod_l+0x5d2>
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	9b08      	ldr	r3, [sp, #32]
 8009fc4:	b1b3      	cbz	r3, 8009ff4 <_strtod_l+0x604>
 8009fc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009fca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	dd0f      	ble.n	8009ff4 <_strtod_l+0x604>
 8009fd4:	2b1f      	cmp	r3, #31
 8009fd6:	dd55      	ble.n	800a084 <_strtod_l+0x694>
 8009fd8:	2b34      	cmp	r3, #52	@ 0x34
 8009fda:	bfde      	ittt	le
 8009fdc:	f04f 33ff 	movle.w	r3, #4294967295
 8009fe0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009fe4:	4093      	lslle	r3, r2
 8009fe6:	f04f 0a00 	mov.w	sl, #0
 8009fea:	bfcc      	ite	gt
 8009fec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ff0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	4659      	mov	r1, fp
 8009ffc:	f7f6 fd84 	bl	8000b08 <__aeabi_dcmpeq>
 800a000:	2800      	cmp	r0, #0
 800a002:	d1a6      	bne.n	8009f52 <_strtod_l+0x562>
 800a004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	462b      	mov	r3, r5
 800a00e:	463a      	mov	r2, r7
 800a010:	f7ff f8c6 	bl	80091a0 <__s2b>
 800a014:	900a      	str	r0, [sp, #40]	@ 0x28
 800a016:	2800      	cmp	r0, #0
 800a018:	f43f af05 	beq.w	8009e26 <_strtod_l+0x436>
 800a01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a01e:	2a00      	cmp	r2, #0
 800a020:	eba9 0308 	sub.w	r3, r9, r8
 800a024:	bfa8      	it	ge
 800a026:	2300      	movge	r3, #0
 800a028:	9312      	str	r3, [sp, #72]	@ 0x48
 800a02a:	2400      	movs	r4, #0
 800a02c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a030:	9316      	str	r3, [sp, #88]	@ 0x58
 800a032:	46a0      	mov	r8, r4
 800a034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a036:	9805      	ldr	r0, [sp, #20]
 800a038:	6859      	ldr	r1, [r3, #4]
 800a03a:	f7ff f809 	bl	8009050 <_Balloc>
 800a03e:	4681      	mov	r9, r0
 800a040:	2800      	cmp	r0, #0
 800a042:	f43f aef4 	beq.w	8009e2e <_strtod_l+0x43e>
 800a046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a048:	691a      	ldr	r2, [r3, #16]
 800a04a:	3202      	adds	r2, #2
 800a04c:	f103 010c 	add.w	r1, r3, #12
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	300c      	adds	r0, #12
 800a054:	f7fe f89b 	bl	800818e <memcpy>
 800a058:	ec4b ab10 	vmov	d0, sl, fp
 800a05c:	9805      	ldr	r0, [sp, #20]
 800a05e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a060:	a91b      	add	r1, sp, #108	@ 0x6c
 800a062:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a066:	f7ff fbd7 	bl	8009818 <__d2b>
 800a06a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f43f aede 	beq.w	8009e2e <_strtod_l+0x43e>
 800a072:	9805      	ldr	r0, [sp, #20]
 800a074:	2101      	movs	r1, #1
 800a076:	f7ff f929 	bl	80092cc <__i2b>
 800a07a:	4680      	mov	r8, r0
 800a07c:	b948      	cbnz	r0, 800a092 <_strtod_l+0x6a2>
 800a07e:	f04f 0800 	mov.w	r8, #0
 800a082:	e6d4      	b.n	8009e2e <_strtod_l+0x43e>
 800a084:	f04f 32ff 	mov.w	r2, #4294967295
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	ea03 0a0a 	and.w	sl, r3, sl
 800a090:	e7b0      	b.n	8009ff4 <_strtod_l+0x604>
 800a092:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a094:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a096:	2d00      	cmp	r5, #0
 800a098:	bfab      	itete	ge
 800a09a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a09c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a09e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a0a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a0a2:	bfac      	ite	ge
 800a0a4:	18ef      	addge	r7, r5, r3
 800a0a6:	1b5e      	sublt	r6, r3, r5
 800a0a8:	9b08      	ldr	r3, [sp, #32]
 800a0aa:	1aed      	subs	r5, r5, r3
 800a0ac:	4415      	add	r5, r2
 800a0ae:	4b66      	ldr	r3, [pc, #408]	@ (800a248 <_strtod_l+0x858>)
 800a0b0:	3d01      	subs	r5, #1
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0b8:	da50      	bge.n	800a15c <_strtod_l+0x76c>
 800a0ba:	1b5b      	subs	r3, r3, r5
 800a0bc:	2b1f      	cmp	r3, #31
 800a0be:	eba2 0203 	sub.w	r2, r2, r3
 800a0c2:	f04f 0101 	mov.w	r1, #1
 800a0c6:	dc3d      	bgt.n	800a144 <_strtod_l+0x754>
 800a0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0d2:	18bd      	adds	r5, r7, r2
 800a0d4:	9b08      	ldr	r3, [sp, #32]
 800a0d6:	42af      	cmp	r7, r5
 800a0d8:	4416      	add	r6, r2
 800a0da:	441e      	add	r6, r3
 800a0dc:	463b      	mov	r3, r7
 800a0de:	bfa8      	it	ge
 800a0e0:	462b      	movge	r3, r5
 800a0e2:	42b3      	cmp	r3, r6
 800a0e4:	bfa8      	it	ge
 800a0e6:	4633      	movge	r3, r6
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfc2      	ittt	gt
 800a0ec:	1aed      	subgt	r5, r5, r3
 800a0ee:	1af6      	subgt	r6, r6, r3
 800a0f0:	1aff      	subgt	r7, r7, r3
 800a0f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd16      	ble.n	800a126 <_strtod_l+0x736>
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	9805      	ldr	r0, [sp, #20]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f7ff f9a5 	bl	800944c <__pow5mult>
 800a102:	4680      	mov	r8, r0
 800a104:	2800      	cmp	r0, #0
 800a106:	d0ba      	beq.n	800a07e <_strtod_l+0x68e>
 800a108:	4601      	mov	r1, r0
 800a10a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a10c:	9805      	ldr	r0, [sp, #20]
 800a10e:	f7ff f8f3 	bl	80092f8 <__multiply>
 800a112:	900e      	str	r0, [sp, #56]	@ 0x38
 800a114:	2800      	cmp	r0, #0
 800a116:	f43f ae8a 	beq.w	8009e2e <_strtod_l+0x43e>
 800a11a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a11c:	9805      	ldr	r0, [sp, #20]
 800a11e:	f7fe ffd7 	bl	80090d0 <_Bfree>
 800a122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a124:	931a      	str	r3, [sp, #104]	@ 0x68
 800a126:	2d00      	cmp	r5, #0
 800a128:	dc1d      	bgt.n	800a166 <_strtod_l+0x776>
 800a12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd23      	ble.n	800a178 <_strtod_l+0x788>
 800a130:	4649      	mov	r1, r9
 800a132:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a134:	9805      	ldr	r0, [sp, #20]
 800a136:	f7ff f989 	bl	800944c <__pow5mult>
 800a13a:	4681      	mov	r9, r0
 800a13c:	b9e0      	cbnz	r0, 800a178 <_strtod_l+0x788>
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	e674      	b.n	8009e2e <_strtod_l+0x43e>
 800a144:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a148:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a14c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a150:	35e2      	adds	r5, #226	@ 0xe2
 800a152:	fa01 f305 	lsl.w	r3, r1, r5
 800a156:	9310      	str	r3, [sp, #64]	@ 0x40
 800a158:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a15a:	e7ba      	b.n	800a0d2 <_strtod_l+0x6e2>
 800a15c:	2300      	movs	r3, #0
 800a15e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a160:	2301      	movs	r3, #1
 800a162:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a164:	e7b5      	b.n	800a0d2 <_strtod_l+0x6e2>
 800a166:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a168:	9805      	ldr	r0, [sp, #20]
 800a16a:	462a      	mov	r2, r5
 800a16c:	f7ff f9c8 	bl	8009500 <__lshift>
 800a170:	901a      	str	r0, [sp, #104]	@ 0x68
 800a172:	2800      	cmp	r0, #0
 800a174:	d1d9      	bne.n	800a12a <_strtod_l+0x73a>
 800a176:	e65a      	b.n	8009e2e <_strtod_l+0x43e>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd07      	ble.n	800a18c <_strtod_l+0x79c>
 800a17c:	4649      	mov	r1, r9
 800a17e:	9805      	ldr	r0, [sp, #20]
 800a180:	4632      	mov	r2, r6
 800a182:	f7ff f9bd 	bl	8009500 <__lshift>
 800a186:	4681      	mov	r9, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	d0d8      	beq.n	800a13e <_strtod_l+0x74e>
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	dd08      	ble.n	800a1a2 <_strtod_l+0x7b2>
 800a190:	4641      	mov	r1, r8
 800a192:	9805      	ldr	r0, [sp, #20]
 800a194:	463a      	mov	r2, r7
 800a196:	f7ff f9b3 	bl	8009500 <__lshift>
 800a19a:	4680      	mov	r8, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f43f ae46 	beq.w	8009e2e <_strtod_l+0x43e>
 800a1a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1a4:	9805      	ldr	r0, [sp, #20]
 800a1a6:	464a      	mov	r2, r9
 800a1a8:	f7ff fa32 	bl	8009610 <__mdiff>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f43f ae3d 	beq.w	8009e2e <_strtod_l+0x43e>
 800a1b4:	68c3      	ldr	r3, [r0, #12]
 800a1b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60c3      	str	r3, [r0, #12]
 800a1bc:	4641      	mov	r1, r8
 800a1be:	f7ff fa0b 	bl	80095d8 <__mcmp>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	da46      	bge.n	800a254 <_strtod_l+0x864>
 800a1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a1cc:	d16c      	bne.n	800a2a8 <_strtod_l+0x8b8>
 800a1ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d168      	bne.n	800a2a8 <_strtod_l+0x8b8>
 800a1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1da:	0d1b      	lsrs	r3, r3, #20
 800a1dc:	051b      	lsls	r3, r3, #20
 800a1de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1e2:	d961      	bls.n	800a2a8 <_strtod_l+0x8b8>
 800a1e4:	6963      	ldr	r3, [r4, #20]
 800a1e6:	b913      	cbnz	r3, 800a1ee <_strtod_l+0x7fe>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	dd5c      	ble.n	800a2a8 <_strtod_l+0x8b8>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	9805      	ldr	r0, [sp, #20]
 800a1f4:	f7ff f984 	bl	8009500 <__lshift>
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	f7ff f9ec 	bl	80095d8 <__mcmp>
 800a200:	2800      	cmp	r0, #0
 800a202:	dd51      	ble.n	800a2a8 <_strtod_l+0x8b8>
 800a204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a208:	9a08      	ldr	r2, [sp, #32]
 800a20a:	0d1b      	lsrs	r3, r3, #20
 800a20c:	051b      	lsls	r3, r3, #20
 800a20e:	2a00      	cmp	r2, #0
 800a210:	d06b      	beq.n	800a2ea <_strtod_l+0x8fa>
 800a212:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a216:	d868      	bhi.n	800a2ea <_strtod_l+0x8fa>
 800a218:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a21c:	f67f ae9d 	bls.w	8009f5a <_strtod_l+0x56a>
 800a220:	4b0a      	ldr	r3, [pc, #40]	@ (800a24c <_strtod_l+0x85c>)
 800a222:	4650      	mov	r0, sl
 800a224:	4659      	mov	r1, fp
 800a226:	2200      	movs	r2, #0
 800a228:	f7f6 fa06 	bl	8000638 <__aeabi_dmul>
 800a22c:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <_strtod_l+0x860>)
 800a22e:	400b      	ands	r3, r1
 800a230:	4682      	mov	sl, r0
 800a232:	468b      	mov	fp, r1
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f ae05 	bne.w	8009e44 <_strtod_l+0x454>
 800a23a:	9a05      	ldr	r2, [sp, #20]
 800a23c:	2322      	movs	r3, #34	@ 0x22
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	e600      	b.n	8009e44 <_strtod_l+0x454>
 800a242:	bf00      	nop
 800a244:	0800d0f8 	.word	0x0800d0f8
 800a248:	fffffc02 	.word	0xfffffc02
 800a24c:	39500000 	.word	0x39500000
 800a250:	7ff00000 	.word	0x7ff00000
 800a254:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a258:	d165      	bne.n	800a326 <_strtod_l+0x936>
 800a25a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a25c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a260:	b35a      	cbz	r2, 800a2ba <_strtod_l+0x8ca>
 800a262:	4a9f      	ldr	r2, [pc, #636]	@ (800a4e0 <_strtod_l+0xaf0>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d12b      	bne.n	800a2c0 <_strtod_l+0x8d0>
 800a268:	9b08      	ldr	r3, [sp, #32]
 800a26a:	4651      	mov	r1, sl
 800a26c:	b303      	cbz	r3, 800a2b0 <_strtod_l+0x8c0>
 800a26e:	4b9d      	ldr	r3, [pc, #628]	@ (800a4e4 <_strtod_l+0xaf4>)
 800a270:	465a      	mov	r2, fp
 800a272:	4013      	ands	r3, r2
 800a274:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a278:	f04f 32ff 	mov.w	r2, #4294967295
 800a27c:	d81b      	bhi.n	800a2b6 <_strtod_l+0x8c6>
 800a27e:	0d1b      	lsrs	r3, r3, #20
 800a280:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	4299      	cmp	r1, r3
 800a28a:	d119      	bne.n	800a2c0 <_strtod_l+0x8d0>
 800a28c:	4b96      	ldr	r3, [pc, #600]	@ (800a4e8 <_strtod_l+0xaf8>)
 800a28e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a290:	429a      	cmp	r2, r3
 800a292:	d102      	bne.n	800a29a <_strtod_l+0x8aa>
 800a294:	3101      	adds	r1, #1
 800a296:	f43f adca 	beq.w	8009e2e <_strtod_l+0x43e>
 800a29a:	4b92      	ldr	r3, [pc, #584]	@ (800a4e4 <_strtod_l+0xaf4>)
 800a29c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a29e:	401a      	ands	r2, r3
 800a2a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a2a4:	f04f 0a00 	mov.w	sl, #0
 800a2a8:	9b08      	ldr	r3, [sp, #32]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1b8      	bne.n	800a220 <_strtod_l+0x830>
 800a2ae:	e5c9      	b.n	8009e44 <_strtod_l+0x454>
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b4:	e7e8      	b.n	800a288 <_strtod_l+0x898>
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	e7e6      	b.n	800a288 <_strtod_l+0x898>
 800a2ba:	ea53 030a 	orrs.w	r3, r3, sl
 800a2be:	d0a1      	beq.n	800a204 <_strtod_l+0x814>
 800a2c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2c2:	b1db      	cbz	r3, 800a2fc <_strtod_l+0x90c>
 800a2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c6:	4213      	tst	r3, r2
 800a2c8:	d0ee      	beq.n	800a2a8 <_strtod_l+0x8b8>
 800a2ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	4659      	mov	r1, fp
 800a2d2:	b1bb      	cbz	r3, 800a304 <_strtod_l+0x914>
 800a2d4:	f7ff fb6e 	bl	80099b4 <sulp>
 800a2d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2dc:	ec53 2b10 	vmov	r2, r3, d0
 800a2e0:	f7f5 fff4 	bl	80002cc <__adddf3>
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	468b      	mov	fp, r1
 800a2e8:	e7de      	b.n	800a2a8 <_strtod_l+0x8b8>
 800a2ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2f6:	f04f 3aff 	mov.w	sl, #4294967295
 800a2fa:	e7d5      	b.n	800a2a8 <_strtod_l+0x8b8>
 800a2fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2fe:	ea13 0f0a 	tst.w	r3, sl
 800a302:	e7e1      	b.n	800a2c8 <_strtod_l+0x8d8>
 800a304:	f7ff fb56 	bl	80099b4 <sulp>
 800a308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a30c:	ec53 2b10 	vmov	r2, r3, d0
 800a310:	f7f5 ffda 	bl	80002c8 <__aeabi_dsub>
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	f7f6 fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 800a320:	2800      	cmp	r0, #0
 800a322:	d0c1      	beq.n	800a2a8 <_strtod_l+0x8b8>
 800a324:	e619      	b.n	8009f5a <_strtod_l+0x56a>
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	f7ff facd 	bl	80098c8 <__ratio>
 800a32e:	ec57 6b10 	vmov	r6, r7, d0
 800a332:	2200      	movs	r2, #0
 800a334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fbf8 	bl	8000b30 <__aeabi_dcmple>
 800a340:	2800      	cmp	r0, #0
 800a342:	d06f      	beq.n	800a424 <_strtod_l+0xa34>
 800a344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d17a      	bne.n	800a440 <_strtod_l+0xa50>
 800a34a:	f1ba 0f00 	cmp.w	sl, #0
 800a34e:	d158      	bne.n	800a402 <_strtod_l+0xa12>
 800a350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a356:	2b00      	cmp	r3, #0
 800a358:	d15a      	bne.n	800a410 <_strtod_l+0xa20>
 800a35a:	4b64      	ldr	r3, [pc, #400]	@ (800a4ec <_strtod_l+0xafc>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	f7f6 fbdb 	bl	8000b1c <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	d159      	bne.n	800a41e <_strtod_l+0xa2e>
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	4b60      	ldr	r3, [pc, #384]	@ (800a4f0 <_strtod_l+0xb00>)
 800a370:	2200      	movs	r2, #0
 800a372:	f7f6 f961 	bl	8000638 <__aeabi_dmul>
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a37e:	9606      	str	r6, [sp, #24]
 800a380:	9307      	str	r3, [sp, #28]
 800a382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a386:	4d57      	ldr	r5, [pc, #348]	@ (800a4e4 <_strtod_l+0xaf4>)
 800a388:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a38c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a38e:	401d      	ands	r5, r3
 800a390:	4b58      	ldr	r3, [pc, #352]	@ (800a4f4 <_strtod_l+0xb04>)
 800a392:	429d      	cmp	r5, r3
 800a394:	f040 80b2 	bne.w	800a4fc <_strtod_l+0xb0c>
 800a398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a39a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a39e:	ec4b ab10 	vmov	d0, sl, fp
 800a3a2:	f7ff f9c9 	bl	8009738 <__ulp>
 800a3a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3aa:	ec51 0b10 	vmov	r0, r1, d0
 800a3ae:	f7f6 f943 	bl	8000638 <__aeabi_dmul>
 800a3b2:	4652      	mov	r2, sl
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	f7f5 ff89 	bl	80002cc <__adddf3>
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4949      	ldr	r1, [pc, #292]	@ (800a4e4 <_strtod_l+0xaf4>)
 800a3be:	4a4e      	ldr	r2, [pc, #312]	@ (800a4f8 <_strtod_l+0xb08>)
 800a3c0:	4019      	ands	r1, r3
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	d942      	bls.n	800a44e <_strtod_l+0xa5e>
 800a3c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3ca:	4b47      	ldr	r3, [pc, #284]	@ (800a4e8 <_strtod_l+0xaf8>)
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d103      	bne.n	800a3d8 <_strtod_l+0x9e8>
 800a3d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	f43f ad2b 	beq.w	8009e2e <_strtod_l+0x43e>
 800a3d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a4e8 <_strtod_l+0xaf8>
 800a3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a3e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3e2:	9805      	ldr	r0, [sp, #20]
 800a3e4:	f7fe fe74 	bl	80090d0 <_Bfree>
 800a3e8:	9805      	ldr	r0, [sp, #20]
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	f7fe fe70 	bl	80090d0 <_Bfree>
 800a3f0:	9805      	ldr	r0, [sp, #20]
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	f7fe fe6c 	bl	80090d0 <_Bfree>
 800a3f8:	9805      	ldr	r0, [sp, #20]
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	f7fe fe68 	bl	80090d0 <_Bfree>
 800a400:	e618      	b.n	800a034 <_strtod_l+0x644>
 800a402:	f1ba 0f01 	cmp.w	sl, #1
 800a406:	d103      	bne.n	800a410 <_strtod_l+0xa20>
 800a408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f43f ada5 	beq.w	8009f5a <_strtod_l+0x56a>
 800a410:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4c0 <_strtod_l+0xad0>
 800a414:	4f35      	ldr	r7, [pc, #212]	@ (800a4ec <_strtod_l+0xafc>)
 800a416:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a41a:	2600      	movs	r6, #0
 800a41c:	e7b1      	b.n	800a382 <_strtod_l+0x992>
 800a41e:	4f34      	ldr	r7, [pc, #208]	@ (800a4f0 <_strtod_l+0xb00>)
 800a420:	2600      	movs	r6, #0
 800a422:	e7aa      	b.n	800a37a <_strtod_l+0x98a>
 800a424:	4b32      	ldr	r3, [pc, #200]	@ (800a4f0 <_strtod_l+0xb00>)
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	2200      	movs	r2, #0
 800a42c:	f7f6 f904 	bl	8000638 <__aeabi_dmul>
 800a430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d09f      	beq.n	800a37a <_strtod_l+0x98a>
 800a43a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a43e:	e7a0      	b.n	800a382 <_strtod_l+0x992>
 800a440:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4c8 <_strtod_l+0xad8>
 800a444:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a448:	ec57 6b17 	vmov	r6, r7, d7
 800a44c:	e799      	b.n	800a382 <_strtod_l+0x992>
 800a44e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1c1      	bne.n	800a3e0 <_strtod_l+0x9f0>
 800a45c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a460:	0d1b      	lsrs	r3, r3, #20
 800a462:	051b      	lsls	r3, r3, #20
 800a464:	429d      	cmp	r5, r3
 800a466:	d1bb      	bne.n	800a3e0 <_strtod_l+0x9f0>
 800a468:	4630      	mov	r0, r6
 800a46a:	4639      	mov	r1, r7
 800a46c:	f7f6 fc44 	bl	8000cf8 <__aeabi_d2lz>
 800a470:	f7f6 f8b4 	bl	80005dc <__aeabi_l2d>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f5 ff24 	bl	80002c8 <__aeabi_dsub>
 800a480:	460b      	mov	r3, r1
 800a482:	4602      	mov	r2, r0
 800a484:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a488:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a48e:	ea46 060a 	orr.w	r6, r6, sl
 800a492:	431e      	orrs	r6, r3
 800a494:	d06f      	beq.n	800a576 <_strtod_l+0xb86>
 800a496:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4d0 <_strtod_l+0xae0>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f7f6 fb3e 	bl	8000b1c <__aeabi_dcmplt>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	f47f accf 	bne.w	8009e44 <_strtod_l+0x454>
 800a4a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4d8 <_strtod_l+0xae8>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4b0:	f7f6 fb52 	bl	8000b58 <__aeabi_dcmpgt>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d093      	beq.n	800a3e0 <_strtod_l+0x9f0>
 800a4b8:	e4c4      	b.n	8009e44 <_strtod_l+0x454>
 800a4ba:	bf00      	nop
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	bff00000 	.word	0xbff00000
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	3ff00000 	.word	0x3ff00000
 800a4d0:	94a03595 	.word	0x94a03595
 800a4d4:	3fdfffff 	.word	0x3fdfffff
 800a4d8:	35afe535 	.word	0x35afe535
 800a4dc:	3fe00000 	.word	0x3fe00000
 800a4e0:	000fffff 	.word	0x000fffff
 800a4e4:	7ff00000 	.word	0x7ff00000
 800a4e8:	7fefffff 	.word	0x7fefffff
 800a4ec:	3ff00000 	.word	0x3ff00000
 800a4f0:	3fe00000 	.word	0x3fe00000
 800a4f4:	7fe00000 	.word	0x7fe00000
 800a4f8:	7c9fffff 	.word	0x7c9fffff
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	b323      	cbz	r3, 800a54a <_strtod_l+0xb5a>
 800a500:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a504:	d821      	bhi.n	800a54a <_strtod_l+0xb5a>
 800a506:	a328      	add	r3, pc, #160	@ (adr r3, 800a5a8 <_strtod_l+0xbb8>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	4630      	mov	r0, r6
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f6 fb0e 	bl	8000b30 <__aeabi_dcmple>
 800a514:	b1a0      	cbz	r0, 800a540 <_strtod_l+0xb50>
 800a516:	4639      	mov	r1, r7
 800a518:	4630      	mov	r0, r6
 800a51a:	f7f6 fb65 	bl	8000be8 <__aeabi_d2uiz>
 800a51e:	2801      	cmp	r0, #1
 800a520:	bf38      	it	cc
 800a522:	2001      	movcc	r0, #1
 800a524:	f7f6 f80e 	bl	8000544 <__aeabi_ui2d>
 800a528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	b9fb      	cbnz	r3, 800a570 <_strtod_l+0xb80>
 800a530:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a534:	9014      	str	r0, [sp, #80]	@ 0x50
 800a536:	9315      	str	r3, [sp, #84]	@ 0x54
 800a538:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a53c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a542:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a546:	1b5b      	subs	r3, r3, r5
 800a548:	9311      	str	r3, [sp, #68]	@ 0x44
 800a54a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a54e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a552:	f7ff f8f1 	bl	8009738 <__ulp>
 800a556:	4650      	mov	r0, sl
 800a558:	ec53 2b10 	vmov	r2, r3, d0
 800a55c:	4659      	mov	r1, fp
 800a55e:	f7f6 f86b 	bl	8000638 <__aeabi_dmul>
 800a562:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a566:	f7f5 feb1 	bl	80002cc <__adddf3>
 800a56a:	4682      	mov	sl, r0
 800a56c:	468b      	mov	fp, r1
 800a56e:	e770      	b.n	800a452 <_strtod_l+0xa62>
 800a570:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a574:	e7e0      	b.n	800a538 <_strtod_l+0xb48>
 800a576:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5b0 <_strtod_l+0xbc0>)
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f7f6 face 	bl	8000b1c <__aeabi_dcmplt>
 800a580:	e798      	b.n	800a4b4 <_strtod_l+0xac4>
 800a582:	2300      	movs	r3, #0
 800a584:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a586:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	f7ff ba6d 	b.w	8009a6a <_strtod_l+0x7a>
 800a590:	2a65      	cmp	r2, #101	@ 0x65
 800a592:	f43f ab66 	beq.w	8009c62 <_strtod_l+0x272>
 800a596:	2a45      	cmp	r2, #69	@ 0x45
 800a598:	f43f ab63 	beq.w	8009c62 <_strtod_l+0x272>
 800a59c:	2301      	movs	r3, #1
 800a59e:	f7ff bb9e 	b.w	8009cde <_strtod_l+0x2ee>
 800a5a2:	bf00      	nop
 800a5a4:	f3af 8000 	nop.w
 800a5a8:	ffc00000 	.word	0xffc00000
 800a5ac:	41dfffff 	.word	0x41dfffff
 800a5b0:	94a03595 	.word	0x94a03595
 800a5b4:	3fcfffff 	.word	0x3fcfffff

0800a5b8 <_strtod_r>:
 800a5b8:	4b01      	ldr	r3, [pc, #4]	@ (800a5c0 <_strtod_r+0x8>)
 800a5ba:	f7ff ba19 	b.w	80099f0 <_strtod_l>
 800a5be:	bf00      	nop
 800a5c0:	200000d8 	.word	0x200000d8

0800a5c4 <_strtol_l.constprop.0>:
 800a5c4:	2b24      	cmp	r3, #36	@ 0x24
 800a5c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ca:	4686      	mov	lr, r0
 800a5cc:	4690      	mov	r8, r2
 800a5ce:	d801      	bhi.n	800a5d4 <_strtol_l.constprop.0+0x10>
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d106      	bne.n	800a5e2 <_strtol_l.constprop.0+0x1e>
 800a5d4:	f7fd fdae 	bl	8008134 <__errno>
 800a5d8:	2316      	movs	r3, #22
 800a5da:	6003      	str	r3, [r0, #0]
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e2:	4834      	ldr	r0, [pc, #208]	@ (800a6b4 <_strtol_l.constprop.0+0xf0>)
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5ec:	5d06      	ldrb	r6, [r0, r4]
 800a5ee:	f016 0608 	ands.w	r6, r6, #8
 800a5f2:	d1f8      	bne.n	800a5e6 <_strtol_l.constprop.0+0x22>
 800a5f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5f6:	d12d      	bne.n	800a654 <_strtol_l.constprop.0+0x90>
 800a5f8:	782c      	ldrb	r4, [r5, #0]
 800a5fa:	2601      	movs	r6, #1
 800a5fc:	1c95      	adds	r5, r2, #2
 800a5fe:	f033 0210 	bics.w	r2, r3, #16
 800a602:	d109      	bne.n	800a618 <_strtol_l.constprop.0+0x54>
 800a604:	2c30      	cmp	r4, #48	@ 0x30
 800a606:	d12a      	bne.n	800a65e <_strtol_l.constprop.0+0x9a>
 800a608:	782a      	ldrb	r2, [r5, #0]
 800a60a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a60e:	2a58      	cmp	r2, #88	@ 0x58
 800a610:	d125      	bne.n	800a65e <_strtol_l.constprop.0+0x9a>
 800a612:	786c      	ldrb	r4, [r5, #1]
 800a614:	2310      	movs	r3, #16
 800a616:	3502      	adds	r5, #2
 800a618:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a61c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a620:	2200      	movs	r2, #0
 800a622:	fbbc f9f3 	udiv	r9, ip, r3
 800a626:	4610      	mov	r0, r2
 800a628:	fb03 ca19 	mls	sl, r3, r9, ip
 800a62c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a630:	2f09      	cmp	r7, #9
 800a632:	d81b      	bhi.n	800a66c <_strtol_l.constprop.0+0xa8>
 800a634:	463c      	mov	r4, r7
 800a636:	42a3      	cmp	r3, r4
 800a638:	dd27      	ble.n	800a68a <_strtol_l.constprop.0+0xc6>
 800a63a:	1c57      	adds	r7, r2, #1
 800a63c:	d007      	beq.n	800a64e <_strtol_l.constprop.0+0x8a>
 800a63e:	4581      	cmp	r9, r0
 800a640:	d320      	bcc.n	800a684 <_strtol_l.constprop.0+0xc0>
 800a642:	d101      	bne.n	800a648 <_strtol_l.constprop.0+0x84>
 800a644:	45a2      	cmp	sl, r4
 800a646:	db1d      	blt.n	800a684 <_strtol_l.constprop.0+0xc0>
 800a648:	fb00 4003 	mla	r0, r0, r3, r4
 800a64c:	2201      	movs	r2, #1
 800a64e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a652:	e7eb      	b.n	800a62c <_strtol_l.constprop.0+0x68>
 800a654:	2c2b      	cmp	r4, #43	@ 0x2b
 800a656:	bf04      	itt	eq
 800a658:	782c      	ldrbeq	r4, [r5, #0]
 800a65a:	1c95      	addeq	r5, r2, #2
 800a65c:	e7cf      	b.n	800a5fe <_strtol_l.constprop.0+0x3a>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1da      	bne.n	800a618 <_strtol_l.constprop.0+0x54>
 800a662:	2c30      	cmp	r4, #48	@ 0x30
 800a664:	bf0c      	ite	eq
 800a666:	2308      	moveq	r3, #8
 800a668:	230a      	movne	r3, #10
 800a66a:	e7d5      	b.n	800a618 <_strtol_l.constprop.0+0x54>
 800a66c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a670:	2f19      	cmp	r7, #25
 800a672:	d801      	bhi.n	800a678 <_strtol_l.constprop.0+0xb4>
 800a674:	3c37      	subs	r4, #55	@ 0x37
 800a676:	e7de      	b.n	800a636 <_strtol_l.constprop.0+0x72>
 800a678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a67c:	2f19      	cmp	r7, #25
 800a67e:	d804      	bhi.n	800a68a <_strtol_l.constprop.0+0xc6>
 800a680:	3c57      	subs	r4, #87	@ 0x57
 800a682:	e7d8      	b.n	800a636 <_strtol_l.constprop.0+0x72>
 800a684:	f04f 32ff 	mov.w	r2, #4294967295
 800a688:	e7e1      	b.n	800a64e <_strtol_l.constprop.0+0x8a>
 800a68a:	1c53      	adds	r3, r2, #1
 800a68c:	d108      	bne.n	800a6a0 <_strtol_l.constprop.0+0xdc>
 800a68e:	2322      	movs	r3, #34	@ 0x22
 800a690:	f8ce 3000 	str.w	r3, [lr]
 800a694:	4660      	mov	r0, ip
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	d0a0      	beq.n	800a5de <_strtol_l.constprop.0+0x1a>
 800a69c:	1e69      	subs	r1, r5, #1
 800a69e:	e006      	b.n	800a6ae <_strtol_l.constprop.0+0xea>
 800a6a0:	b106      	cbz	r6, 800a6a4 <_strtol_l.constprop.0+0xe0>
 800a6a2:	4240      	negs	r0, r0
 800a6a4:	f1b8 0f00 	cmp.w	r8, #0
 800a6a8:	d099      	beq.n	800a5de <_strtol_l.constprop.0+0x1a>
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d1f6      	bne.n	800a69c <_strtol_l.constprop.0+0xd8>
 800a6ae:	f8c8 1000 	str.w	r1, [r8]
 800a6b2:	e794      	b.n	800a5de <_strtol_l.constprop.0+0x1a>
 800a6b4:	0800d121 	.word	0x0800d121

0800a6b8 <_strtol_r>:
 800a6b8:	f7ff bf84 	b.w	800a5c4 <_strtol_l.constprop.0>

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	688e      	ldr	r6, [r1, #8]
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	42be      	cmp	r6, r7
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	d82d      	bhi.n	800a72c <__ssputs_r+0x70>
 800a6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6d8:	d026      	beq.n	800a728 <__ssputs_r+0x6c>
 800a6da:	6965      	ldr	r5, [r4, #20]
 800a6dc:	6909      	ldr	r1, [r1, #16]
 800a6de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e2:	eba3 0901 	sub.w	r9, r3, r1
 800a6e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ea:	1c7b      	adds	r3, r7, #1
 800a6ec:	444b      	add	r3, r9
 800a6ee:	106d      	asrs	r5, r5, #1
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	bf38      	it	cc
 800a6f4:	461d      	movcc	r5, r3
 800a6f6:	0553      	lsls	r3, r2, #21
 800a6f8:	d527      	bpl.n	800a74a <__ssputs_r+0x8e>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7fe fc1c 	bl	8008f38 <_malloc_r>
 800a700:	4606      	mov	r6, r0
 800a702:	b360      	cbz	r0, 800a75e <__ssputs_r+0xa2>
 800a704:	6921      	ldr	r1, [r4, #16]
 800a706:	464a      	mov	r2, r9
 800a708:	f7fd fd41 	bl	800818e <memcpy>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	6126      	str	r6, [r4, #16]
 800a71a:	6165      	str	r5, [r4, #20]
 800a71c:	444e      	add	r6, r9
 800a71e:	eba5 0509 	sub.w	r5, r5, r9
 800a722:	6026      	str	r6, [r4, #0]
 800a724:	60a5      	str	r5, [r4, #8]
 800a726:	463e      	mov	r6, r7
 800a728:	42be      	cmp	r6, r7
 800a72a:	d900      	bls.n	800a72e <__ssputs_r+0x72>
 800a72c:	463e      	mov	r6, r7
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	4632      	mov	r2, r6
 800a732:	4641      	mov	r1, r8
 800a734:	f7fd fc91 	bl	800805a <memmove>
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	1b9b      	subs	r3, r3, r6
 800a73c:	60a3      	str	r3, [r4, #8]
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	4433      	add	r3, r6
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	2000      	movs	r0, #0
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	462a      	mov	r2, r5
 800a74c:	f000 fd61 	bl	800b212 <_realloc_r>
 800a750:	4606      	mov	r6, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	d1e0      	bne.n	800a718 <__ssputs_r+0x5c>
 800a756:	6921      	ldr	r1, [r4, #16]
 800a758:	4650      	mov	r0, sl
 800a75a:	f7fe fb79 	bl	8008e50 <_free_r>
 800a75e:	230c      	movs	r3, #12
 800a760:	f8ca 3000 	str.w	r3, [sl]
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	e7e9      	b.n	800a746 <__ssputs_r+0x8a>
	...

0800a774 <_svfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	4698      	mov	r8, r3
 800a77a:	898b      	ldrh	r3, [r1, #12]
 800a77c:	061b      	lsls	r3, r3, #24
 800a77e:	b09d      	sub	sp, #116	@ 0x74
 800a780:	4607      	mov	r7, r0
 800a782:	460d      	mov	r5, r1
 800a784:	4614      	mov	r4, r2
 800a786:	d510      	bpl.n	800a7aa <_svfiprintf_r+0x36>
 800a788:	690b      	ldr	r3, [r1, #16]
 800a78a:	b973      	cbnz	r3, 800a7aa <_svfiprintf_r+0x36>
 800a78c:	2140      	movs	r1, #64	@ 0x40
 800a78e:	f7fe fbd3 	bl	8008f38 <_malloc_r>
 800a792:	6028      	str	r0, [r5, #0]
 800a794:	6128      	str	r0, [r5, #16]
 800a796:	b930      	cbnz	r0, 800a7a6 <_svfiprintf_r+0x32>
 800a798:	230c      	movs	r3, #12
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	b01d      	add	sp, #116	@ 0x74
 800a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a6:	2340      	movs	r3, #64	@ 0x40
 800a7a8:	616b      	str	r3, [r5, #20]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b8:	2330      	movs	r3, #48	@ 0x30
 800a7ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a958 <_svfiprintf_r+0x1e4>
 800a7be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7c2:	f04f 0901 	mov.w	r9, #1
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ce:	b10a      	cbz	r2, 800a7d4 <_svfiprintf_r+0x60>
 800a7d0:	2a25      	cmp	r2, #37	@ 0x25
 800a7d2:	d1f9      	bne.n	800a7c8 <_svfiprintf_r+0x54>
 800a7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d8:	d00b      	beq.n	800a7f2 <_svfiprintf_r+0x7e>
 800a7da:	465b      	mov	r3, fp
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ff6b 	bl	800a6bc <__ssputs_r>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f000 80a7 	beq.w	800a93a <_svfiprintf_r+0x1c6>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7ee:	445a      	add	r2, fp
 800a7f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 809f 	beq.w	800a93a <_svfiprintf_r+0x1c6>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a806:	f10a 0a01 	add.w	sl, sl, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a812:	931a      	str	r3, [sp, #104]	@ 0x68
 800a814:	4654      	mov	r4, sl
 800a816:	2205      	movs	r2, #5
 800a818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81c:	484e      	ldr	r0, [pc, #312]	@ (800a958 <_svfiprintf_r+0x1e4>)
 800a81e:	f7f5 fcf7 	bl	8000210 <memchr>
 800a822:	9a04      	ldr	r2, [sp, #16]
 800a824:	b9d8      	cbnz	r0, 800a85e <_svfiprintf_r+0xea>
 800a826:	06d0      	lsls	r0, r2, #27
 800a828:	bf44      	itt	mi
 800a82a:	2320      	movmi	r3, #32
 800a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	bf44      	itt	mi
 800a834:	232b      	movmi	r3, #43	@ 0x2b
 800a836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a840:	d015      	beq.n	800a86e <_svfiprintf_r+0xfa>
 800a842:	9a07      	ldr	r2, [sp, #28]
 800a844:	4654      	mov	r4, sl
 800a846:	2000      	movs	r0, #0
 800a848:	f04f 0c0a 	mov.w	ip, #10
 800a84c:	4621      	mov	r1, r4
 800a84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a852:	3b30      	subs	r3, #48	@ 0x30
 800a854:	2b09      	cmp	r3, #9
 800a856:	d94b      	bls.n	800a8f0 <_svfiprintf_r+0x17c>
 800a858:	b1b0      	cbz	r0, 800a888 <_svfiprintf_r+0x114>
 800a85a:	9207      	str	r2, [sp, #28]
 800a85c:	e014      	b.n	800a888 <_svfiprintf_r+0x114>
 800a85e:	eba0 0308 	sub.w	r3, r0, r8
 800a862:	fa09 f303 	lsl.w	r3, r9, r3
 800a866:	4313      	orrs	r3, r2
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	46a2      	mov	sl, r4
 800a86c:	e7d2      	b.n	800a814 <_svfiprintf_r+0xa0>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9103      	str	r1, [sp, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfbb      	ittet	lt
 800a87a:	425b      	neglt	r3, r3
 800a87c:	f042 0202 	orrlt.w	r2, r2, #2
 800a880:	9307      	strge	r3, [sp, #28]
 800a882:	9307      	strlt	r3, [sp, #28]
 800a884:	bfb8      	it	lt
 800a886:	9204      	strlt	r2, [sp, #16]
 800a888:	7823      	ldrb	r3, [r4, #0]
 800a88a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a88c:	d10a      	bne.n	800a8a4 <_svfiprintf_r+0x130>
 800a88e:	7863      	ldrb	r3, [r4, #1]
 800a890:	2b2a      	cmp	r3, #42	@ 0x2a
 800a892:	d132      	bne.n	800a8fa <_svfiprintf_r+0x186>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9203      	str	r2, [sp, #12]
 800a89c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8a0:	3402      	adds	r4, #2
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a968 <_svfiprintf_r+0x1f4>
 800a8a8:	7821      	ldrb	r1, [r4, #0]
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	4650      	mov	r0, sl
 800a8ae:	f7f5 fcaf 	bl	8000210 <memchr>
 800a8b2:	b138      	cbz	r0, 800a8c4 <_svfiprintf_r+0x150>
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	eba0 000a 	sub.w	r0, r0, sl
 800a8ba:	2240      	movs	r2, #64	@ 0x40
 800a8bc:	4082      	lsls	r2, r0
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	3401      	adds	r4, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c8:	4824      	ldr	r0, [pc, #144]	@ (800a95c <_svfiprintf_r+0x1e8>)
 800a8ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8ce:	2206      	movs	r2, #6
 800a8d0:	f7f5 fc9e 	bl	8000210 <memchr>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d036      	beq.n	800a946 <_svfiprintf_r+0x1d2>
 800a8d8:	4b21      	ldr	r3, [pc, #132]	@ (800a960 <_svfiprintf_r+0x1ec>)
 800a8da:	bb1b      	cbnz	r3, 800a924 <_svfiprintf_r+0x1b0>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	3307      	adds	r3, #7
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ea:	4433      	add	r3, r6
 800a8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ee:	e76a      	b.n	800a7c6 <_svfiprintf_r+0x52>
 800a8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	2001      	movs	r0, #1
 800a8f8:	e7a8      	b.n	800a84c <_svfiprintf_r+0xd8>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	4619      	mov	r1, r3
 800a902:	f04f 0c0a 	mov.w	ip, #10
 800a906:	4620      	mov	r0, r4
 800a908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a90c:	3a30      	subs	r2, #48	@ 0x30
 800a90e:	2a09      	cmp	r2, #9
 800a910:	d903      	bls.n	800a91a <_svfiprintf_r+0x1a6>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0c6      	beq.n	800a8a4 <_svfiprintf_r+0x130>
 800a916:	9105      	str	r1, [sp, #20]
 800a918:	e7c4      	b.n	800a8a4 <_svfiprintf_r+0x130>
 800a91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91e:	4604      	mov	r4, r0
 800a920:	2301      	movs	r3, #1
 800a922:	e7f0      	b.n	800a906 <_svfiprintf_r+0x192>
 800a924:	ab03      	add	r3, sp, #12
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	462a      	mov	r2, r5
 800a92a:	4b0e      	ldr	r3, [pc, #56]	@ (800a964 <_svfiprintf_r+0x1f0>)
 800a92c:	a904      	add	r1, sp, #16
 800a92e:	4638      	mov	r0, r7
 800a930:	f7fc fc6e 	bl	8007210 <_printf_float>
 800a934:	1c42      	adds	r2, r0, #1
 800a936:	4606      	mov	r6, r0
 800a938:	d1d6      	bne.n	800a8e8 <_svfiprintf_r+0x174>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	065b      	lsls	r3, r3, #25
 800a93e:	f53f af2d 	bmi.w	800a79c <_svfiprintf_r+0x28>
 800a942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a944:	e72c      	b.n	800a7a0 <_svfiprintf_r+0x2c>
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <_svfiprintf_r+0x1f0>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4638      	mov	r0, r7
 800a952:	f7fc fef5 	bl	8007740 <_printf_i>
 800a956:	e7ed      	b.n	800a934 <_svfiprintf_r+0x1c0>
 800a958:	0800d221 	.word	0x0800d221
 800a95c:	0800d22b 	.word	0x0800d22b
 800a960:	08007211 	.word	0x08007211
 800a964:	0800a6bd 	.word	0x0800a6bd
 800a968:	0800d227 	.word	0x0800d227

0800a96c <__sflush_r>:
 800a96c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	0716      	lsls	r6, r2, #28
 800a976:	4605      	mov	r5, r0
 800a978:	460c      	mov	r4, r1
 800a97a:	d454      	bmi.n	800aa26 <__sflush_r+0xba>
 800a97c:	684b      	ldr	r3, [r1, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dc02      	bgt.n	800a988 <__sflush_r+0x1c>
 800a982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	dd48      	ble.n	800aa1a <__sflush_r+0xae>
 800a988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	d045      	beq.n	800aa1a <__sflush_r+0xae>
 800a98e:	2300      	movs	r3, #0
 800a990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a994:	682f      	ldr	r7, [r5, #0]
 800a996:	6a21      	ldr	r1, [r4, #32]
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	d030      	beq.n	800a9fe <__sflush_r+0x92>
 800a99c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	0759      	lsls	r1, r3, #29
 800a9a2:	d505      	bpl.n	800a9b0 <__sflush_r+0x44>
 800a9a4:	6863      	ldr	r3, [r4, #4]
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9aa:	b10b      	cbz	r3, 800a9b0 <__sflush_r+0x44>
 800a9ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9b4:	6a21      	ldr	r1, [r4, #32]
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b0      	blx	r6
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	d106      	bne.n	800a9ce <__sflush_r+0x62>
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	291d      	cmp	r1, #29
 800a9c4:	d82b      	bhi.n	800aa1e <__sflush_r+0xb2>
 800a9c6:	4a2a      	ldr	r2, [pc, #168]	@ (800aa70 <__sflush_r+0x104>)
 800a9c8:	410a      	asrs	r2, r1
 800a9ca:	07d6      	lsls	r6, r2, #31
 800a9cc:	d427      	bmi.n	800aa1e <__sflush_r+0xb2>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	6062      	str	r2, [r4, #4]
 800a9d2:	04d9      	lsls	r1, r3, #19
 800a9d4:	6922      	ldr	r2, [r4, #16]
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	d504      	bpl.n	800a9e4 <__sflush_r+0x78>
 800a9da:	1c42      	adds	r2, r0, #1
 800a9dc:	d101      	bne.n	800a9e2 <__sflush_r+0x76>
 800a9de:	682b      	ldr	r3, [r5, #0]
 800a9e0:	b903      	cbnz	r3, 800a9e4 <__sflush_r+0x78>
 800a9e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9e6:	602f      	str	r7, [r5, #0]
 800a9e8:	b1b9      	cbz	r1, 800aa1a <__sflush_r+0xae>
 800a9ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d002      	beq.n	800a9f8 <__sflush_r+0x8c>
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7fe fa2c 	bl	8008e50 <_free_r>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9fc:	e00d      	b.n	800aa1a <__sflush_r+0xae>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	4602      	mov	r2, r0
 800aa06:	1c50      	adds	r0, r2, #1
 800aa08:	d1c9      	bne.n	800a99e <__sflush_r+0x32>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0c6      	beq.n	800a99e <__sflush_r+0x32>
 800aa10:	2b1d      	cmp	r3, #29
 800aa12:	d001      	beq.n	800aa18 <__sflush_r+0xac>
 800aa14:	2b16      	cmp	r3, #22
 800aa16:	d11e      	bne.n	800aa56 <__sflush_r+0xea>
 800aa18:	602f      	str	r7, [r5, #0]
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e022      	b.n	800aa64 <__sflush_r+0xf8>
 800aa1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa22:	b21b      	sxth	r3, r3
 800aa24:	e01b      	b.n	800aa5e <__sflush_r+0xf2>
 800aa26:	690f      	ldr	r7, [r1, #16]
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	d0f6      	beq.n	800aa1a <__sflush_r+0xae>
 800aa2c:	0793      	lsls	r3, r2, #30
 800aa2e:	680e      	ldr	r6, [r1, #0]
 800aa30:	bf08      	it	eq
 800aa32:	694b      	ldreq	r3, [r1, #20]
 800aa34:	600f      	str	r7, [r1, #0]
 800aa36:	bf18      	it	ne
 800aa38:	2300      	movne	r3, #0
 800aa3a:	eba6 0807 	sub.w	r8, r6, r7
 800aa3e:	608b      	str	r3, [r1, #8]
 800aa40:	f1b8 0f00 	cmp.w	r8, #0
 800aa44:	dde9      	ble.n	800aa1a <__sflush_r+0xae>
 800aa46:	6a21      	ldr	r1, [r4, #32]
 800aa48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa4a:	4643      	mov	r3, r8
 800aa4c:	463a      	mov	r2, r7
 800aa4e:	4628      	mov	r0, r5
 800aa50:	47b0      	blx	r6
 800aa52:	2800      	cmp	r0, #0
 800aa54:	dc08      	bgt.n	800aa68 <__sflush_r+0xfc>
 800aa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	4407      	add	r7, r0
 800aa6a:	eba8 0800 	sub.w	r8, r8, r0
 800aa6e:	e7e7      	b.n	800aa40 <__sflush_r+0xd4>
 800aa70:	dfbffffe 	.word	0xdfbffffe

0800aa74 <_fflush_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	690b      	ldr	r3, [r1, #16]
 800aa78:	4605      	mov	r5, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	b913      	cbnz	r3, 800aa84 <_fflush_r+0x10>
 800aa7e:	2500      	movs	r5, #0
 800aa80:	4628      	mov	r0, r5
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	b118      	cbz	r0, 800aa8e <_fflush_r+0x1a>
 800aa86:	6a03      	ldr	r3, [r0, #32]
 800aa88:	b90b      	cbnz	r3, 800aa8e <_fflush_r+0x1a>
 800aa8a:	f7fd fa19 	bl	8007ec0 <__sinit>
 800aa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0f3      	beq.n	800aa7e <_fflush_r+0xa>
 800aa96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa98:	07d0      	lsls	r0, r2, #31
 800aa9a:	d404      	bmi.n	800aaa6 <_fflush_r+0x32>
 800aa9c:	0599      	lsls	r1, r3, #22
 800aa9e:	d402      	bmi.n	800aaa6 <_fflush_r+0x32>
 800aaa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaa2:	f7fd fb72 	bl	800818a <__retarget_lock_acquire_recursive>
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	f7ff ff5f 	bl	800a96c <__sflush_r>
 800aaae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aab0:	07da      	lsls	r2, r3, #31
 800aab2:	4605      	mov	r5, r0
 800aab4:	d4e4      	bmi.n	800aa80 <_fflush_r+0xc>
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	059b      	lsls	r3, r3, #22
 800aaba:	d4e1      	bmi.n	800aa80 <_fflush_r+0xc>
 800aabc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aabe:	f7fd fb65 	bl	800818c <__retarget_lock_release_recursive>
 800aac2:	e7dd      	b.n	800aa80 <_fflush_r+0xc>

0800aac4 <strncmp>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	b16a      	cbz	r2, 800aae4 <strncmp+0x20>
 800aac8:	3901      	subs	r1, #1
 800aaca:	1884      	adds	r4, r0, r2
 800aacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d103      	bne.n	800aae0 <strncmp+0x1c>
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d001      	beq.n	800aae0 <strncmp+0x1c>
 800aadc:	2a00      	cmp	r2, #0
 800aade:	d1f5      	bne.n	800aacc <strncmp+0x8>
 800aae0:	1ad0      	subs	r0, r2, r3
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	4610      	mov	r0, r2
 800aae6:	e7fc      	b.n	800aae2 <strncmp+0x1e>

0800aae8 <_sbrk_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d06      	ldr	r5, [pc, #24]	@ (800ab04 <_sbrk_r+0x1c>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7f8 fa56 	bl	8002fa4 <_sbrk>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_sbrk_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_sbrk_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	200009b0 	.word	0x200009b0

0800ab08 <nan>:
 800ab08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab10 <nan+0x8>
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	00000000 	.word	0x00000000
 800ab14:	7ff80000 	.word	0x7ff80000

0800ab18 <__assert_func>:
 800ab18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4b09      	ldr	r3, [pc, #36]	@ (800ab44 <__assert_func+0x2c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4605      	mov	r5, r0
 800ab24:	68d8      	ldr	r0, [r3, #12]
 800ab26:	b954      	cbnz	r4, 800ab3e <__assert_func+0x26>
 800ab28:	4b07      	ldr	r3, [pc, #28]	@ (800ab48 <__assert_func+0x30>)
 800ab2a:	461c      	mov	r4, r3
 800ab2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab30:	9100      	str	r1, [sp, #0]
 800ab32:	462b      	mov	r3, r5
 800ab34:	4905      	ldr	r1, [pc, #20]	@ (800ab4c <__assert_func+0x34>)
 800ab36:	f000 fba7 	bl	800b288 <fiprintf>
 800ab3a:	f000 fbb7 	bl	800b2ac <abort>
 800ab3e:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <__assert_func+0x38>)
 800ab40:	e7f4      	b.n	800ab2c <__assert_func+0x14>
 800ab42:	bf00      	nop
 800ab44:	20000088 	.word	0x20000088
 800ab48:	0800d275 	.word	0x0800d275
 800ab4c:	0800d247 	.word	0x0800d247
 800ab50:	0800d23a 	.word	0x0800d23a

0800ab54 <_calloc_r>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	fba1 5402 	umull	r5, r4, r1, r2
 800ab5a:	b93c      	cbnz	r4, 800ab6c <_calloc_r+0x18>
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f7fe f9eb 	bl	8008f38 <_malloc_r>
 800ab62:	4606      	mov	r6, r0
 800ab64:	b928      	cbnz	r0, 800ab72 <_calloc_r+0x1e>
 800ab66:	2600      	movs	r6, #0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	220c      	movs	r2, #12
 800ab6e:	6002      	str	r2, [r0, #0]
 800ab70:	e7f9      	b.n	800ab66 <_calloc_r+0x12>
 800ab72:	462a      	mov	r2, r5
 800ab74:	4621      	mov	r1, r4
 800ab76:	f7fd fa8a 	bl	800808e <memset>
 800ab7a:	e7f5      	b.n	800ab68 <_calloc_r+0x14>

0800ab7c <rshift>:
 800ab7c:	6903      	ldr	r3, [r0, #16]
 800ab7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab8a:	f100 0414 	add.w	r4, r0, #20
 800ab8e:	dd45      	ble.n	800ac1c <rshift+0xa0>
 800ab90:	f011 011f 	ands.w	r1, r1, #31
 800ab94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab9c:	d10c      	bne.n	800abb8 <rshift+0x3c>
 800ab9e:	f100 0710 	add.w	r7, r0, #16
 800aba2:	4629      	mov	r1, r5
 800aba4:	42b1      	cmp	r1, r6
 800aba6:	d334      	bcc.n	800ac12 <rshift+0x96>
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	1eea      	subs	r2, r5, #3
 800abae:	4296      	cmp	r6, r2
 800abb0:	bf38      	it	cc
 800abb2:	2300      	movcc	r3, #0
 800abb4:	4423      	add	r3, r4
 800abb6:	e015      	b.n	800abe4 <rshift+0x68>
 800abb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abbc:	f1c1 0820 	rsb	r8, r1, #32
 800abc0:	40cf      	lsrs	r7, r1
 800abc2:	f105 0e04 	add.w	lr, r5, #4
 800abc6:	46a1      	mov	r9, r4
 800abc8:	4576      	cmp	r6, lr
 800abca:	46f4      	mov	ip, lr
 800abcc:	d815      	bhi.n	800abfa <rshift+0x7e>
 800abce:	1a9a      	subs	r2, r3, r2
 800abd0:	0092      	lsls	r2, r2, #2
 800abd2:	3a04      	subs	r2, #4
 800abd4:	3501      	adds	r5, #1
 800abd6:	42ae      	cmp	r6, r5
 800abd8:	bf38      	it	cc
 800abda:	2200      	movcc	r2, #0
 800abdc:	18a3      	adds	r3, r4, r2
 800abde:	50a7      	str	r7, [r4, r2]
 800abe0:	b107      	cbz	r7, 800abe4 <rshift+0x68>
 800abe2:	3304      	adds	r3, #4
 800abe4:	1b1a      	subs	r2, r3, r4
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abec:	bf08      	it	eq
 800abee:	2300      	moveq	r3, #0
 800abf0:	6102      	str	r2, [r0, #16]
 800abf2:	bf08      	it	eq
 800abf4:	6143      	streq	r3, [r0, #20]
 800abf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfa:	f8dc c000 	ldr.w	ip, [ip]
 800abfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac02:	ea4c 0707 	orr.w	r7, ip, r7
 800ac06:	f849 7b04 	str.w	r7, [r9], #4
 800ac0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac0e:	40cf      	lsrs	r7, r1
 800ac10:	e7da      	b.n	800abc8 <rshift+0x4c>
 800ac12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac1a:	e7c3      	b.n	800aba4 <rshift+0x28>
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	e7e1      	b.n	800abe4 <rshift+0x68>

0800ac20 <__hexdig_fun>:
 800ac20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d802      	bhi.n	800ac2e <__hexdig_fun+0xe>
 800ac28:	3820      	subs	r0, #32
 800ac2a:	b2c0      	uxtb	r0, r0
 800ac2c:	4770      	bx	lr
 800ac2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac32:	2b05      	cmp	r3, #5
 800ac34:	d801      	bhi.n	800ac3a <__hexdig_fun+0x1a>
 800ac36:	3847      	subs	r0, #71	@ 0x47
 800ac38:	e7f7      	b.n	800ac2a <__hexdig_fun+0xa>
 800ac3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d801      	bhi.n	800ac46 <__hexdig_fun+0x26>
 800ac42:	3827      	subs	r0, #39	@ 0x27
 800ac44:	e7f1      	b.n	800ac2a <__hexdig_fun+0xa>
 800ac46:	2000      	movs	r0, #0
 800ac48:	4770      	bx	lr
	...

0800ac4c <__gethex>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	b085      	sub	sp, #20
 800ac52:	468a      	mov	sl, r1
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	680b      	ldr	r3, [r1, #0]
 800ac58:	9001      	str	r0, [sp, #4]
 800ac5a:	4690      	mov	r8, r2
 800ac5c:	1c9c      	adds	r4, r3, #2
 800ac5e:	46a1      	mov	r9, r4
 800ac60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac64:	2830      	cmp	r0, #48	@ 0x30
 800ac66:	d0fa      	beq.n	800ac5e <__gethex+0x12>
 800ac68:	eba9 0303 	sub.w	r3, r9, r3
 800ac6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac70:	f7ff ffd6 	bl	800ac20 <__hexdig_fun>
 800ac74:	4605      	mov	r5, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d168      	bne.n	800ad4c <__gethex+0x100>
 800ac7a:	49a0      	ldr	r1, [pc, #640]	@ (800aefc <__gethex+0x2b0>)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	4648      	mov	r0, r9
 800ac80:	f7ff ff20 	bl	800aac4 <strncmp>
 800ac84:	4607      	mov	r7, r0
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d167      	bne.n	800ad5a <__gethex+0x10e>
 800ac8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac8e:	4626      	mov	r6, r4
 800ac90:	f7ff ffc6 	bl	800ac20 <__hexdig_fun>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d062      	beq.n	800ad5e <__gethex+0x112>
 800ac98:	4623      	mov	r3, r4
 800ac9a:	7818      	ldrb	r0, [r3, #0]
 800ac9c:	2830      	cmp	r0, #48	@ 0x30
 800ac9e:	4699      	mov	r9, r3
 800aca0:	f103 0301 	add.w	r3, r3, #1
 800aca4:	d0f9      	beq.n	800ac9a <__gethex+0x4e>
 800aca6:	f7ff ffbb 	bl	800ac20 <__hexdig_fun>
 800acaa:	fab0 f580 	clz	r5, r0
 800acae:	096d      	lsrs	r5, r5, #5
 800acb0:	f04f 0b01 	mov.w	fp, #1
 800acb4:	464a      	mov	r2, r9
 800acb6:	4616      	mov	r6, r2
 800acb8:	3201      	adds	r2, #1
 800acba:	7830      	ldrb	r0, [r6, #0]
 800acbc:	f7ff ffb0 	bl	800ac20 <__hexdig_fun>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1f8      	bne.n	800acb6 <__gethex+0x6a>
 800acc4:	498d      	ldr	r1, [pc, #564]	@ (800aefc <__gethex+0x2b0>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff fefb 	bl	800aac4 <strncmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d13f      	bne.n	800ad52 <__gethex+0x106>
 800acd2:	b944      	cbnz	r4, 800ace6 <__gethex+0x9a>
 800acd4:	1c74      	adds	r4, r6, #1
 800acd6:	4622      	mov	r2, r4
 800acd8:	4616      	mov	r6, r2
 800acda:	3201      	adds	r2, #1
 800acdc:	7830      	ldrb	r0, [r6, #0]
 800acde:	f7ff ff9f 	bl	800ac20 <__hexdig_fun>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d1f8      	bne.n	800acd8 <__gethex+0x8c>
 800ace6:	1ba4      	subs	r4, r4, r6
 800ace8:	00a7      	lsls	r7, r4, #2
 800acea:	7833      	ldrb	r3, [r6, #0]
 800acec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acf0:	2b50      	cmp	r3, #80	@ 0x50
 800acf2:	d13e      	bne.n	800ad72 <__gethex+0x126>
 800acf4:	7873      	ldrb	r3, [r6, #1]
 800acf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800acf8:	d033      	beq.n	800ad62 <__gethex+0x116>
 800acfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800acfc:	d034      	beq.n	800ad68 <__gethex+0x11c>
 800acfe:	1c71      	adds	r1, r6, #1
 800ad00:	2400      	movs	r4, #0
 800ad02:	7808      	ldrb	r0, [r1, #0]
 800ad04:	f7ff ff8c 	bl	800ac20 <__hexdig_fun>
 800ad08:	1e43      	subs	r3, r0, #1
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b18      	cmp	r3, #24
 800ad0e:	d830      	bhi.n	800ad72 <__gethex+0x126>
 800ad10:	f1a0 0210 	sub.w	r2, r0, #16
 800ad14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad18:	f7ff ff82 	bl	800ac20 <__hexdig_fun>
 800ad1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad20:	fa5f fc8c 	uxtb.w	ip, ip
 800ad24:	f1bc 0f18 	cmp.w	ip, #24
 800ad28:	f04f 030a 	mov.w	r3, #10
 800ad2c:	d91e      	bls.n	800ad6c <__gethex+0x120>
 800ad2e:	b104      	cbz	r4, 800ad32 <__gethex+0xe6>
 800ad30:	4252      	negs	r2, r2
 800ad32:	4417      	add	r7, r2
 800ad34:	f8ca 1000 	str.w	r1, [sl]
 800ad38:	b1ed      	cbz	r5, 800ad76 <__gethex+0x12a>
 800ad3a:	f1bb 0f00 	cmp.w	fp, #0
 800ad3e:	bf0c      	ite	eq
 800ad40:	2506      	moveq	r5, #6
 800ad42:	2500      	movne	r5, #0
 800ad44:	4628      	mov	r0, r5
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	462c      	mov	r4, r5
 800ad50:	e7b0      	b.n	800acb4 <__gethex+0x68>
 800ad52:	2c00      	cmp	r4, #0
 800ad54:	d1c7      	bne.n	800ace6 <__gethex+0x9a>
 800ad56:	4627      	mov	r7, r4
 800ad58:	e7c7      	b.n	800acea <__gethex+0x9e>
 800ad5a:	464e      	mov	r6, r9
 800ad5c:	462f      	mov	r7, r5
 800ad5e:	2501      	movs	r5, #1
 800ad60:	e7c3      	b.n	800acea <__gethex+0x9e>
 800ad62:	2400      	movs	r4, #0
 800ad64:	1cb1      	adds	r1, r6, #2
 800ad66:	e7cc      	b.n	800ad02 <__gethex+0xb6>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	e7fb      	b.n	800ad64 <__gethex+0x118>
 800ad6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ad70:	e7ce      	b.n	800ad10 <__gethex+0xc4>
 800ad72:	4631      	mov	r1, r6
 800ad74:	e7de      	b.n	800ad34 <__gethex+0xe8>
 800ad76:	eba6 0309 	sub.w	r3, r6, r9
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	2b07      	cmp	r3, #7
 800ad80:	dc0a      	bgt.n	800ad98 <__gethex+0x14c>
 800ad82:	9801      	ldr	r0, [sp, #4]
 800ad84:	f7fe f964 	bl	8009050 <_Balloc>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	b940      	cbnz	r0, 800ad9e <__gethex+0x152>
 800ad8c:	4b5c      	ldr	r3, [pc, #368]	@ (800af00 <__gethex+0x2b4>)
 800ad8e:	4602      	mov	r2, r0
 800ad90:	21e4      	movs	r1, #228	@ 0xe4
 800ad92:	485c      	ldr	r0, [pc, #368]	@ (800af04 <__gethex+0x2b8>)
 800ad94:	f7ff fec0 	bl	800ab18 <__assert_func>
 800ad98:	3101      	adds	r1, #1
 800ad9a:	105b      	asrs	r3, r3, #1
 800ad9c:	e7ef      	b.n	800ad7e <__gethex+0x132>
 800ad9e:	f100 0a14 	add.w	sl, r0, #20
 800ada2:	2300      	movs	r3, #0
 800ada4:	4655      	mov	r5, sl
 800ada6:	469b      	mov	fp, r3
 800ada8:	45b1      	cmp	r9, r6
 800adaa:	d337      	bcc.n	800ae1c <__gethex+0x1d0>
 800adac:	f845 bb04 	str.w	fp, [r5], #4
 800adb0:	eba5 050a 	sub.w	r5, r5, sl
 800adb4:	10ad      	asrs	r5, r5, #2
 800adb6:	6125      	str	r5, [r4, #16]
 800adb8:	4658      	mov	r0, fp
 800adba:	f7fe fa3b 	bl	8009234 <__hi0bits>
 800adbe:	016d      	lsls	r5, r5, #5
 800adc0:	f8d8 6000 	ldr.w	r6, [r8]
 800adc4:	1a2d      	subs	r5, r5, r0
 800adc6:	42b5      	cmp	r5, r6
 800adc8:	dd54      	ble.n	800ae74 <__gethex+0x228>
 800adca:	1bad      	subs	r5, r5, r6
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f7fe fdcf 	bl	8009972 <__any_on>
 800add4:	4681      	mov	r9, r0
 800add6:	b178      	cbz	r0, 800adf8 <__gethex+0x1ac>
 800add8:	1e6b      	subs	r3, r5, #1
 800adda:	1159      	asrs	r1, r3, #5
 800addc:	f003 021f 	and.w	r2, r3, #31
 800ade0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ade4:	f04f 0901 	mov.w	r9, #1
 800ade8:	fa09 f202 	lsl.w	r2, r9, r2
 800adec:	420a      	tst	r2, r1
 800adee:	d003      	beq.n	800adf8 <__gethex+0x1ac>
 800adf0:	454b      	cmp	r3, r9
 800adf2:	dc36      	bgt.n	800ae62 <__gethex+0x216>
 800adf4:	f04f 0902 	mov.w	r9, #2
 800adf8:	4629      	mov	r1, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7ff febe 	bl	800ab7c <rshift>
 800ae00:	442f      	add	r7, r5
 800ae02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae06:	42bb      	cmp	r3, r7
 800ae08:	da42      	bge.n	800ae90 <__gethex+0x244>
 800ae0a:	9801      	ldr	r0, [sp, #4]
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7fe f95f 	bl	80090d0 <_Bfree>
 800ae12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae14:	2300      	movs	r3, #0
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	25a3      	movs	r5, #163	@ 0xa3
 800ae1a:	e793      	b.n	800ad44 <__gethex+0xf8>
 800ae1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae22:	d012      	beq.n	800ae4a <__gethex+0x1fe>
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d104      	bne.n	800ae32 <__gethex+0x1e6>
 800ae28:	f845 bb04 	str.w	fp, [r5], #4
 800ae2c:	f04f 0b00 	mov.w	fp, #0
 800ae30:	465b      	mov	r3, fp
 800ae32:	7830      	ldrb	r0, [r6, #0]
 800ae34:	9303      	str	r3, [sp, #12]
 800ae36:	f7ff fef3 	bl	800ac20 <__hexdig_fun>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	f000 000f 	and.w	r0, r0, #15
 800ae40:	4098      	lsls	r0, r3
 800ae42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae46:	3304      	adds	r3, #4
 800ae48:	e7ae      	b.n	800ada8 <__gethex+0x15c>
 800ae4a:	45b1      	cmp	r9, r6
 800ae4c:	d8ea      	bhi.n	800ae24 <__gethex+0x1d8>
 800ae4e:	492b      	ldr	r1, [pc, #172]	@ (800aefc <__gethex+0x2b0>)
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff fe35 	bl	800aac4 <strncmp>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d1e1      	bne.n	800ae24 <__gethex+0x1d8>
 800ae60:	e7a2      	b.n	800ada8 <__gethex+0x15c>
 800ae62:	1ea9      	subs	r1, r5, #2
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7fe fd84 	bl	8009972 <__any_on>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0c2      	beq.n	800adf4 <__gethex+0x1a8>
 800ae6e:	f04f 0903 	mov.w	r9, #3
 800ae72:	e7c1      	b.n	800adf8 <__gethex+0x1ac>
 800ae74:	da09      	bge.n	800ae8a <__gethex+0x23e>
 800ae76:	1b75      	subs	r5, r6, r5
 800ae78:	4621      	mov	r1, r4
 800ae7a:	9801      	ldr	r0, [sp, #4]
 800ae7c:	462a      	mov	r2, r5
 800ae7e:	f7fe fb3f 	bl	8009500 <__lshift>
 800ae82:	1b7f      	subs	r7, r7, r5
 800ae84:	4604      	mov	r4, r0
 800ae86:	f100 0a14 	add.w	sl, r0, #20
 800ae8a:	f04f 0900 	mov.w	r9, #0
 800ae8e:	e7b8      	b.n	800ae02 <__gethex+0x1b6>
 800ae90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae94:	42bd      	cmp	r5, r7
 800ae96:	dd6f      	ble.n	800af78 <__gethex+0x32c>
 800ae98:	1bed      	subs	r5, r5, r7
 800ae9a:	42ae      	cmp	r6, r5
 800ae9c:	dc34      	bgt.n	800af08 <__gethex+0x2bc>
 800ae9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d022      	beq.n	800aeec <__gethex+0x2a0>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d024      	beq.n	800aef4 <__gethex+0x2a8>
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d115      	bne.n	800aeda <__gethex+0x28e>
 800aeae:	42ae      	cmp	r6, r5
 800aeb0:	d113      	bne.n	800aeda <__gethex+0x28e>
 800aeb2:	2e01      	cmp	r6, #1
 800aeb4:	d10b      	bne.n	800aece <__gethex+0x282>
 800aeb6:	9a02      	ldr	r2, [sp, #8]
 800aeb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	2301      	movs	r3, #1
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	f8ca 3000 	str.w	r3, [sl]
 800aec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aec8:	2562      	movs	r5, #98	@ 0x62
 800aeca:	601c      	str	r4, [r3, #0]
 800aecc:	e73a      	b.n	800ad44 <__gethex+0xf8>
 800aece:	1e71      	subs	r1, r6, #1
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7fe fd4e 	bl	8009972 <__any_on>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1ed      	bne.n	800aeb6 <__gethex+0x26a>
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	4621      	mov	r1, r4
 800aede:	f7fe f8f7 	bl	80090d0 <_Bfree>
 800aee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aee4:	2300      	movs	r3, #0
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	2550      	movs	r5, #80	@ 0x50
 800aeea:	e72b      	b.n	800ad44 <__gethex+0xf8>
 800aeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1f3      	bne.n	800aeda <__gethex+0x28e>
 800aef2:	e7e0      	b.n	800aeb6 <__gethex+0x26a>
 800aef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1dd      	bne.n	800aeb6 <__gethex+0x26a>
 800aefa:	e7ee      	b.n	800aeda <__gethex+0x28e>
 800aefc:	0800d0c8 	.word	0x0800d0c8
 800af00:	0800cf61 	.word	0x0800cf61
 800af04:	0800d276 	.word	0x0800d276
 800af08:	1e6f      	subs	r7, r5, #1
 800af0a:	f1b9 0f00 	cmp.w	r9, #0
 800af0e:	d130      	bne.n	800af72 <__gethex+0x326>
 800af10:	b127      	cbz	r7, 800af1c <__gethex+0x2d0>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f7fe fd2c 	bl	8009972 <__any_on>
 800af1a:	4681      	mov	r9, r0
 800af1c:	117a      	asrs	r2, r7, #5
 800af1e:	2301      	movs	r3, #1
 800af20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af24:	f007 071f 	and.w	r7, r7, #31
 800af28:	40bb      	lsls	r3, r7
 800af2a:	4213      	tst	r3, r2
 800af2c:	4629      	mov	r1, r5
 800af2e:	4620      	mov	r0, r4
 800af30:	bf18      	it	ne
 800af32:	f049 0902 	orrne.w	r9, r9, #2
 800af36:	f7ff fe21 	bl	800ab7c <rshift>
 800af3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af3e:	1b76      	subs	r6, r6, r5
 800af40:	2502      	movs	r5, #2
 800af42:	f1b9 0f00 	cmp.w	r9, #0
 800af46:	d047      	beq.n	800afd8 <__gethex+0x38c>
 800af48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d015      	beq.n	800af7c <__gethex+0x330>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d017      	beq.n	800af84 <__gethex+0x338>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d109      	bne.n	800af6c <__gethex+0x320>
 800af58:	f019 0f02 	tst.w	r9, #2
 800af5c:	d006      	beq.n	800af6c <__gethex+0x320>
 800af5e:	f8da 3000 	ldr.w	r3, [sl]
 800af62:	ea49 0903 	orr.w	r9, r9, r3
 800af66:	f019 0f01 	tst.w	r9, #1
 800af6a:	d10e      	bne.n	800af8a <__gethex+0x33e>
 800af6c:	f045 0510 	orr.w	r5, r5, #16
 800af70:	e032      	b.n	800afd8 <__gethex+0x38c>
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	e7d1      	b.n	800af1c <__gethex+0x2d0>
 800af78:	2501      	movs	r5, #1
 800af7a:	e7e2      	b.n	800af42 <__gethex+0x2f6>
 800af7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7e:	f1c3 0301 	rsb	r3, r3, #1
 800af82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <__gethex+0x320>
 800af8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af8e:	f104 0314 	add.w	r3, r4, #20
 800af92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af9a:	f04f 0c00 	mov.w	ip, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afa8:	d01b      	beq.n	800afe2 <__gethex+0x396>
 800afaa:	3201      	adds	r2, #1
 800afac:	6002      	str	r2, [r0, #0]
 800afae:	2d02      	cmp	r5, #2
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	d13c      	bne.n	800b030 <__gethex+0x3e4>
 800afb6:	f8d8 2000 	ldr.w	r2, [r8]
 800afba:	3a01      	subs	r2, #1
 800afbc:	42b2      	cmp	r2, r6
 800afbe:	d109      	bne.n	800afd4 <__gethex+0x388>
 800afc0:	1171      	asrs	r1, r6, #5
 800afc2:	2201      	movs	r2, #1
 800afc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afc8:	f006 061f 	and.w	r6, r6, #31
 800afcc:	fa02 f606 	lsl.w	r6, r2, r6
 800afd0:	421e      	tst	r6, r3
 800afd2:	d13a      	bne.n	800b04a <__gethex+0x3fe>
 800afd4:	f045 0520 	orr.w	r5, r5, #32
 800afd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afda:	601c      	str	r4, [r3, #0]
 800afdc:	9b02      	ldr	r3, [sp, #8]
 800afde:	601f      	str	r7, [r3, #0]
 800afe0:	e6b0      	b.n	800ad44 <__gethex+0xf8>
 800afe2:	4299      	cmp	r1, r3
 800afe4:	f843 cc04 	str.w	ip, [r3, #-4]
 800afe8:	d8d9      	bhi.n	800af9e <__gethex+0x352>
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	459b      	cmp	fp, r3
 800afee:	db17      	blt.n	800b020 <__gethex+0x3d4>
 800aff0:	6861      	ldr	r1, [r4, #4]
 800aff2:	9801      	ldr	r0, [sp, #4]
 800aff4:	3101      	adds	r1, #1
 800aff6:	f7fe f82b 	bl	8009050 <_Balloc>
 800affa:	4681      	mov	r9, r0
 800affc:	b918      	cbnz	r0, 800b006 <__gethex+0x3ba>
 800affe:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <__gethex+0x41c>)
 800b000:	4602      	mov	r2, r0
 800b002:	2184      	movs	r1, #132	@ 0x84
 800b004:	e6c5      	b.n	800ad92 <__gethex+0x146>
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	f104 010c 	add.w	r1, r4, #12
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	300c      	adds	r0, #12
 800b012:	f7fd f8bc 	bl	800818e <memcpy>
 800b016:	4621      	mov	r1, r4
 800b018:	9801      	ldr	r0, [sp, #4]
 800b01a:	f7fe f859 	bl	80090d0 <_Bfree>
 800b01e:	464c      	mov	r4, r9
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]
 800b02e:	e7be      	b.n	800afae <__gethex+0x362>
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	455a      	cmp	r2, fp
 800b034:	dd0b      	ble.n	800b04e <__gethex+0x402>
 800b036:	2101      	movs	r1, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fd9f 	bl	800ab7c <rshift>
 800b03e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b042:	3701      	adds	r7, #1
 800b044:	42bb      	cmp	r3, r7
 800b046:	f6ff aee0 	blt.w	800ae0a <__gethex+0x1be>
 800b04a:	2501      	movs	r5, #1
 800b04c:	e7c2      	b.n	800afd4 <__gethex+0x388>
 800b04e:	f016 061f 	ands.w	r6, r6, #31
 800b052:	d0fa      	beq.n	800b04a <__gethex+0x3fe>
 800b054:	4453      	add	r3, sl
 800b056:	f1c6 0620 	rsb	r6, r6, #32
 800b05a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b05e:	f7fe f8e9 	bl	8009234 <__hi0bits>
 800b062:	42b0      	cmp	r0, r6
 800b064:	dbe7      	blt.n	800b036 <__gethex+0x3ea>
 800b066:	e7f0      	b.n	800b04a <__gethex+0x3fe>
 800b068:	0800cf61 	.word	0x0800cf61

0800b06c <L_shift>:
 800b06c:	f1c2 0208 	rsb	r2, r2, #8
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	f1c2 0620 	rsb	r6, r2, #32
 800b078:	6843      	ldr	r3, [r0, #4]
 800b07a:	6804      	ldr	r4, [r0, #0]
 800b07c:	fa03 f506 	lsl.w	r5, r3, r6
 800b080:	432c      	orrs	r4, r5
 800b082:	40d3      	lsrs	r3, r2
 800b084:	6004      	str	r4, [r0, #0]
 800b086:	f840 3f04 	str.w	r3, [r0, #4]!
 800b08a:	4288      	cmp	r0, r1
 800b08c:	d3f4      	bcc.n	800b078 <L_shift+0xc>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <__match>:
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	b914      	cbnz	r4, 800b0a2 <__match+0x12>
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	bd30      	pop	{r4, r5, pc}
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0aa:	2d19      	cmp	r5, #25
 800b0ac:	bf98      	it	ls
 800b0ae:	3220      	addls	r2, #32
 800b0b0:	42a2      	cmp	r2, r4
 800b0b2:	d0f0      	beq.n	800b096 <__match+0x6>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7f3      	b.n	800b0a0 <__match+0x10>

0800b0b8 <__hexnan>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	680b      	ldr	r3, [r1, #0]
 800b0be:	6801      	ldr	r1, [r0, #0]
 800b0c0:	115e      	asrs	r6, r3, #5
 800b0c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0c6:	f013 031f 	ands.w	r3, r3, #31
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	bf18      	it	ne
 800b0ce:	3604      	addne	r6, #4
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	1f37      	subs	r7, r6, #4
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	4690      	mov	r8, r2
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0de:	46b9      	mov	r9, r7
 800b0e0:	463c      	mov	r4, r7
 800b0e2:	9502      	str	r5, [sp, #8]
 800b0e4:	46ab      	mov	fp, r5
 800b0e6:	784a      	ldrb	r2, [r1, #1]
 800b0e8:	1c4b      	adds	r3, r1, #1
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	b342      	cbz	r2, 800b140 <__hexnan+0x88>
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	9204      	str	r2, [sp, #16]
 800b0f4:	f7ff fd94 	bl	800ac20 <__hexdig_fun>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d151      	bne.n	800b1a0 <__hexnan+0xe8>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	9905      	ldr	r1, [sp, #20]
 800b100:	2a20      	cmp	r2, #32
 800b102:	d818      	bhi.n	800b136 <__hexnan+0x7e>
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	459b      	cmp	fp, r3
 800b108:	dd13      	ble.n	800b132 <__hexnan+0x7a>
 800b10a:	454c      	cmp	r4, r9
 800b10c:	d206      	bcs.n	800b11c <__hexnan+0x64>
 800b10e:	2d07      	cmp	r5, #7
 800b110:	dc04      	bgt.n	800b11c <__hexnan+0x64>
 800b112:	462a      	mov	r2, r5
 800b114:	4649      	mov	r1, r9
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff ffa8 	bl	800b06c <L_shift>
 800b11c:	4544      	cmp	r4, r8
 800b11e:	d952      	bls.n	800b1c6 <__hexnan+0x10e>
 800b120:	2300      	movs	r3, #0
 800b122:	f1a4 0904 	sub.w	r9, r4, #4
 800b126:	f844 3c04 	str.w	r3, [r4, #-4]
 800b12a:	f8cd b008 	str.w	fp, [sp, #8]
 800b12e:	464c      	mov	r4, r9
 800b130:	461d      	mov	r5, r3
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	e7d7      	b.n	800b0e6 <__hexnan+0x2e>
 800b136:	2a29      	cmp	r2, #41	@ 0x29
 800b138:	d157      	bne.n	800b1ea <__hexnan+0x132>
 800b13a:	3102      	adds	r1, #2
 800b13c:	f8ca 1000 	str.w	r1, [sl]
 800b140:	f1bb 0f00 	cmp.w	fp, #0
 800b144:	d051      	beq.n	800b1ea <__hexnan+0x132>
 800b146:	454c      	cmp	r4, r9
 800b148:	d206      	bcs.n	800b158 <__hexnan+0xa0>
 800b14a:	2d07      	cmp	r5, #7
 800b14c:	dc04      	bgt.n	800b158 <__hexnan+0xa0>
 800b14e:	462a      	mov	r2, r5
 800b150:	4649      	mov	r1, r9
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ff8a 	bl	800b06c <L_shift>
 800b158:	4544      	cmp	r4, r8
 800b15a:	d936      	bls.n	800b1ca <__hexnan+0x112>
 800b15c:	f1a8 0204 	sub.w	r2, r8, #4
 800b160:	4623      	mov	r3, r4
 800b162:	f853 1b04 	ldr.w	r1, [r3], #4
 800b166:	f842 1f04 	str.w	r1, [r2, #4]!
 800b16a:	429f      	cmp	r7, r3
 800b16c:	d2f9      	bcs.n	800b162 <__hexnan+0xaa>
 800b16e:	1b3b      	subs	r3, r7, r4
 800b170:	f023 0303 	bic.w	r3, r3, #3
 800b174:	3304      	adds	r3, #4
 800b176:	3401      	adds	r4, #1
 800b178:	3e03      	subs	r6, #3
 800b17a:	42b4      	cmp	r4, r6
 800b17c:	bf88      	it	hi
 800b17e:	2304      	movhi	r3, #4
 800b180:	4443      	add	r3, r8
 800b182:	2200      	movs	r2, #0
 800b184:	f843 2b04 	str.w	r2, [r3], #4
 800b188:	429f      	cmp	r7, r3
 800b18a:	d2fb      	bcs.n	800b184 <__hexnan+0xcc>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	b91b      	cbnz	r3, 800b198 <__hexnan+0xe0>
 800b190:	4547      	cmp	r7, r8
 800b192:	d128      	bne.n	800b1e6 <__hexnan+0x12e>
 800b194:	2301      	movs	r3, #1
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2005      	movs	r0, #5
 800b19a:	b007      	add	sp, #28
 800b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	3501      	adds	r5, #1
 800b1a2:	2d08      	cmp	r5, #8
 800b1a4:	f10b 0b01 	add.w	fp, fp, #1
 800b1a8:	dd06      	ble.n	800b1b8 <__hexnan+0x100>
 800b1aa:	4544      	cmp	r4, r8
 800b1ac:	d9c1      	bls.n	800b132 <__hexnan+0x7a>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	3c04      	subs	r4, #4
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	f000 000f 	and.w	r0, r0, #15
 800b1be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	e7b5      	b.n	800b132 <__hexnan+0x7a>
 800b1c6:	2508      	movs	r5, #8
 800b1c8:	e7b3      	b.n	800b132 <__hexnan+0x7a>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d0dd      	beq.n	800b18c <__hexnan+0xd4>
 800b1d0:	f1c3 0320 	rsb	r3, r3, #32
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	40da      	lsrs	r2, r3
 800b1da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1e4:	e7d2      	b.n	800b18c <__hexnan+0xd4>
 800b1e6:	3f04      	subs	r7, #4
 800b1e8:	e7d0      	b.n	800b18c <__hexnan+0xd4>
 800b1ea:	2004      	movs	r0, #4
 800b1ec:	e7d5      	b.n	800b19a <__hexnan+0xe2>

0800b1ee <__ascii_mbtowc>:
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	b901      	cbnz	r1, 800b1f4 <__ascii_mbtowc+0x6>
 800b1f2:	a901      	add	r1, sp, #4
 800b1f4:	b142      	cbz	r2, 800b208 <__ascii_mbtowc+0x1a>
 800b1f6:	b14b      	cbz	r3, 800b20c <__ascii_mbtowc+0x1e>
 800b1f8:	7813      	ldrb	r3, [r2, #0]
 800b1fa:	600b      	str	r3, [r1, #0]
 800b1fc:	7812      	ldrb	r2, [r2, #0]
 800b1fe:	1e10      	subs	r0, r2, #0
 800b200:	bf18      	it	ne
 800b202:	2001      	movne	r0, #1
 800b204:	b002      	add	sp, #8
 800b206:	4770      	bx	lr
 800b208:	4610      	mov	r0, r2
 800b20a:	e7fb      	b.n	800b204 <__ascii_mbtowc+0x16>
 800b20c:	f06f 0001 	mvn.w	r0, #1
 800b210:	e7f8      	b.n	800b204 <__ascii_mbtowc+0x16>

0800b212 <_realloc_r>:
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	4680      	mov	r8, r0
 800b218:	4615      	mov	r5, r2
 800b21a:	460c      	mov	r4, r1
 800b21c:	b921      	cbnz	r1, 800b228 <_realloc_r+0x16>
 800b21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b222:	4611      	mov	r1, r2
 800b224:	f7fd be88 	b.w	8008f38 <_malloc_r>
 800b228:	b92a      	cbnz	r2, 800b236 <_realloc_r+0x24>
 800b22a:	f7fd fe11 	bl	8008e50 <_free_r>
 800b22e:	2400      	movs	r4, #0
 800b230:	4620      	mov	r0, r4
 800b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b236:	f000 f840 	bl	800b2ba <_malloc_usable_size_r>
 800b23a:	4285      	cmp	r5, r0
 800b23c:	4606      	mov	r6, r0
 800b23e:	d802      	bhi.n	800b246 <_realloc_r+0x34>
 800b240:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b244:	d8f4      	bhi.n	800b230 <_realloc_r+0x1e>
 800b246:	4629      	mov	r1, r5
 800b248:	4640      	mov	r0, r8
 800b24a:	f7fd fe75 	bl	8008f38 <_malloc_r>
 800b24e:	4607      	mov	r7, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	d0ec      	beq.n	800b22e <_realloc_r+0x1c>
 800b254:	42b5      	cmp	r5, r6
 800b256:	462a      	mov	r2, r5
 800b258:	4621      	mov	r1, r4
 800b25a:	bf28      	it	cs
 800b25c:	4632      	movcs	r2, r6
 800b25e:	f7fc ff96 	bl	800818e <memcpy>
 800b262:	4621      	mov	r1, r4
 800b264:	4640      	mov	r0, r8
 800b266:	f7fd fdf3 	bl	8008e50 <_free_r>
 800b26a:	463c      	mov	r4, r7
 800b26c:	e7e0      	b.n	800b230 <_realloc_r+0x1e>

0800b26e <__ascii_wctomb>:
 800b26e:	4603      	mov	r3, r0
 800b270:	4608      	mov	r0, r1
 800b272:	b141      	cbz	r1, 800b286 <__ascii_wctomb+0x18>
 800b274:	2aff      	cmp	r2, #255	@ 0xff
 800b276:	d904      	bls.n	800b282 <__ascii_wctomb+0x14>
 800b278:	228a      	movs	r2, #138	@ 0x8a
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	4770      	bx	lr
 800b282:	700a      	strb	r2, [r1, #0]
 800b284:	2001      	movs	r0, #1
 800b286:	4770      	bx	lr

0800b288 <fiprintf>:
 800b288:	b40e      	push	{r1, r2, r3}
 800b28a:	b503      	push	{r0, r1, lr}
 800b28c:	4601      	mov	r1, r0
 800b28e:	ab03      	add	r3, sp, #12
 800b290:	4805      	ldr	r0, [pc, #20]	@ (800b2a8 <fiprintf+0x20>)
 800b292:	f853 2b04 	ldr.w	r2, [r3], #4
 800b296:	6800      	ldr	r0, [r0, #0]
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f000 f83f 	bl	800b31c <_vfiprintf_r>
 800b29e:	b002      	add	sp, #8
 800b2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2a4:	b003      	add	sp, #12
 800b2a6:	4770      	bx	lr
 800b2a8:	20000088 	.word	0x20000088

0800b2ac <abort>:
 800b2ac:	b508      	push	{r3, lr}
 800b2ae:	2006      	movs	r0, #6
 800b2b0:	f000 fa08 	bl	800b6c4 <raise>
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	f7f7 fdfd 	bl	8002eb4 <_exit>

0800b2ba <_malloc_usable_size_r>:
 800b2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2be:	1f18      	subs	r0, r3, #4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfbc      	itt	lt
 800b2c4:	580b      	ldrlt	r3, [r1, r0]
 800b2c6:	18c0      	addlt	r0, r0, r3
 800b2c8:	4770      	bx	lr

0800b2ca <__sfputc_r>:
 800b2ca:	6893      	ldr	r3, [r2, #8]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	b410      	push	{r4}
 800b2d2:	6093      	str	r3, [r2, #8]
 800b2d4:	da08      	bge.n	800b2e8 <__sfputc_r+0x1e>
 800b2d6:	6994      	ldr	r4, [r2, #24]
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	db01      	blt.n	800b2e0 <__sfputc_r+0x16>
 800b2dc:	290a      	cmp	r1, #10
 800b2de:	d103      	bne.n	800b2e8 <__sfputc_r+0x1e>
 800b2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e4:	f000 b932 	b.w	800b54c <__swbuf_r>
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	1c58      	adds	r0, r3, #1
 800b2ec:	6010      	str	r0, [r2, #0]
 800b2ee:	7019      	strb	r1, [r3, #0]
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <__sfputs_r>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	4614      	mov	r4, r2
 800b300:	18d5      	adds	r5, r2, r3
 800b302:	42ac      	cmp	r4, r5
 800b304:	d101      	bne.n	800b30a <__sfputs_r+0x12>
 800b306:	2000      	movs	r0, #0
 800b308:	e007      	b.n	800b31a <__sfputs_r+0x22>
 800b30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30e:	463a      	mov	r2, r7
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff ffda 	bl	800b2ca <__sfputc_r>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d1f3      	bne.n	800b302 <__sfputs_r+0xa>
 800b31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b31c <_vfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	460d      	mov	r5, r1
 800b322:	b09d      	sub	sp, #116	@ 0x74
 800b324:	4614      	mov	r4, r2
 800b326:	4698      	mov	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	b118      	cbz	r0, 800b334 <_vfiprintf_r+0x18>
 800b32c:	6a03      	ldr	r3, [r0, #32]
 800b32e:	b90b      	cbnz	r3, 800b334 <_vfiprintf_r+0x18>
 800b330:	f7fc fdc6 	bl	8007ec0 <__sinit>
 800b334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	d405      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b33a:	89ab      	ldrh	r3, [r5, #12]
 800b33c:	059a      	lsls	r2, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b342:	f7fc ff22 	bl	800818a <__retarget_lock_acquire_recursive>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d501      	bpl.n	800b350 <_vfiprintf_r+0x34>
 800b34c:	692b      	ldr	r3, [r5, #16]
 800b34e:	b99b      	cbnz	r3, 800b378 <_vfiprintf_r+0x5c>
 800b350:	4629      	mov	r1, r5
 800b352:	4630      	mov	r0, r6
 800b354:	f000 f938 	bl	800b5c8 <__swsetup_r>
 800b358:	b170      	cbz	r0, 800b378 <_vfiprintf_r+0x5c>
 800b35a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b35c:	07dc      	lsls	r4, r3, #31
 800b35e:	d504      	bpl.n	800b36a <_vfiprintf_r+0x4e>
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	b01d      	add	sp, #116	@ 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	0598      	lsls	r0, r3, #22
 800b36e:	d4f7      	bmi.n	800b360 <_vfiprintf_r+0x44>
 800b370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b372:	f7fc ff0b 	bl	800818c <__retarget_lock_release_recursive>
 800b376:	e7f3      	b.n	800b360 <_vfiprintf_r+0x44>
 800b378:	2300      	movs	r3, #0
 800b37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37c:	2320      	movs	r3, #32
 800b37e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b382:	f8cd 800c 	str.w	r8, [sp, #12]
 800b386:	2330      	movs	r3, #48	@ 0x30
 800b388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b538 <_vfiprintf_r+0x21c>
 800b38c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b390:	f04f 0901 	mov.w	r9, #1
 800b394:	4623      	mov	r3, r4
 800b396:	469a      	mov	sl, r3
 800b398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b39c:	b10a      	cbz	r2, 800b3a2 <_vfiprintf_r+0x86>
 800b39e:	2a25      	cmp	r2, #37	@ 0x25
 800b3a0:	d1f9      	bne.n	800b396 <_vfiprintf_r+0x7a>
 800b3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a6:	d00b      	beq.n	800b3c0 <_vfiprintf_r+0xa4>
 800b3a8:	465b      	mov	r3, fp
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ffa2 	bl	800b2f8 <__sfputs_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	f000 80a7 	beq.w	800b508 <_vfiprintf_r+0x1ec>
 800b3ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3bc:	445a      	add	r2, fp
 800b3be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 809f 	beq.w	800b508 <_vfiprintf_r+0x1ec>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3d4:	f10a 0a01 	add.w	sl, sl, #1
 800b3d8:	9304      	str	r3, [sp, #16]
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3e2:	4654      	mov	r4, sl
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ea:	4853      	ldr	r0, [pc, #332]	@ (800b538 <_vfiprintf_r+0x21c>)
 800b3ec:	f7f4 ff10 	bl	8000210 <memchr>
 800b3f0:	9a04      	ldr	r2, [sp, #16]
 800b3f2:	b9d8      	cbnz	r0, 800b42c <_vfiprintf_r+0x110>
 800b3f4:	06d1      	lsls	r1, r2, #27
 800b3f6:	bf44      	itt	mi
 800b3f8:	2320      	movmi	r3, #32
 800b3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3fe:	0713      	lsls	r3, r2, #28
 800b400:	bf44      	itt	mi
 800b402:	232b      	movmi	r3, #43	@ 0x2b
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b408:	f89a 3000 	ldrb.w	r3, [sl]
 800b40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b40e:	d015      	beq.n	800b43c <_vfiprintf_r+0x120>
 800b410:	9a07      	ldr	r2, [sp, #28]
 800b412:	4654      	mov	r4, sl
 800b414:	2000      	movs	r0, #0
 800b416:	f04f 0c0a 	mov.w	ip, #10
 800b41a:	4621      	mov	r1, r4
 800b41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b420:	3b30      	subs	r3, #48	@ 0x30
 800b422:	2b09      	cmp	r3, #9
 800b424:	d94b      	bls.n	800b4be <_vfiprintf_r+0x1a2>
 800b426:	b1b0      	cbz	r0, 800b456 <_vfiprintf_r+0x13a>
 800b428:	9207      	str	r2, [sp, #28]
 800b42a:	e014      	b.n	800b456 <_vfiprintf_r+0x13a>
 800b42c:	eba0 0308 	sub.w	r3, r0, r8
 800b430:	fa09 f303 	lsl.w	r3, r9, r3
 800b434:	4313      	orrs	r3, r2
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	46a2      	mov	sl, r4
 800b43a:	e7d2      	b.n	800b3e2 <_vfiprintf_r+0xc6>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	1d19      	adds	r1, r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	9103      	str	r1, [sp, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfbb      	ittet	lt
 800b448:	425b      	neglt	r3, r3
 800b44a:	f042 0202 	orrlt.w	r2, r2, #2
 800b44e:	9307      	strge	r3, [sp, #28]
 800b450:	9307      	strlt	r3, [sp, #28]
 800b452:	bfb8      	it	lt
 800b454:	9204      	strlt	r2, [sp, #16]
 800b456:	7823      	ldrb	r3, [r4, #0]
 800b458:	2b2e      	cmp	r3, #46	@ 0x2e
 800b45a:	d10a      	bne.n	800b472 <_vfiprintf_r+0x156>
 800b45c:	7863      	ldrb	r3, [r4, #1]
 800b45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b460:	d132      	bne.n	800b4c8 <_vfiprintf_r+0x1ac>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	9203      	str	r2, [sp, #12]
 800b46a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b46e:	3402      	adds	r4, #2
 800b470:	9305      	str	r3, [sp, #20]
 800b472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b548 <_vfiprintf_r+0x22c>
 800b476:	7821      	ldrb	r1, [r4, #0]
 800b478:	2203      	movs	r2, #3
 800b47a:	4650      	mov	r0, sl
 800b47c:	f7f4 fec8 	bl	8000210 <memchr>
 800b480:	b138      	cbz	r0, 800b492 <_vfiprintf_r+0x176>
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	eba0 000a 	sub.w	r0, r0, sl
 800b488:	2240      	movs	r2, #64	@ 0x40
 800b48a:	4082      	lsls	r2, r0
 800b48c:	4313      	orrs	r3, r2
 800b48e:	3401      	adds	r4, #1
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b496:	4829      	ldr	r0, [pc, #164]	@ (800b53c <_vfiprintf_r+0x220>)
 800b498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b49c:	2206      	movs	r2, #6
 800b49e:	f7f4 feb7 	bl	8000210 <memchr>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d03f      	beq.n	800b526 <_vfiprintf_r+0x20a>
 800b4a6:	4b26      	ldr	r3, [pc, #152]	@ (800b540 <_vfiprintf_r+0x224>)
 800b4a8:	bb1b      	cbnz	r3, 800b4f2 <_vfiprintf_r+0x1d6>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	3307      	adds	r3, #7
 800b4ae:	f023 0307 	bic.w	r3, r3, #7
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b8:	443b      	add	r3, r7
 800b4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4bc:	e76a      	b.n	800b394 <_vfiprintf_r+0x78>
 800b4be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	e7a8      	b.n	800b41a <_vfiprintf_r+0xfe>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f04f 0c0a 	mov.w	ip, #10
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4da:	3a30      	subs	r2, #48	@ 0x30
 800b4dc:	2a09      	cmp	r2, #9
 800b4de:	d903      	bls.n	800b4e8 <_vfiprintf_r+0x1cc>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0c6      	beq.n	800b472 <_vfiprintf_r+0x156>
 800b4e4:	9105      	str	r1, [sp, #20]
 800b4e6:	e7c4      	b.n	800b472 <_vfiprintf_r+0x156>
 800b4e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7f0      	b.n	800b4d4 <_vfiprintf_r+0x1b8>
 800b4f2:	ab03      	add	r3, sp, #12
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4b12      	ldr	r3, [pc, #72]	@ (800b544 <_vfiprintf_r+0x228>)
 800b4fa:	a904      	add	r1, sp, #16
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7fb fe87 	bl	8007210 <_printf_float>
 800b502:	4607      	mov	r7, r0
 800b504:	1c78      	adds	r0, r7, #1
 800b506:	d1d6      	bne.n	800b4b6 <_vfiprintf_r+0x19a>
 800b508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b50a:	07d9      	lsls	r1, r3, #31
 800b50c:	d405      	bmi.n	800b51a <_vfiprintf_r+0x1fe>
 800b50e:	89ab      	ldrh	r3, [r5, #12]
 800b510:	059a      	lsls	r2, r3, #22
 800b512:	d402      	bmi.n	800b51a <_vfiprintf_r+0x1fe>
 800b514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b516:	f7fc fe39 	bl	800818c <__retarget_lock_release_recursive>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	065b      	lsls	r3, r3, #25
 800b51e:	f53f af1f 	bmi.w	800b360 <_vfiprintf_r+0x44>
 800b522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b524:	e71e      	b.n	800b364 <_vfiprintf_r+0x48>
 800b526:	ab03      	add	r3, sp, #12
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	462a      	mov	r2, r5
 800b52c:	4b05      	ldr	r3, [pc, #20]	@ (800b544 <_vfiprintf_r+0x228>)
 800b52e:	a904      	add	r1, sp, #16
 800b530:	4630      	mov	r0, r6
 800b532:	f7fc f905 	bl	8007740 <_printf_i>
 800b536:	e7e4      	b.n	800b502 <_vfiprintf_r+0x1e6>
 800b538:	0800d221 	.word	0x0800d221
 800b53c:	0800d22b 	.word	0x0800d22b
 800b540:	08007211 	.word	0x08007211
 800b544:	0800b2f9 	.word	0x0800b2f9
 800b548:	0800d227 	.word	0x0800d227

0800b54c <__swbuf_r>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	460e      	mov	r6, r1
 800b550:	4614      	mov	r4, r2
 800b552:	4605      	mov	r5, r0
 800b554:	b118      	cbz	r0, 800b55e <__swbuf_r+0x12>
 800b556:	6a03      	ldr	r3, [r0, #32]
 800b558:	b90b      	cbnz	r3, 800b55e <__swbuf_r+0x12>
 800b55a:	f7fc fcb1 	bl	8007ec0 <__sinit>
 800b55e:	69a3      	ldr	r3, [r4, #24]
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	071a      	lsls	r2, r3, #28
 800b566:	d501      	bpl.n	800b56c <__swbuf_r+0x20>
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b943      	cbnz	r3, 800b57e <__swbuf_r+0x32>
 800b56c:	4621      	mov	r1, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	f000 f82a 	bl	800b5c8 <__swsetup_r>
 800b574:	b118      	cbz	r0, 800b57e <__swbuf_r+0x32>
 800b576:	f04f 37ff 	mov.w	r7, #4294967295
 800b57a:	4638      	mov	r0, r7
 800b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	1a98      	subs	r0, r3, r2
 800b584:	6963      	ldr	r3, [r4, #20]
 800b586:	b2f6      	uxtb	r6, r6
 800b588:	4283      	cmp	r3, r0
 800b58a:	4637      	mov	r7, r6
 800b58c:	dc05      	bgt.n	800b59a <__swbuf_r+0x4e>
 800b58e:	4621      	mov	r1, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f7ff fa6f 	bl	800aa74 <_fflush_r>
 800b596:	2800      	cmp	r0, #0
 800b598:	d1ed      	bne.n	800b576 <__swbuf_r+0x2a>
 800b59a:	68a3      	ldr	r3, [r4, #8]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	60a3      	str	r3, [r4, #8]
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	6022      	str	r2, [r4, #0]
 800b5a6:	701e      	strb	r6, [r3, #0]
 800b5a8:	6962      	ldr	r2, [r4, #20]
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d004      	beq.n	800b5ba <__swbuf_r+0x6e>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	07db      	lsls	r3, r3, #31
 800b5b4:	d5e1      	bpl.n	800b57a <__swbuf_r+0x2e>
 800b5b6:	2e0a      	cmp	r6, #10
 800b5b8:	d1df      	bne.n	800b57a <__swbuf_r+0x2e>
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f7ff fa59 	bl	800aa74 <_fflush_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0d9      	beq.n	800b57a <__swbuf_r+0x2e>
 800b5c6:	e7d6      	b.n	800b576 <__swbuf_r+0x2a>

0800b5c8 <__swsetup_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4b29      	ldr	r3, [pc, #164]	@ (800b670 <__swsetup_r+0xa8>)
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	b118      	cbz	r0, 800b5dc <__swsetup_r+0x14>
 800b5d4:	6a03      	ldr	r3, [r0, #32]
 800b5d6:	b90b      	cbnz	r3, 800b5dc <__swsetup_r+0x14>
 800b5d8:	f7fc fc72 	bl	8007ec0 <__sinit>
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	0719      	lsls	r1, r3, #28
 800b5e2:	d422      	bmi.n	800b62a <__swsetup_r+0x62>
 800b5e4:	06da      	lsls	r2, r3, #27
 800b5e6:	d407      	bmi.n	800b5f8 <__swsetup_r+0x30>
 800b5e8:	2209      	movs	r2, #9
 800b5ea:	602a      	str	r2, [r5, #0]
 800b5ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f6:	e033      	b.n	800b660 <__swsetup_r+0x98>
 800b5f8:	0758      	lsls	r0, r3, #29
 800b5fa:	d512      	bpl.n	800b622 <__swsetup_r+0x5a>
 800b5fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5fe:	b141      	cbz	r1, 800b612 <__swsetup_r+0x4a>
 800b600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b604:	4299      	cmp	r1, r3
 800b606:	d002      	beq.n	800b60e <__swsetup_r+0x46>
 800b608:	4628      	mov	r0, r5
 800b60a:	f7fd fc21 	bl	8008e50 <_free_r>
 800b60e:	2300      	movs	r3, #0
 800b610:	6363      	str	r3, [r4, #52]	@ 0x34
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6063      	str	r3, [r4, #4]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f043 0308 	orr.w	r3, r3, #8
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	b94b      	cbnz	r3, 800b642 <__swsetup_r+0x7a>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b638:	d003      	beq.n	800b642 <__swsetup_r+0x7a>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 f883 	bl	800b748 <__smakebuf_r>
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	f013 0201 	ands.w	r2, r3, #1
 800b64a:	d00a      	beq.n	800b662 <__swsetup_r+0x9a>
 800b64c:	2200      	movs	r2, #0
 800b64e:	60a2      	str	r2, [r4, #8]
 800b650:	6962      	ldr	r2, [r4, #20]
 800b652:	4252      	negs	r2, r2
 800b654:	61a2      	str	r2, [r4, #24]
 800b656:	6922      	ldr	r2, [r4, #16]
 800b658:	b942      	cbnz	r2, 800b66c <__swsetup_r+0xa4>
 800b65a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b65e:	d1c5      	bne.n	800b5ec <__swsetup_r+0x24>
 800b660:	bd38      	pop	{r3, r4, r5, pc}
 800b662:	0799      	lsls	r1, r3, #30
 800b664:	bf58      	it	pl
 800b666:	6962      	ldrpl	r2, [r4, #20]
 800b668:	60a2      	str	r2, [r4, #8]
 800b66a:	e7f4      	b.n	800b656 <__swsetup_r+0x8e>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7f7      	b.n	800b660 <__swsetup_r+0x98>
 800b670:	20000088 	.word	0x20000088

0800b674 <_raise_r>:
 800b674:	291f      	cmp	r1, #31
 800b676:	b538      	push	{r3, r4, r5, lr}
 800b678:	4605      	mov	r5, r0
 800b67a:	460c      	mov	r4, r1
 800b67c:	d904      	bls.n	800b688 <_raise_r+0x14>
 800b67e:	2316      	movs	r3, #22
 800b680:	6003      	str	r3, [r0, #0]
 800b682:	f04f 30ff 	mov.w	r0, #4294967295
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b68a:	b112      	cbz	r2, 800b692 <_raise_r+0x1e>
 800b68c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b690:	b94b      	cbnz	r3, 800b6a6 <_raise_r+0x32>
 800b692:	4628      	mov	r0, r5
 800b694:	f000 f830 	bl	800b6f8 <_getpid_r>
 800b698:	4622      	mov	r2, r4
 800b69a:	4601      	mov	r1, r0
 800b69c:	4628      	mov	r0, r5
 800b69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a2:	f000 b817 	b.w	800b6d4 <_kill_r>
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d00a      	beq.n	800b6c0 <_raise_r+0x4c>
 800b6aa:	1c59      	adds	r1, r3, #1
 800b6ac:	d103      	bne.n	800b6b6 <_raise_r+0x42>
 800b6ae:	2316      	movs	r3, #22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	e7e7      	b.n	800b686 <_raise_r+0x12>
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4798      	blx	r3
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7e0      	b.n	800b686 <_raise_r+0x12>

0800b6c4 <raise>:
 800b6c4:	4b02      	ldr	r3, [pc, #8]	@ (800b6d0 <raise+0xc>)
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	6818      	ldr	r0, [r3, #0]
 800b6ca:	f7ff bfd3 	b.w	800b674 <_raise_r>
 800b6ce:	bf00      	nop
 800b6d0:	20000088 	.word	0x20000088

0800b6d4 <_kill_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d07      	ldr	r5, [pc, #28]	@ (800b6f4 <_kill_r+0x20>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	4611      	mov	r1, r2
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	f7f7 fbd7 	bl	8002e94 <_kill>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d102      	bne.n	800b6f0 <_kill_r+0x1c>
 800b6ea:	682b      	ldr	r3, [r5, #0]
 800b6ec:	b103      	cbz	r3, 800b6f0 <_kill_r+0x1c>
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200009b0 	.word	0x200009b0

0800b6f8 <_getpid_r>:
 800b6f8:	f7f7 bbc4 	b.w	8002e84 <_getpid>

0800b6fc <__swhatbuf_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b704:	2900      	cmp	r1, #0
 800b706:	b096      	sub	sp, #88	@ 0x58
 800b708:	4615      	mov	r5, r2
 800b70a:	461e      	mov	r6, r3
 800b70c:	da0d      	bge.n	800b72a <__swhatbuf_r+0x2e>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	bf14      	ite	ne
 800b71a:	2340      	movne	r3, #64	@ 0x40
 800b71c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b720:	2000      	movs	r0, #0
 800b722:	6031      	str	r1, [r6, #0]
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	b016      	add	sp, #88	@ 0x58
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	466a      	mov	r2, sp
 800b72c:	f000 f848 	bl	800b7c0 <_fstat_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	dbec      	blt.n	800b70e <__swhatbuf_r+0x12>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b73a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b73e:	4259      	negs	r1, r3
 800b740:	4159      	adcs	r1, r3
 800b742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b746:	e7eb      	b.n	800b720 <__swhatbuf_r+0x24>

0800b748 <__smakebuf_r>:
 800b748:	898b      	ldrh	r3, [r1, #12]
 800b74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b74c:	079d      	lsls	r5, r3, #30
 800b74e:	4606      	mov	r6, r0
 800b750:	460c      	mov	r4, r1
 800b752:	d507      	bpl.n	800b764 <__smakebuf_r+0x1c>
 800b754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2301      	movs	r3, #1
 800b75e:	6163      	str	r3, [r4, #20]
 800b760:	b003      	add	sp, #12
 800b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b764:	ab01      	add	r3, sp, #4
 800b766:	466a      	mov	r2, sp
 800b768:	f7ff ffc8 	bl	800b6fc <__swhatbuf_r>
 800b76c:	9f00      	ldr	r7, [sp, #0]
 800b76e:	4605      	mov	r5, r0
 800b770:	4639      	mov	r1, r7
 800b772:	4630      	mov	r0, r6
 800b774:	f7fd fbe0 	bl	8008f38 <_malloc_r>
 800b778:	b948      	cbnz	r0, 800b78e <__smakebuf_r+0x46>
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	059a      	lsls	r2, r3, #22
 800b780:	d4ee      	bmi.n	800b760 <__smakebuf_r+0x18>
 800b782:	f023 0303 	bic.w	r3, r3, #3
 800b786:	f043 0302 	orr.w	r3, r3, #2
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	e7e2      	b.n	800b754 <__smakebuf_r+0xc>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	6020      	str	r0, [r4, #0]
 800b792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b79e:	b15b      	cbz	r3, 800b7b8 <__smakebuf_r+0x70>
 800b7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f000 f81d 	bl	800b7e4 <_isatty_r>
 800b7aa:	b128      	cbz	r0, 800b7b8 <__smakebuf_r+0x70>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	431d      	orrs	r5, r3
 800b7bc:	81a5      	strh	r5, [r4, #12]
 800b7be:	e7cf      	b.n	800b760 <__smakebuf_r+0x18>

0800b7c0 <_fstat_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	4d07      	ldr	r5, [pc, #28]	@ (800b7e0 <_fstat_r+0x20>)
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	f7f7 fbc1 	bl	8002f54 <_fstat>
 800b7d2:	1c43      	adds	r3, r0, #1
 800b7d4:	d102      	bne.n	800b7dc <_fstat_r+0x1c>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	b103      	cbz	r3, 800b7dc <_fstat_r+0x1c>
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	bd38      	pop	{r3, r4, r5, pc}
 800b7de:	bf00      	nop
 800b7e0:	200009b0 	.word	0x200009b0

0800b7e4 <_isatty_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	@ (800b800 <_isatty_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f7 fbc0 	bl	8002f74 <_isatty>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_isatty_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_isatty_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	200009b0 	.word	0x200009b0

0800b804 <sqrt>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	ed2d 8b02 	vpush	{d8}
 800b80a:	ec55 4b10 	vmov	r4, r5, d0
 800b80e:	f000 f9c7 	bl	800bba0 <__ieee754_sqrt>
 800b812:	4622      	mov	r2, r4
 800b814:	462b      	mov	r3, r5
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	eeb0 8a40 	vmov.f32	s16, s0
 800b81e:	eef0 8a60 	vmov.f32	s17, s1
 800b822:	f7f5 f9a3 	bl	8000b6c <__aeabi_dcmpun>
 800b826:	b990      	cbnz	r0, 800b84e <sqrt+0x4a>
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	4620      	mov	r0, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	f7f5 f974 	bl	8000b1c <__aeabi_dcmplt>
 800b834:	b158      	cbz	r0, 800b84e <sqrt+0x4a>
 800b836:	f7fc fc7d 	bl	8008134 <__errno>
 800b83a:	2321      	movs	r3, #33	@ 0x21
 800b83c:	6003      	str	r3, [r0, #0]
 800b83e:	2200      	movs	r2, #0
 800b840:	2300      	movs	r3, #0
 800b842:	4610      	mov	r0, r2
 800b844:	4619      	mov	r1, r3
 800b846:	f7f5 f821 	bl	800088c <__aeabi_ddiv>
 800b84a:	ec41 0b18 	vmov	d8, r0, r1
 800b84e:	eeb0 0a48 	vmov.f32	s0, s16
 800b852:	eef0 0a68 	vmov.f32	s1, s17
 800b856:	ecbd 8b02 	vpop	{d8}
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	0000      	movs	r0, r0
	...

0800b860 <atan>:
 800b860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ec55 4b10 	vmov	r4, r5, d0
 800b868:	4bbf      	ldr	r3, [pc, #764]	@ (800bb68 <atan+0x308>)
 800b86a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b86e:	429e      	cmp	r6, r3
 800b870:	46ab      	mov	fp, r5
 800b872:	d918      	bls.n	800b8a6 <atan+0x46>
 800b874:	4bbd      	ldr	r3, [pc, #756]	@ (800bb6c <atan+0x30c>)
 800b876:	429e      	cmp	r6, r3
 800b878:	d801      	bhi.n	800b87e <atan+0x1e>
 800b87a:	d109      	bne.n	800b890 <atan+0x30>
 800b87c:	b144      	cbz	r4, 800b890 <atan+0x30>
 800b87e:	4622      	mov	r2, r4
 800b880:	462b      	mov	r3, r5
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 fd21 	bl	80002cc <__adddf3>
 800b88a:	4604      	mov	r4, r0
 800b88c:	460d      	mov	r5, r1
 800b88e:	e006      	b.n	800b89e <atan+0x3e>
 800b890:	f1bb 0f00 	cmp.w	fp, #0
 800b894:	f340 812b 	ble.w	800baee <atan+0x28e>
 800b898:	a597      	add	r5, pc, #604	@ (adr r5, 800baf8 <atan+0x298>)
 800b89a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b89e:	ec45 4b10 	vmov	d0, r4, r5
 800b8a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a6:	4bb2      	ldr	r3, [pc, #712]	@ (800bb70 <atan+0x310>)
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	d813      	bhi.n	800b8d4 <atan+0x74>
 800b8ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b8b0:	429e      	cmp	r6, r3
 800b8b2:	d80c      	bhi.n	800b8ce <atan+0x6e>
 800b8b4:	a392      	add	r3, pc, #584	@ (adr r3, 800bb00 <atan+0x2a0>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fd05 	bl	80002cc <__adddf3>
 800b8c2:	4bac      	ldr	r3, [pc, #688]	@ (800bb74 <atan+0x314>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f7f5 f947 	bl	8000b58 <__aeabi_dcmpgt>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d1e7      	bne.n	800b89e <atan+0x3e>
 800b8ce:	f04f 3aff 	mov.w	sl, #4294967295
 800b8d2:	e029      	b.n	800b928 <atan+0xc8>
 800b8d4:	f000 f95c 	bl	800bb90 <fabs>
 800b8d8:	4ba7      	ldr	r3, [pc, #668]	@ (800bb78 <atan+0x318>)
 800b8da:	429e      	cmp	r6, r3
 800b8dc:	ec55 4b10 	vmov	r4, r5, d0
 800b8e0:	f200 80bc 	bhi.w	800ba5c <atan+0x1fc>
 800b8e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b8e8:	429e      	cmp	r6, r3
 800b8ea:	f200 809e 	bhi.w	800ba2a <atan+0x1ca>
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	f7f4 fce9 	bl	80002cc <__adddf3>
 800b8fa:	4b9e      	ldr	r3, [pc, #632]	@ (800bb74 <atan+0x314>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f7f4 fce3 	bl	80002c8 <__aeabi_dsub>
 800b902:	2200      	movs	r2, #0
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fcdc 	bl	80002cc <__adddf3>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f4 ffb6 	bl	800088c <__aeabi_ddiv>
 800b920:	f04f 0a00 	mov.w	sl, #0
 800b924:	4604      	mov	r4, r0
 800b926:	460d      	mov	r5, r1
 800b928:	4622      	mov	r2, r4
 800b92a:	462b      	mov	r3, r5
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f4 fe82 	bl	8000638 <__aeabi_dmul>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4680      	mov	r8, r0
 800b93a:	4689      	mov	r9, r1
 800b93c:	f7f4 fe7c 	bl	8000638 <__aeabi_dmul>
 800b940:	a371      	add	r3, pc, #452	@ (adr r3, 800bb08 <atan+0x2a8>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	f7f4 fe75 	bl	8000638 <__aeabi_dmul>
 800b94e:	a370      	add	r3, pc, #448	@ (adr r3, 800bb10 <atan+0x2b0>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fcba 	bl	80002cc <__adddf3>
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	f7f4 fe6c 	bl	8000638 <__aeabi_dmul>
 800b960:	a36d      	add	r3, pc, #436	@ (adr r3, 800bb18 <atan+0x2b8>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	f7f4 fcb1 	bl	80002cc <__adddf3>
 800b96a:	4632      	mov	r2, r6
 800b96c:	463b      	mov	r3, r7
 800b96e:	f7f4 fe63 	bl	8000638 <__aeabi_dmul>
 800b972:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb20 <atan+0x2c0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fca8 	bl	80002cc <__adddf3>
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	f7f4 fe5a 	bl	8000638 <__aeabi_dmul>
 800b984:	a368      	add	r3, pc, #416	@ (adr r3, 800bb28 <atan+0x2c8>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	f7f4 fc9f 	bl	80002cc <__adddf3>
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	f7f4 fe51 	bl	8000638 <__aeabi_dmul>
 800b996:	a366      	add	r3, pc, #408	@ (adr r3, 800bb30 <atan+0x2d0>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fc96 	bl	80002cc <__adddf3>
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	f7f4 fe48 	bl	8000638 <__aeabi_dmul>
 800b9a8:	a363      	add	r3, pc, #396	@ (adr r3, 800bb38 <atan+0x2d8>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f4 fe3f 	bl	8000638 <__aeabi_dmul>
 800b9ba:	a361      	add	r3, pc, #388	@ (adr r3, 800bb40 <atan+0x2e0>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc82 	bl	80002c8 <__aeabi_dsub>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	f7f4 fe36 	bl	8000638 <__aeabi_dmul>
 800b9cc:	a35e      	add	r3, pc, #376	@ (adr r3, 800bb48 <atan+0x2e8>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fc79 	bl	80002c8 <__aeabi_dsub>
 800b9d6:	4632      	mov	r2, r6
 800b9d8:	463b      	mov	r3, r7
 800b9da:	f7f4 fe2d 	bl	8000638 <__aeabi_dmul>
 800b9de:	a35c      	add	r3, pc, #368	@ (adr r3, 800bb50 <atan+0x2f0>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fc70 	bl	80002c8 <__aeabi_dsub>
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	f7f4 fe24 	bl	8000638 <__aeabi_dmul>
 800b9f0:	a359      	add	r3, pc, #356	@ (adr r3, 800bb58 <atan+0x2f8>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fc67 	bl	80002c8 <__aeabi_dsub>
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	463b      	mov	r3, r7
 800b9fe:	f7f4 fe1b 	bl	8000638 <__aeabi_dmul>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4640      	mov	r0, r8
 800ba08:	4649      	mov	r1, r9
 800ba0a:	f7f4 fc5f 	bl	80002cc <__adddf3>
 800ba0e:	4622      	mov	r2, r4
 800ba10:	462b      	mov	r3, r5
 800ba12:	f7f4 fe11 	bl	8000638 <__aeabi_dmul>
 800ba16:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	d148      	bne.n	800bab2 <atan+0x252>
 800ba20:	4620      	mov	r0, r4
 800ba22:	4629      	mov	r1, r5
 800ba24:	f7f4 fc50 	bl	80002c8 <__aeabi_dsub>
 800ba28:	e72f      	b.n	800b88a <atan+0x2a>
 800ba2a:	4b52      	ldr	r3, [pc, #328]	@ (800bb74 <atan+0x314>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fc49 	bl	80002c8 <__aeabi_dsub>
 800ba36:	4b4f      	ldr	r3, [pc, #316]	@ (800bb74 <atan+0x314>)
 800ba38:	4606      	mov	r6, r0
 800ba3a:	460f      	mov	r7, r1
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	4629      	mov	r1, r5
 800ba42:	f7f4 fc43 	bl	80002cc <__adddf3>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	f7f4 ff1d 	bl	800088c <__aeabi_ddiv>
 800ba52:	f04f 0a01 	mov.w	sl, #1
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	e765      	b.n	800b928 <atan+0xc8>
 800ba5c:	4b47      	ldr	r3, [pc, #284]	@ (800bb7c <atan+0x31c>)
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	d21c      	bcs.n	800ba9c <atan+0x23c>
 800ba62:	4b47      	ldr	r3, [pc, #284]	@ (800bb80 <atan+0x320>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7f4 fc2d 	bl	80002c8 <__aeabi_dsub>
 800ba6e:	4b44      	ldr	r3, [pc, #272]	@ (800bb80 <atan+0x320>)
 800ba70:	4606      	mov	r6, r0
 800ba72:	460f      	mov	r7, r1
 800ba74:	2200      	movs	r2, #0
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fddd 	bl	8000638 <__aeabi_dmul>
 800ba7e:	4b3d      	ldr	r3, [pc, #244]	@ (800bb74 <atan+0x314>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	f7f4 fc23 	bl	80002cc <__adddf3>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f4 fefd 	bl	800088c <__aeabi_ddiv>
 800ba92:	f04f 0a02 	mov.w	sl, #2
 800ba96:	4604      	mov	r4, r0
 800ba98:	460d      	mov	r5, r1
 800ba9a:	e745      	b.n	800b928 <atan+0xc8>
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	462b      	mov	r3, r5
 800baa0:	4938      	ldr	r1, [pc, #224]	@ (800bb84 <atan+0x324>)
 800baa2:	2000      	movs	r0, #0
 800baa4:	f7f4 fef2 	bl	800088c <__aeabi_ddiv>
 800baa8:	f04f 0a03 	mov.w	sl, #3
 800baac:	4604      	mov	r4, r0
 800baae:	460d      	mov	r5, r1
 800bab0:	e73a      	b.n	800b928 <atan+0xc8>
 800bab2:	4b35      	ldr	r3, [pc, #212]	@ (800bb88 <atan+0x328>)
 800bab4:	4e35      	ldr	r6, [pc, #212]	@ (800bb8c <atan+0x32c>)
 800bab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fc03 	bl	80002c8 <__aeabi_dsub>
 800bac2:	4622      	mov	r2, r4
 800bac4:	462b      	mov	r3, r5
 800bac6:	f7f4 fbff 	bl	80002c8 <__aeabi_dsub>
 800baca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bad6:	f7f4 fbf7 	bl	80002c8 <__aeabi_dsub>
 800bada:	f1bb 0f00 	cmp.w	fp, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	f6bf aedc 	bge.w	800b89e <atan+0x3e>
 800bae6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800baea:	461d      	mov	r5, r3
 800baec:	e6d7      	b.n	800b89e <atan+0x3e>
 800baee:	a51c      	add	r5, pc, #112	@ (adr r5, 800bb60 <atan+0x300>)
 800baf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800baf4:	e6d3      	b.n	800b89e <atan+0x3e>
 800baf6:	bf00      	nop
 800baf8:	54442d18 	.word	0x54442d18
 800bafc:	3ff921fb 	.word	0x3ff921fb
 800bb00:	8800759c 	.word	0x8800759c
 800bb04:	7e37e43c 	.word	0x7e37e43c
 800bb08:	e322da11 	.word	0xe322da11
 800bb0c:	3f90ad3a 	.word	0x3f90ad3a
 800bb10:	24760deb 	.word	0x24760deb
 800bb14:	3fa97b4b 	.word	0x3fa97b4b
 800bb18:	a0d03d51 	.word	0xa0d03d51
 800bb1c:	3fb10d66 	.word	0x3fb10d66
 800bb20:	c54c206e 	.word	0xc54c206e
 800bb24:	3fb745cd 	.word	0x3fb745cd
 800bb28:	920083ff 	.word	0x920083ff
 800bb2c:	3fc24924 	.word	0x3fc24924
 800bb30:	5555550d 	.word	0x5555550d
 800bb34:	3fd55555 	.word	0x3fd55555
 800bb38:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb3c:	bfa2b444 	.word	0xbfa2b444
 800bb40:	52defd9a 	.word	0x52defd9a
 800bb44:	3fadde2d 	.word	0x3fadde2d
 800bb48:	af749a6d 	.word	0xaf749a6d
 800bb4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb50:	fe231671 	.word	0xfe231671
 800bb54:	3fbc71c6 	.word	0x3fbc71c6
 800bb58:	9998ebc4 	.word	0x9998ebc4
 800bb5c:	3fc99999 	.word	0x3fc99999
 800bb60:	54442d18 	.word	0x54442d18
 800bb64:	bff921fb 	.word	0xbff921fb
 800bb68:	440fffff 	.word	0x440fffff
 800bb6c:	7ff00000 	.word	0x7ff00000
 800bb70:	3fdbffff 	.word	0x3fdbffff
 800bb74:	3ff00000 	.word	0x3ff00000
 800bb78:	3ff2ffff 	.word	0x3ff2ffff
 800bb7c:	40038000 	.word	0x40038000
 800bb80:	3ff80000 	.word	0x3ff80000
 800bb84:	bff00000 	.word	0xbff00000
 800bb88:	0800d2d8 	.word	0x0800d2d8
 800bb8c:	0800d2f8 	.word	0x0800d2f8

0800bb90 <fabs>:
 800bb90:	ec51 0b10 	vmov	r0, r1, d0
 800bb94:	4602      	mov	r2, r0
 800bb96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb9a:	ec43 2b10 	vmov	d0, r2, r3
 800bb9e:	4770      	bx	lr

0800bba0 <__ieee754_sqrt>:
 800bba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	4a68      	ldr	r2, [pc, #416]	@ (800bd48 <__ieee754_sqrt+0x1a8>)
 800bba6:	ec55 4b10 	vmov	r4, r5, d0
 800bbaa:	43aa      	bics	r2, r5
 800bbac:	462b      	mov	r3, r5
 800bbae:	4621      	mov	r1, r4
 800bbb0:	d110      	bne.n	800bbd4 <__ieee754_sqrt+0x34>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 fd3e 	bl	8000638 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f4 fb82 	bl	80002cc <__adddf3>
 800bbc8:	4604      	mov	r4, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	ec45 4b10 	vmov	d0, r4, r5
 800bbd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd4:	2d00      	cmp	r5, #0
 800bbd6:	dc0e      	bgt.n	800bbf6 <__ieee754_sqrt+0x56>
 800bbd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bbdc:	4322      	orrs	r2, r4
 800bbde:	d0f5      	beq.n	800bbcc <__ieee754_sqrt+0x2c>
 800bbe0:	b19d      	cbz	r5, 800bc0a <__ieee754_sqrt+0x6a>
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 fb6e 	bl	80002c8 <__aeabi_dsub>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	f7f4 fe4c 	bl	800088c <__aeabi_ddiv>
 800bbf4:	e7e8      	b.n	800bbc8 <__ieee754_sqrt+0x28>
 800bbf6:	152a      	asrs	r2, r5, #20
 800bbf8:	d115      	bne.n	800bc26 <__ieee754_sqrt+0x86>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e009      	b.n	800bc12 <__ieee754_sqrt+0x72>
 800bbfe:	0acb      	lsrs	r3, r1, #11
 800bc00:	3a15      	subs	r2, #21
 800bc02:	0549      	lsls	r1, r1, #21
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0fa      	beq.n	800bbfe <__ieee754_sqrt+0x5e>
 800bc08:	e7f7      	b.n	800bbfa <__ieee754_sqrt+0x5a>
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	e7fa      	b.n	800bc04 <__ieee754_sqrt+0x64>
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	3001      	adds	r0, #1
 800bc12:	02dc      	lsls	r4, r3, #11
 800bc14:	d5fb      	bpl.n	800bc0e <__ieee754_sqrt+0x6e>
 800bc16:	1e44      	subs	r4, r0, #1
 800bc18:	1b12      	subs	r2, r2, r4
 800bc1a:	f1c0 0420 	rsb	r4, r0, #32
 800bc1e:	fa21 f404 	lsr.w	r4, r1, r4
 800bc22:	4323      	orrs	r3, r4
 800bc24:	4081      	lsls	r1, r0
 800bc26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bc2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc32:	07d2      	lsls	r2, r2, #31
 800bc34:	bf5c      	itt	pl
 800bc36:	005b      	lslpl	r3, r3, #1
 800bc38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bc3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc40:	bf58      	it	pl
 800bc42:	0049      	lslpl	r1, r1, #1
 800bc44:	2600      	movs	r6, #0
 800bc46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bc4a:	106d      	asrs	r5, r5, #1
 800bc4c:	0049      	lsls	r1, r1, #1
 800bc4e:	2016      	movs	r0, #22
 800bc50:	4632      	mov	r2, r6
 800bc52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc56:	1917      	adds	r7, r2, r4
 800bc58:	429f      	cmp	r7, r3
 800bc5a:	bfde      	ittt	le
 800bc5c:	193a      	addle	r2, r7, r4
 800bc5e:	1bdb      	suble	r3, r3, r7
 800bc60:	1936      	addle	r6, r6, r4
 800bc62:	0fcf      	lsrs	r7, r1, #31
 800bc64:	3801      	subs	r0, #1
 800bc66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bc6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc72:	d1f0      	bne.n	800bc56 <__ieee754_sqrt+0xb6>
 800bc74:	4604      	mov	r4, r0
 800bc76:	2720      	movs	r7, #32
 800bc78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	eb00 0e0c 	add.w	lr, r0, ip
 800bc82:	db02      	blt.n	800bc8a <__ieee754_sqrt+0xea>
 800bc84:	d113      	bne.n	800bcae <__ieee754_sqrt+0x10e>
 800bc86:	458e      	cmp	lr, r1
 800bc88:	d811      	bhi.n	800bcae <__ieee754_sqrt+0x10e>
 800bc8a:	f1be 0f00 	cmp.w	lr, #0
 800bc8e:	eb0e 000c 	add.w	r0, lr, ip
 800bc92:	da42      	bge.n	800bd1a <__ieee754_sqrt+0x17a>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	db40      	blt.n	800bd1a <__ieee754_sqrt+0x17a>
 800bc98:	f102 0801 	add.w	r8, r2, #1
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	458e      	cmp	lr, r1
 800bca0:	bf88      	it	hi
 800bca2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bca6:	eba1 010e 	sub.w	r1, r1, lr
 800bcaa:	4464      	add	r4, ip
 800bcac:	4642      	mov	r2, r8
 800bcae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bcb2:	3f01      	subs	r7, #1
 800bcb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bcb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bcbc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bcc0:	d1dc      	bne.n	800bc7c <__ieee754_sqrt+0xdc>
 800bcc2:	4319      	orrs	r1, r3
 800bcc4:	d01b      	beq.n	800bcfe <__ieee754_sqrt+0x15e>
 800bcc6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bd4c <__ieee754_sqrt+0x1ac>
 800bcca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bd50 <__ieee754_sqrt+0x1b0>
 800bcce:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcd2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4640      	mov	r0, r8
 800bce4:	4649      	mov	r1, r9
 800bce6:	f7f4 ff23 	bl	8000b30 <__aeabi_dcmple>
 800bcea:	b140      	cbz	r0, 800bcfe <__ieee754_sqrt+0x15e>
 800bcec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bcf0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcf4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcf8:	d111      	bne.n	800bd1e <__ieee754_sqrt+0x17e>
 800bcfa:	3601      	adds	r6, #1
 800bcfc:	463c      	mov	r4, r7
 800bcfe:	1072      	asrs	r2, r6, #1
 800bd00:	0863      	lsrs	r3, r4, #1
 800bd02:	07f1      	lsls	r1, r6, #31
 800bd04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bd08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bd0c:	bf48      	it	mi
 800bd0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bd12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bd16:	4618      	mov	r0, r3
 800bd18:	e756      	b.n	800bbc8 <__ieee754_sqrt+0x28>
 800bd1a:	4690      	mov	r8, r2
 800bd1c:	e7be      	b.n	800bc9c <__ieee754_sqrt+0xfc>
 800bd1e:	f7f4 fad5 	bl	80002cc <__adddf3>
 800bd22:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	f7f4 fef5 	bl	8000b1c <__aeabi_dcmplt>
 800bd32:	b120      	cbz	r0, 800bd3e <__ieee754_sqrt+0x19e>
 800bd34:	1ca0      	adds	r0, r4, #2
 800bd36:	bf08      	it	eq
 800bd38:	3601      	addeq	r6, #1
 800bd3a:	3402      	adds	r4, #2
 800bd3c:	e7df      	b.n	800bcfe <__ieee754_sqrt+0x15e>
 800bd3e:	1c63      	adds	r3, r4, #1
 800bd40:	f023 0401 	bic.w	r4, r3, #1
 800bd44:	e7db      	b.n	800bcfe <__ieee754_sqrt+0x15e>
 800bd46:	bf00      	nop
 800bd48:	7ff00000 	.word	0x7ff00000
 800bd4c:	20000250 	.word	0x20000250
 800bd50:	20000248 	.word	0x20000248

0800bd54 <round>:
 800bd54:	ec51 0b10 	vmov	r0, r1, d0
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800bd5e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800bd62:	2a13      	cmp	r2, #19
 800bd64:	460b      	mov	r3, r1
 800bd66:	4605      	mov	r5, r0
 800bd68:	dc1b      	bgt.n	800bda2 <round+0x4e>
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	da0b      	bge.n	800bd86 <round+0x32>
 800bd6e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800bd72:	3201      	adds	r2, #1
 800bd74:	bf04      	itt	eq
 800bd76:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd7a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	e015      	b.n	800bdb2 <round+0x5e>
 800bd86:	4c15      	ldr	r4, [pc, #84]	@ (800bddc <round+0x88>)
 800bd88:	4114      	asrs	r4, r2
 800bd8a:	ea04 0601 	and.w	r6, r4, r1
 800bd8e:	4306      	orrs	r6, r0
 800bd90:	d00f      	beq.n	800bdb2 <round+0x5e>
 800bd92:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800bd96:	fa41 f202 	asr.w	r2, r1, r2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	ea23 0304 	bic.w	r3, r3, r4
 800bda0:	e7ed      	b.n	800bd7e <round+0x2a>
 800bda2:	2a33      	cmp	r2, #51	@ 0x33
 800bda4:	dd08      	ble.n	800bdb8 <round+0x64>
 800bda6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bdaa:	d102      	bne.n	800bdb2 <round+0x5e>
 800bdac:	4602      	mov	r2, r0
 800bdae:	f7f4 fa8d 	bl	80002cc <__adddf3>
 800bdb2:	ec41 0b10 	vmov	d0, r0, r1
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800bdbc:	f04f 34ff 	mov.w	r4, #4294967295
 800bdc0:	40f4      	lsrs	r4, r6
 800bdc2:	4204      	tst	r4, r0
 800bdc4:	d0f5      	beq.n	800bdb2 <round+0x5e>
 800bdc6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800bdca:	2201      	movs	r2, #1
 800bdcc:	408a      	lsls	r2, r1
 800bdce:	1952      	adds	r2, r2, r5
 800bdd0:	bf28      	it	cs
 800bdd2:	3301      	addcs	r3, #1
 800bdd4:	ea22 0204 	bic.w	r2, r2, r4
 800bdd8:	e7d2      	b.n	800bd80 <round+0x2c>
 800bdda:	bf00      	nop
 800bddc:	000fffff 	.word	0x000fffff

0800bde0 <_init>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr

0800bdec <_fini>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr
